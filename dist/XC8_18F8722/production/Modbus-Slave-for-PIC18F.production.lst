

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Dec 16 09:52:36 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           	psect	idataCOMRAM
    36  001174                     __pidataCOMRAM:
    37                           	opt stack 0
    38                           
    39                           ;initializer for _newMessage
    40  001174  01                 	db	1
    41  0000                     _BAUDCON1bits	set	3966
    42  0000                     _INTCONbits	set	4082
    43  0000                     _LATCbits	set	3979
    44  0000                     _LATF	set	3982
    45  0000                     _PIE1	set	3997
    46  0000                     _PIE1bits	set	3997
    47  0000                     _PIR1bits	set	3998
    48  0000                     _RCONbits	set	4048
    49  0000                     _RCREG1	set	4014
    50  0000                     _RCSTA1	set	4011
    51  0000                     _RCSTA1bits	set	4011
    52  0000                     _SPBRG	set	4015
    53  0000                     _T0CONbits	set	4053
    54  0000                     _TMR0H	set	4055
    55  0000                     _TMR0L	set	4054
    56  0000                     _TRISCbits	set	3988
    57  0000                     _TRISF	set	3991
    58  0000                     _TXREG1	set	4013
    59  0000                     _TXSTA1	set	4012
    60  0000                     _TXSTA1bits	set	4012
    61                           
    62                           ; #config settings
    63  0000                     
    64                           	psect	cinit
    65  0010B2                     __pcinit:
    66                           	opt stack 0
    67  0010B2                     start_initialization:
    68                           	opt stack 0
    69  0010B2                     __initialization:
    70                           	opt stack 0
    71                           
    72                           ; Clear objects allocated to BANK2 (50 bytes)
    73  0010B2  EE02  F000         	lfsr	0,__pbssBANK2
    74  0010B6  0E32               	movlw	50
    75  0010B8                     clear_0:
    76  0010B8  6AEE               	clrf	postinc0,c
    77  0010BA  06E8               	decf	wreg,f,c
    78  0010BC  E1FD               	bnz	clear_0
    79                           
    80                           ; Clear objects allocated to BANK1 (225 bytes)
    81  0010BE  EE01  F000         	lfsr	0,__pbssBANK1
    82  0010C2  0EE1               	movlw	225
    83  0010C4                     clear_1:
    84  0010C4  6AEE               	clrf	postinc0,c
    85  0010C6  06E8               	decf	wreg,f,c
    86  0010C8  E1FD               	bnz	clear_1
    87                           
    88                           ; Clear objects allocated to BANK0 (125 bytes)
    89  0010CA  EE00  F060         	lfsr	0,__pbssBANK0
    90  0010CE  0E7D               	movlw	125
    91  0010D0                     clear_2:
    92  0010D0  6AEE               	clrf	postinc0,c
    93  0010D2  06E8               	decf	wreg,f,c
    94  0010D4  E1FD               	bnz	clear_2
    95                           
    96                           ; Clear objects allocated to COMRAM (5 bytes)
    97  0010D6  6A3F               	clrf	(__pbssCOMRAM+4)& (0+255),c
    98  0010D8  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
    99  0010DA  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   100  0010DC  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   101  0010DE  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   102                           
   103                           ; Initialize objects allocated to COMRAM (1 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  0010E0  0E74               	movlw	low __pidataCOMRAM
   106  0010E2  6EF6               	movwf	tblptrl,c
   107  0010E4  0E11               	movlw	high __pidataCOMRAM
   108  0010E6  6EF7               	movwf	tblptrh,c
   109  0010E8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  0010EA  6EF8               	movwf	tblptru,c
   111  0010EC  0009               	tblrd		*+	;fetch initializer
   112  0010EE  CFF5 F040          	movff	tablat,__pdataCOMRAM
   113  0010F2                     end_of_initialization:
   114                           	opt stack 0
   115  0010F2                     __end_of__initialization:
   116                           	opt stack 0
   117  0010F2  0100               	movlb	0
   118  0010F4  EF92  F008         	goto	_main	;jump to C main() function
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	bssCOMRAM
   127  00003B                     __pbssCOMRAM:
   128                           	opt stack 0
   129  00003B                     _endOfMessage:
   130                           	opt stack 0
   131  00003B                     	ds	1
   132  00003C                     _messageLength:
   133                           	opt stack 0
   134  00003C                     	ds	1
   135  00003D                     _modbusMessage:
   136                           	opt stack 0
   137  00003D                     	ds	1
   138  00003E                     _timerCount:
   139                           	opt stack 0
   140  00003E                     	ds	1
   141  00003F                     _z:
   142                           	opt stack 0
   143  00003F                     	ds	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           
   151                           	psect	dataCOMRAM
   152  000040                     __pdataCOMRAM:
   153                           	opt stack 0
   154  000040                     _newMessage:
   155                           	opt stack 0
   156  000040                     	ds	1
   157                           tblptru	equ	0xFF8
   158                           tblptrh	equ	0xFF7
   159                           tblptrl	equ	0xFF6
   160                           tablat	equ	0xFF5
   161                           postinc0	equ	0xFEE
   162                           wreg	equ	0xFE8
   163                           
   164                           	psect	bssBANK0
   165  000060                     __pbssBANK0:
   166                           	opt stack 0
   167  000060                     _response:
   168                           	opt stack 0
   169  000060                     	ds	125
   170                           tblptru	equ	0xFF8
   171                           tblptrh	equ	0xFF7
   172                           tblptrl	equ	0xFF6
   173                           tablat	equ	0xFF5
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	bssBANK1
   178  000100                     __pbssBANK1:
   179                           	opt stack 0
   180  000100                     _received:
   181                           	opt stack 0
   182  000100                     	ds	125
   183  00017D                     _holdingReg:
   184                           	opt stack 0
   185  00017D                     	ds	100
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           
   193                           	psect	bssBANK2
   194  000200                     __pbssBANK2:
   195                           	opt stack 0
   196  000200                     _coils:
   197                           	opt stack 0
   198  000200                     	ds	50
   199                           tblptru	equ	0xFF8
   200                           tblptrh	equ	0xFF7
   201                           tblptrl	equ	0xFF6
   202                           tablat	equ	0xFF5
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000001                     ??_isr:
   210  000001                     
   211                           ; 1 bytes @ 0x0
   212  000001                     	ds	14
   213  00000F                     ??_OpnUSART:
   214  00000F                     ??_checkCRC:
   215  00000F                     ??_clearResponse:
   216  00000F                     ?_generateCRC:
   217                           	opt stack 0
   218  00000F                     generateCRC@messageLength:
   219                           	opt stack 0
   220                           
   221                           ; 1 bytes @ 0xE
   222  00000F                     	ds	1
   223  000010                     clearResponse@i:
   224                           	opt stack 0
   225  000010                     OpnUSART@spbrg:
   226                           	opt stack 0
   227                           
   228                           ; 4 bytes @ 0xF
   229  000010                     	ds	1
   230  000011                     ??_generateCRC:
   231                           
   232                           ; 0 bytes @ 0x10
   233  000011                     	ds	2
   234  000013                     checkCRC@crcHigh:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x12
   238  000013                     	ds	1
   239  000014                     generateCRC@crcLow:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x13
   243  000014                     	ds	1
   244  000015                     checkCRC@crcLow:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x14
   248  000015                     	ds	1
   249  000016                     generateCRC@crcHigh:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x15
   253  000016                     	ds	1
   254  000017                     checkCRC@j:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x16
   258  000017                     	ds	1
   259  000018                     generateCRC@i:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x17
   263  000018                     	ds	1
   264  000019                     checkCRC@crc:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x18
   268  000019                     	ds	1
   269  00001A                     generateCRC@j:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x19
   273  00001A                     	ds	1
   274  00001B                     checkCRC@i:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x1A
   278  00001B                     	ds	1
   279  00001C                     generateCRC@crc:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x1B
   283  00001C                     	ds	2
   284  00001E                     ??_readCoil:
   285  00001E                     ??_readInputCoil:
   286  00001E                     ??_readReg:
   287  00001E                     ??_readInputReg:
   288  00001E                     ??_writeCoil:
   289  00001E                     ??_writeReg:
   290  00001E                     ??_writeMultipleRegs:
   291                           
   292                           ; 0 bytes @ 0x1D
   293  00001E                     	ds	1
   294  00001F                     writeCoil@wc_AddressLow:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x1E
   298  00001F                     	ds	1
   299  000020                     writeReg@wr_AddressLow:
   300                           	opt stack 0
   301  000020                     readCoil@rc_Address:
   302                           	opt stack 0
   303  000020                     readInputCoil@rc_Address:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x1F
   307  000020                     	ds	1
   308  000021                     writeCoil@wc_AddressHigh:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x20
   312  000021                     	ds	1
   313  000022                     readReg@crc:
   314                           	opt stack 0
   315  000022                     readInputReg@crc:
   316                           	opt stack 0
   317  000022                     writeReg@wr_AddressHigh:
   318                           	opt stack 0
   319  000022                     writeMultipleRegs@valToWriteHigh:
   320                           	opt stack 0
   321  000022                     readCoil@crc:
   322                           	opt stack 0
   323  000022                     readInputCoil@crc:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x21
   327  000022                     	ds	1
   328  000023                     writeCoil@wc_valToWriteLow:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x22
   332  000023                     	ds	1
   333  000024                     readCoil@remainder:
   334                           	opt stack 0
   335  000024                     readInputCoil@remainder:
   336                           	opt stack 0
   337  000024                     readReg@rr_Address:
   338                           	opt stack 0
   339  000024                     readInputReg@rr_Address:
   340                           	opt stack 0
   341  000024                     writeReg@wr_valToWriteLow:
   342                           	opt stack 0
   343  000024                     writeMultipleRegs@valToWriteLow:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x23
   347  000024                     	ds	1
   348  000025                     readCoil@rc_numCoils:
   349                           	opt stack 0
   350  000025                     readInputCoil@rc_numCoils:
   351                           	opt stack 0
   352  000025                     writeCoil@wc_valToWriteHigh:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x24
   356  000025                     	ds	1
   357  000026                     readReg@rr_numRegs:
   358                           	opt stack 0
   359  000026                     readInputReg@rr_numRegs:
   360                           	opt stack 0
   361  000026                     writeReg@wr_valToWriteHigh:
   362                           	opt stack 0
   363  000026                     writeMultipleRegs@wmr_numRegs:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x25
   367  000026                     	ds	1
   368  000027                     readCoil@howManyBytes:
   369                           	opt stack 0
   370  000027                     readInputCoil@howManyBytes:
   371                           	opt stack 0
   372  000027                     writeCoil@wc_valToWrite:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x26
   376  000027                     	ds	1
   377  000028                     readCoil@l:
   378                           	opt stack 0
   379  000028                     readInputCoil@l:
   380                           	opt stack 0
   381  000028                     readReg@i:
   382                           	opt stack 0
   383  000028                     readInputReg@i:
   384                           	opt stack 0
   385  000028                     writeReg@wr_Address:
   386                           	opt stack 0
   387  000028                     writeMultipleRegs@wmr_AddressHigh:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x27
   391  000028                     	ds	1
   392  000029                     readCoil@lsb:
   393                           	opt stack 0
   394  000029                     readInputCoil@lsb:
   395                           	opt stack 0
   396  000029                     writeCoil@crc:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x28
   400  000029                     	ds	1
   401  00002A                     readReg@j:
   402                           	opt stack 0
   403  00002A                     readInputReg@j:
   404                           	opt stack 0
   405  00002A                     readCoil@i:
   406                           	opt stack 0
   407  00002A                     readInputCoil@i:
   408                           	opt stack 0
   409  00002A                     writeReg@wr_valToWrite:
   410                           	opt stack 0
   411  00002A                     writeMultipleRegs@wmr_AddressLow:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x29
   415  00002A                     	ds	1
   416  00002B                     readCoil@j:
   417                           	opt stack 0
   418  00002B                     readInputCoil@j:
   419                           	opt stack 0
   420  00002B                     writeCoil@wc_Address:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2A
   424  00002B                     	ds	1
   425  00002C                     readCoil@k:
   426                           	opt stack 0
   427  00002C                     readInputCoil@k:
   428                           	opt stack 0
   429  00002C                     writeReg@crc:
   430                           	opt stack 0
   431  00002C                     writeMultipleRegs@wmr_numRegsHigh:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2B
   435  00002C                     	ds	1
   436  00002D                     writeCoil@i:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x2C
   440  00002D                     	ds	1
   441  00002E                     writeReg@i:
   442                           	opt stack 0
   443  00002E                     writeMultipleRegs@wmr_numRegsLow:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x2D
   447  00002E                     	ds	2
   448  000030                     writeMultipleRegs@wmr_numBytes:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x2F
   452  000030                     	ds	2
   453  000032                     writeMultipleRegs@wmr_Address:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x31
   457  000032                     	ds	2
   458  000034                     writeMultipleRegs@valToWrite:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x33
   462  000034                     	ds	2
   463  000036                     writeMultipleRegs@crc:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x35
   467  000036                     	ds	2
   468  000038                     writeMultipleRegs@j:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x37
   472  000038                     	ds	1
   473  000039                     writeMultipleRegs@i:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x38
   477  000039                     	ds	2
   478  00003B                     tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           
   485                           ; 0 bytes @ 0x3A
   486 ;;
   487 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   488 ;;
   489 ;; *************** function _main *****************
   490 ;; Defined at:
   491 ;;		line 38 in file "main.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;		None
   494 ;; Auto vars:     Size  Location     Type
   495 ;;		None
   496 ;; Return value:  Size  Location     Type
   497 ;;		None               void
   498 ;; Registers used:
   499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;Total ram usage:        0 bytes
   510 ;; Hardware stack levels required when called:    5
   511 ;; This function calls:
   512 ;;		_OpnUSART
   513 ;;		_ConfigInterrupts
   514 ;;		_decodeIt
   515 ;; This function is called by:
   516 ;;		Startup code after reset
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           	psect	text0
   521  001124                     __ptext0:
   522                           	opt stack 0
   523  001124                     _main:
   524                           	opt stack 26
   525                           
   526                           ;main.c: 39: OpnUSART();
   527                           
   528                           ;incstack = 0
   529                           ;incstack = 0
   530  001124  EC23  F008         	call	_OpnUSART	;wreg free
   531                           
   532                           ;main.c: 40: ConfigInterrupts();
   533  001128  ECB6  F008         	call	_ConfigInterrupts	;wreg free
   534                           
   535                           ;main.c: 42: TRISF = 0;
   536  00112C  0E00               	movlw	0
   537  00112E  6E97               	movwf	3991,c	;volatile
   538  001130                     l1683:
   539                           
   540                           ;main.c: 45: if(modbusMessage){
   541  001130  503D               	movf	_modbusMessage,w,c	;volatile
   542  001132  A4D8               	btfss	status,2,c
   543                           
   544                           ;main.c: 46: decodeIt();}
   545  001134  ECD3  F007         	call	_decodeIt	;wreg free
   546                           
   547                           ;main.c: 49: LATF = holdingReg[1];
   548  001138  C17F  FF8E         	movff	_holdingReg+2,3982	;volatile
   549  00113C  D7F9               	goto	l1683
   550  00113E                     __end_of_main:
   551                           	opt stack 0
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           status	equ	0xFD8
   559                           
   560 ;; *************** function _decodeIt *****************
   561 ;; Defined at:
   562 ;;		line 50 in file "modbus.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;		None               void
   569 ;; Registers used:
   570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   580 ;;Total ram usage:        0 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    4
   583 ;; This function calls:
   584 ;;		_checkCRC
   585 ;;		_readCoil
   586 ;;		_readInputCoil
   587 ;;		_readReg
   588 ;;		_readInputReg
   589 ;;		_writeCoil
   590 ;;		_writeReg
   591 ;;		_writeMultipleRegs
   592 ;; This function is called by:
   593 ;;		_main
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text1
   598  000FA6                     __ptext1:
   599                           	opt stack 0
   600  000FA6                     _decodeIt:
   601                           	opt stack 26
   602                           
   603                           ;modbus.c: 51: if(received[0] == 2){
   604                           
   605                           ;incstack = 0
   606                           ;incstack = 0
   607  000FA6  0101               	movlb	1	; () banked
   608  000FA8  0101               	movlb	1	; () banked
   609  000FAA  5100               	movf	_received& (0+255),w,b	;volatile
   610  000FAC  0A02               	xorlw	2
   611  000FAE  A4D8               	btfss	status,2,c
   612  000FB0  D047               	goto	l160
   613                           
   614                           ; BSR set to: 1
   615                           ;modbus.c: 52: if(checkCRC()){
   616  000FB2  ECEA  F006         	call	_checkCRC	;wreg free
   617  000FB6  0900               	iorlw	0
   618  000FB8  B4D8               	btfsc	status,2,c
   619  000FBA  D042               	goto	l160
   620                           
   621                           ;modbus.c: 53: if(received[1] == 0x01){
   622  000FBC  0101               	movlb	1	; () banked
   623  000FBE  0101               	movlb	1	; () banked
   624  000FC0  0501               	decf	(_received+1)& (0+255),w,b	;volatile
   625  000FC2  A4D8               	btfss	status,2,c
   626  000FC4  D003               	goto	l1743
   627                           
   628                           ; BSR set to: 1
   629                           ;modbus.c: 54: readCoil();
   630  000FC6  EC21  F001         	call	_readCoil	;wreg free
   631                           
   632                           ;modbus.c: 55: }
   633  000FCA  D03A               	goto	l160
   634  000FCC                     l1743:
   635                           
   636                           ;modbus.c: 56: else if(received[1] == 0x02){
   637  000FCC  0101               	movlb	1	; () banked
   638  000FCE  0101               	movlb	1	; () banked
   639  000FD0  5101               	movf	(_received+1)& (0+255),w,b	;volatile
   640  000FD2  0A02               	xorlw	2
   641  000FD4  A4D8               	btfss	status,2,c
   642  000FD6  D003               	goto	l1747
   643                           
   644                           ; BSR set to: 1
   645                           ;modbus.c: 57: readInputCoil();
   646  000FD8  EC0C  F000         	call	_readInputCoil	;wreg free
   647                           
   648                           ;modbus.c: 58: }
   649  000FDC  D031               	goto	l160
   650  000FDE                     l1747:
   651                           
   652                           ;modbus.c: 59: else if(received[1] == 0x03){
   653  000FDE  0101               	movlb	1	; () banked
   654  000FE0  0101               	movlb	1	; () banked
   655  000FE2  5101               	movf	(_received+1)& (0+255),w,b	;volatile
   656  000FE4  0A03               	xorlw	3
   657  000FE6  A4D8               	btfss	status,2,c
   658  000FE8  D003               	goto	l1751
   659                           
   660                           ; BSR set to: 1
   661                           ;modbus.c: 60: readReg();
   662  000FEA  EC2A  F003         	call	_readReg	;wreg free
   663                           
   664                           ;modbus.c: 61: }
   665  000FEE  D028               	goto	l160
   666  000FF0                     l1751:
   667                           
   668                           ;modbus.c: 62: else if(received[1] == 0x04){
   669  000FF0  0101               	movlb	1	; () banked
   670  000FF2  0101               	movlb	1	; () banked
   671  000FF4  5101               	movf	(_received+1)& (0+255),w,b	;volatile
   672  000FF6  0A04               	xorlw	4
   673  000FF8  A4D8               	btfss	status,2,c
   674  000FFA  D003               	goto	l1755
   675                           
   676                           ; BSR set to: 1
   677                           ;modbus.c: 63: readInputReg();
   678  000FFC  EC36  F002         	call	_readInputReg	;wreg free
   679                           
   680                           ;modbus.c: 64: }
   681  001000  D01F               	goto	l160
   682  001002                     l1755:
   683                           
   684                           ;modbus.c: 65: else if(received[1] == 0x05){
   685  001002  0101               	movlb	1	; () banked
   686  001004  0101               	movlb	1	; () banked
   687  001006  5101               	movf	(_received+1)& (0+255),w,b	;volatile
   688  001008  0A05               	xorlw	5
   689  00100A  A4D8               	btfss	status,2,c
   690  00100C  D003               	goto	l1759
   691                           
   692                           ; BSR set to: 1
   693                           ;modbus.c: 66: writeCoil();
   694  00100E  ECBB  F005         	call	_writeCoil	;wreg free
   695                           
   696                           ;modbus.c: 67: }
   697  001012  D016               	goto	l160
   698  001014                     l1759:
   699                           
   700                           ;modbus.c: 68: else if(received[1] == 0x06){
   701  001014  0101               	movlb	1	; () banked
   702  001016  0101               	movlb	1	; () banked
   703  001018  5101               	movf	(_received+1)& (0+255),w,b	;volatile
   704  00101A  0A06               	xorlw	6
   705  00101C  A4D8               	btfss	status,2,c
   706  00101E  D003               	goto	l1763
   707                           
   708                           ; BSR set to: 1
   709                           ;modbus.c: 69: writeReg();
   710  001020  EC56  F006         	call	_writeReg	;wreg free
   711                           
   712                           ;modbus.c: 70: }
   713  001024  D00D               	goto	l160
   714  001026                     l1763:
   715                           
   716                           ;modbus.c: 71: else if(received[1] == 0x10){
   717  001026  0101               	movlb	1	; () banked
   718  001028  0101               	movlb	1	; () banked
   719  00102A  5101               	movf	(_received+1)& (0+255),w,b	;volatile
   720  00102C  0A10               	xorlw	16
   721  00102E  A4D8               	btfss	status,2,c
   722  001030  D003               	goto	l1767
   723                           
   724                           ; BSR set to: 1
   725                           ;modbus.c: 72: writeMultipleRegs();
   726  001032  EC1E  F004         	call	_writeMultipleRegs	;wreg free
   727                           
   728                           ;modbus.c: 73: }
   729  001036  D004               	goto	l160
   730  001038                     l1767:
   731                           
   732                           ;modbus.c: 74: else{
   733                           ;modbus.c: 75: response[0] = 0;
   734  001038  0E00               	movlw	0
   735  00103A  0100               	movlb	0	; () banked
   736  00103C  0100               	movlb	0	; () banked
   737  00103E  6F60               	movwf	_response& (0+255),b	;volatile
   738  001040                     l160:
   739                           
   740                           ;modbus.c: 76: }
   741                           ;modbus.c: 77: }
   742                           ;modbus.c: 78: }
   743                           ;modbus.c: 79: modbusMessage = 0;
   744  001040  0E00               	movlw	0
   745  001042  6E3D               	movwf	_modbusMessage,c	;volatile
   746  001044  0012               	return	
   747  001046                     __end_of_decodeIt:
   748                           	opt stack 0
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           status	equ	0xFD8
   756                           
   757 ;; *************** function _writeMultipleRegs *****************
   758 ;; Defined at:
   759 ;;		line 248 in file "modbus.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  i               2   56[COMRAM] unsigned int 
   764 ;;  crc             2   53[COMRAM] unsigned int 
   765 ;;  valToWrite      2   51[COMRAM] unsigned int 
   766 ;;  wmr_Address     2   49[COMRAM] unsigned int 
   767 ;;  wmr_numBytes    2   47[COMRAM] unsigned int 
   768 ;;  wmr_numRegsL    2   45[COMRAM] unsigned int 
   769 ;;  wmr_numRegsH    2   43[COMRAM] unsigned int 
   770 ;;  wmr_AddressL    2   41[COMRAM] unsigned int 
   771 ;;  wmr_AddressH    2   39[COMRAM] unsigned int 
   772 ;;  wmr_numRegs     2   37[COMRAM] unsigned int 
   773 ;;  valToWriteLo    2   35[COMRAM] unsigned int 
   774 ;;  valToWriteHi    2   33[COMRAM] unsigned int 
   775 ;;  j               1   55[COMRAM] unsigned char 
   776 ;; Return value:  Size  Location     Type
   777 ;;		None               void
   778 ;; Registers used:
   779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;Total ram usage:       29 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    3
   792 ;; This function calls:
   793 ;;		_clearResponse
   794 ;;		_generateCRC
   795 ;; This function is called by:
   796 ;;		_decodeIt
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text2
   801  00083C                     __ptext2:
   802                           	opt stack 0
   803  00083C                     _writeMultipleRegs:
   804                           	opt stack 26
   805                           
   806                           ;modbus.c: 252: unsigned int wmr_Address = 0;
   807                           
   808                           ;incstack = 0
   809                           ;incstack = 0
   810  00083C  0E00               	movlw	0
   811  00083E  6E33               	movwf	writeMultipleRegs@wmr_Address+1,c
   812  000840  0E00               	movlw	0
   813  000842  6E32               	movwf	writeMultipleRegs@wmr_Address,c
   814                           
   815                           ;modbus.c: 253: unsigned int wmr_AddressHigh = 0;
   816  000844  0E00               	movlw	0
   817  000846  6E29               	movwf	writeMultipleRegs@wmr_AddressHigh+1,c
   818  000848  0E00               	movlw	0
   819  00084A  6E28               	movwf	writeMultipleRegs@wmr_AddressHigh,c
   820                           
   821                           ;modbus.c: 254: unsigned int wmr_AddressLow = 0;
   822  00084C  0E00               	movlw	0
   823  00084E  6E2B               	movwf	writeMultipleRegs@wmr_AddressLow+1,c
   824  000850  0E00               	movlw	0
   825  000852  6E2A               	movwf	writeMultipleRegs@wmr_AddressLow,c
   826                           
   827                           ;modbus.c: 255: unsigned int wmr_numRegs = 0;
   828  000854  0E00               	movlw	0
   829  000856  6E27               	movwf	writeMultipleRegs@wmr_numRegs+1,c
   830  000858  0E00               	movlw	0
   831  00085A  6E26               	movwf	writeMultipleRegs@wmr_numRegs,c
   832                           
   833                           ;modbus.c: 256: unsigned int wmr_numRegsHigh = 0;
   834  00085C  0E00               	movlw	0
   835  00085E  6E2D               	movwf	writeMultipleRegs@wmr_numRegsHigh+1,c
   836  000860  0E00               	movlw	0
   837  000862  6E2C               	movwf	writeMultipleRegs@wmr_numRegsHigh,c
   838                           
   839                           ;modbus.c: 257: unsigned int wmr_numRegsLow = 0;
   840  000864  0E00               	movlw	0
   841  000866  6E2F               	movwf	writeMultipleRegs@wmr_numRegsLow+1,c
   842  000868  0E00               	movlw	0
   843  00086A  6E2E               	movwf	writeMultipleRegs@wmr_numRegsLow,c
   844                           
   845                           ;modbus.c: 258: unsigned int wmr_numBytes = 0;
   846  00086C  0E00               	movlw	0
   847  00086E  6E31               	movwf	writeMultipleRegs@wmr_numBytes+1,c
   848  000870  0E00               	movlw	0
   849  000872  6E30               	movwf	writeMultipleRegs@wmr_numBytes,c
   850                           
   851                           ;modbus.c: 259: unsigned int valToWrite = 0;
   852  000874  0E00               	movlw	0
   853  000876  6E35               	movwf	writeMultipleRegs@valToWrite+1,c
   854  000878  0E00               	movlw	0
   855  00087A  6E34               	movwf	writeMultipleRegs@valToWrite,c
   856                           
   857                           ;modbus.c: 260: unsigned int valToWriteHigh = 0;
   858  00087C  0E00               	movlw	0
   859  00087E  6E23               	movwf	writeMultipleRegs@valToWriteHigh+1,c
   860  000880  0E00               	movlw	0
   861  000882  6E22               	movwf	writeMultipleRegs@valToWriteHigh,c
   862                           
   863                           ;modbus.c: 261: unsigned int valToWriteLow = 0;
   864  000884  0E00               	movlw	0
   865  000886  6E25               	movwf	writeMultipleRegs@valToWriteLow+1,c
   866  000888  0E00               	movlw	0
   867  00088A  6E24               	movwf	writeMultipleRegs@valToWriteLow,c
   868                           
   869                           ;modbus.c: 263: unsigned char j = 0;
   870  00088C  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
   871  00088E  0E00               	movlw	0
   872  000890  6E38               	movwf	writeMultipleRegs@j,c
   873  000892  501E               	movf	??_writeMultipleRegs& (0+255),w,c
   874                           
   875                           ;modbus.c: 264: unsigned int crc = 0;
   876  000894  0E00               	movlw	0
   877  000896  6E37               	movwf	writeMultipleRegs@crc+1,c
   878  000898  0E00               	movlw	0
   879  00089A  6E36               	movwf	writeMultipleRegs@crc,c
   880                           
   881                           ;modbus.c: 265: unsigned int i = 0;
   882  00089C  0E00               	movlw	0
   883  00089E  6E3A               	movwf	writeMultipleRegs@i+1,c
   884  0008A0  0E00               	movlw	0
   885  0008A2  6E39               	movwf	writeMultipleRegs@i,c
   886                           
   887                           ;modbus.c: 268: wmr_Address = received[2];
   888  0008A4  0101               	movlb	1	; () banked
   889  0008A6  C102  F032         	movff	_received+2,writeMultipleRegs@wmr_Address	;volatile
   890  0008AA  6A33               	clrf	writeMultipleRegs@wmr_Address+1,c
   891                           
   892                           ; BSR set to: 1
   893                           ;modbus.c: 269: wmr_Address <<= 8;
   894  0008AC  5032               	movf	writeMultipleRegs@wmr_Address,w,c
   895  0008AE  6E33               	movwf	writeMultipleRegs@wmr_Address+1,c
   896  0008B0  6A32               	clrf	writeMultipleRegs@wmr_Address,c
   897                           
   898                           ; BSR set to: 1
   899                           ;modbus.c: 271: wmr_Address |= received[3];
   900  0008B2  0101               	movlb	1	; () banked
   901  0008B4  0101               	movlb	1	; () banked
   902  0008B6  5103               	movf	(_received+3)& (0+255),w,b	;volatile
   903  0008B8  1232               	iorwf	writeMultipleRegs@wmr_Address,f,c
   904                           
   905                           ; BSR set to: 1
   906                           ;modbus.c: 272: wmr_AddressHigh = received[2];
   907  0008BA  0101               	movlb	1	; () banked
   908  0008BC  C102  F028         	movff	_received+2,writeMultipleRegs@wmr_AddressHigh	;volatile
   909  0008C0  6A29               	clrf	writeMultipleRegs@wmr_AddressHigh+1,c
   910                           
   911                           ; BSR set to: 1
   912                           ;modbus.c: 273: wmr_AddressLow = received[3];
   913  0008C2  0101               	movlb	1	; () banked
   914  0008C4  C103  F02A         	movff	_received+3,writeMultipleRegs@wmr_AddressLow	;volatile
   915  0008C8  6A2B               	clrf	writeMultipleRegs@wmr_AddressLow+1,c
   916                           
   917                           ; BSR set to: 1
   918                           ;modbus.c: 277: wmr_numRegs = received[4];
   919  0008CA  0101               	movlb	1	; () banked
   920  0008CC  C104  F026         	movff	_received+4,writeMultipleRegs@wmr_numRegs	;volatile
   921  0008D0  6A27               	clrf	writeMultipleRegs@wmr_numRegs+1,c
   922                           
   923                           ; BSR set to: 1
   924                           ;modbus.c: 278: wmr_numRegs <<= 8;
   925  0008D2  5026               	movf	writeMultipleRegs@wmr_numRegs,w,c
   926  0008D4  6E27               	movwf	writeMultipleRegs@wmr_numRegs+1,c
   927  0008D6  6A26               	clrf	writeMultipleRegs@wmr_numRegs,c
   928                           
   929                           ; BSR set to: 1
   930                           ;modbus.c: 279: wmr_numRegs |= received[5];
   931  0008D8  0101               	movlb	1	; () banked
   932  0008DA  0101               	movlb	1	; () banked
   933  0008DC  5105               	movf	(_received+5)& (0+255),w,b	;volatile
   934  0008DE  1226               	iorwf	writeMultipleRegs@wmr_numRegs,f,c
   935                           
   936                           ; BSR set to: 1
   937                           ;modbus.c: 280: wmr_numRegsHigh = received[4];
   938  0008E0  0101               	movlb	1	; () banked
   939  0008E2  C104  F02C         	movff	_received+4,writeMultipleRegs@wmr_numRegsHigh	;volatile
   940  0008E6  6A2D               	clrf	writeMultipleRegs@wmr_numRegsHigh+1,c
   941                           
   942                           ; BSR set to: 1
   943                           ;modbus.c: 281: wmr_numRegsLow = received[5];
   944  0008E8  0101               	movlb	1	; () banked
   945  0008EA  C105  F02E         	movff	_received+5,writeMultipleRegs@wmr_numRegsLow	;volatile
   946  0008EE  6A2F               	clrf	writeMultipleRegs@wmr_numRegsLow+1,c
   947                           
   948                           ; BSR set to: 1
   949                           ;modbus.c: 283: wmr_numBytes = received[6];
   950  0008F0  0101               	movlb	1	; () banked
   951  0008F2  C106  F030         	movff	_received+6,writeMultipleRegs@wmr_numBytes	;volatile
   952  0008F6  6A31               	clrf	writeMultipleRegs@wmr_numBytes+1,c
   953                           
   954                           ; BSR set to: 1
   955                           ;modbus.c: 285: j = 7;
   956  0008F8  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
   957  0008FA  0E07               	movlw	7
   958  0008FC  6E38               	movwf	writeMultipleRegs@j,c
   959  0008FE  501E               	movf	??_writeMultipleRegs& (0+255),w,c
   960                           
   961                           ;modbus.c: 287: for(i=0;i<wmr_numBytes;i++)
   962  000900  0E00               	movlw	0
   963  000902  6E3A               	movwf	writeMultipleRegs@i+1,c
   964  000904  0E00               	movlw	0
   965  000906  6E39               	movwf	writeMultipleRegs@i,c
   966  000908  D03D               	goto	l2325
   967  00090A                     l2311:
   968                           
   969                           ; BSR set to: 1
   970                           ;modbus.c: 288: {
   971                           ;modbus.c: 289: valToWrite = received[j];
   972  00090A  5038               	movf	writeMultipleRegs@j,w,c
   973  00090C  0D01               	mullw	1
   974  00090E  0101               	movlb	1	; () banked
   975  000910  0E00               	movlw	low _received	;volatile
   976  000912  24F3               	addwf	prodl,w,c
   977  000914  6ED9               	movwf	fsr2l,c
   978  000916  0101               	movlb	1	; () banked
   979  000918  0E01               	movlw	high _received	;volatile
   980  00091A  20F4               	addwfc	prodh,w,c
   981  00091C  6EDA               	movwf	fsr2h,c
   982  00091E  50DF               	movf	indf2,w,c
   983  000920  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
   984  000922  501E               	movf	??_writeMultipleRegs,w,c
   985  000924  6E34               	movwf	writeMultipleRegs@valToWrite,c
   986  000926  6A35               	clrf	writeMultipleRegs@valToWrite+1,c
   987                           
   988                           ; BSR set to: 1
   989                           ;modbus.c: 290: valToWrite <<= 8;
   990  000928  5034               	movf	writeMultipleRegs@valToWrite,w,c
   991  00092A  6E35               	movwf	writeMultipleRegs@valToWrite+1,c
   992  00092C  6A34               	clrf	writeMultipleRegs@valToWrite,c
   993                           
   994                           ; BSR set to: 1
   995                           ;modbus.c: 291: j++;
   996  00092E  2A38               	incf	writeMultipleRegs@j,f,c
   997                           
   998                           ; BSR set to: 1
   999                           ;modbus.c: 292: valToWrite |= received[j];
  1000  000930  5038               	movf	writeMultipleRegs@j,w,c
  1001  000932  0D01               	mullw	1
  1002  000934  0101               	movlb	1	; () banked
  1003  000936  0E00               	movlw	low _received	;volatile
  1004  000938  24F3               	addwf	prodl,w,c
  1005  00093A  6ED9               	movwf	fsr2l,c
  1006  00093C  0101               	movlb	1	; () banked
  1007  00093E  0E01               	movlw	high _received	;volatile
  1008  000940  20F4               	addwfc	prodh,w,c
  1009  000942  6EDA               	movwf	fsr2h,c
  1010  000944  50DF               	movf	indf2,w,c
  1011  000946  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1012  000948  501E               	movf	??_writeMultipleRegs,w,c
  1013  00094A  1234               	iorwf	writeMultipleRegs@valToWrite,f,c
  1014                           
  1015                           ; BSR set to: 1
  1016                           ;modbus.c: 293: j++;
  1017  00094C  2A38               	incf	writeMultipleRegs@j,f,c
  1018                           
  1019                           ; BSR set to: 1
  1020                           ;modbus.c: 295: holdingReg[wmr_Address + i] = valToWrite;
  1021  00094E  C032  F01E         	movff	writeMultipleRegs@wmr_Address,??_writeMultipleRegs
  1022  000952  C033  F01F         	movff	writeMultipleRegs@wmr_Address+1,??_writeMultipleRegs+1
  1023  000956  5039               	movf	writeMultipleRegs@i,w,c
  1024  000958  261E               	addwf	??_writeMultipleRegs,f,c
  1025  00095A  503A               	movf	writeMultipleRegs@i+1,w,c
  1026  00095C  221F               	addwfc	??_writeMultipleRegs+1,f,c
  1027  00095E  90D8               	bcf	status,0,c
  1028  000960  341E               	rlcf	??_writeMultipleRegs,w,c
  1029  000962  6E20               	movwf	(??_writeMultipleRegs+2)& (0+255),c
  1030  000964  341F               	rlcf	??_writeMultipleRegs+1,w,c
  1031  000966  6E21               	movwf	(??_writeMultipleRegs+3)& (0+255),c
  1032  000968  0101               	movlb	1	; () banked
  1033  00096A  0E7D               	movlw	low _holdingReg	;volatile
  1034  00096C  2420               	addwf	??_writeMultipleRegs+2,w,c
  1035  00096E  6ED9               	movwf	fsr2l,c
  1036  000970  0101               	movlb	1	; () banked
  1037  000972  0E01               	movlw	high _holdingReg	;volatile
  1038  000974  2021               	addwfc	??_writeMultipleRegs+3,w,c
  1039  000976  6EDA               	movwf	fsr2h,c
  1040  000978  C034  FFDE         	movff	writeMultipleRegs@valToWrite,postinc2
  1041  00097C  C035  FFDD         	movff	writeMultipleRegs@valToWrite+1,postdec2
  1042                           
  1043                           ; BSR set to: 1
  1044  000980  4A39               	infsnz	writeMultipleRegs@i,f,c
  1045  000982  2A3A               	incf	writeMultipleRegs@i+1,f,c
  1046  000984                     l2325:
  1047                           
  1048                           ; BSR set to: 1
  1049  000984  5030               	movf	writeMultipleRegs@wmr_numBytes,w,c
  1050  000986  5C39               	subwf	writeMultipleRegs@i,w,c
  1051  000988  5031               	movf	writeMultipleRegs@wmr_numBytes+1,w,c
  1052  00098A  583A               	subwfb	writeMultipleRegs@i+1,w,c
  1053  00098C  A0D8               	btfss	status,0,c
  1054  00098E  D7BD               	goto	l2311
  1055                           
  1056                           ; BSR set to: 1
  1057                           ;modbus.c: 296: }
  1058                           ;modbus.c: 299: response[0] = 2;
  1059                           
  1060                           ; BSR set to: 1
  1061  000990  0E02               	movlw	2
  1062  000992  0100               	movlb	0	; () banked
  1063  000994  0100               	movlb	0	; () banked
  1064  000996  6F60               	movwf	_response& (0+255),b	;volatile
  1065                           
  1066                           ;modbus.c: 300: response[1] = 0x10;
  1067  000998  0E10               	movlw	16
  1068  00099A  0100               	movlb	0	; () banked
  1069  00099C  0100               	movlb	0	; () banked
  1070  00099E  6F61               	movwf	(_response+1)& (0+255),b	;volatile
  1071                           
  1072                           ; BSR set to: 0
  1073                           ;modbus.c: 301: response[2] = wmr_AddressHigh;
  1074  0009A0  C028  F062         	movff	writeMultipleRegs@wmr_AddressHigh,_response+2	;volatile
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;modbus.c: 302: response[3] = wmr_AddressLow;
  1078  0009A4  C02A  F063         	movff	writeMultipleRegs@wmr_AddressLow,_response+3	;volatile
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;modbus.c: 303: response[4] = wmr_numRegsHigh;
  1082  0009A8  C02C  F064         	movff	writeMultipleRegs@wmr_numRegsHigh,_response+4	;volatile
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;modbus.c: 304: response[5] = wmr_numRegsLow;
  1086  0009AC  C02E  F065         	movff	writeMultipleRegs@wmr_numRegsLow,_response+5	;volatile
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;modbus.c: 306: crc = generateCRC(8);
  1090  0009B0  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1091  0009B2  0E08               	movlw	8
  1092  0009B4  6E0F               	movwf	?_generateCRC,c
  1093  0009B6  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1094  0009B8  EC6D  F007         	call	_generateCRC	;wreg free
  1095  0009BC  C00F  F036         	movff	?_generateCRC,writeMultipleRegs@crc
  1096  0009C0  C010  F037         	movff	?_generateCRC+1,writeMultipleRegs@crc+1
  1097                           
  1098                           ;modbus.c: 308: response[6] = crc >> 8;
  1099  0009C4  5037               	movf	writeMultipleRegs@crc+1,w,c
  1100  0009C6  0100               	movlb	0	; () banked
  1101  0009C8  0100               	movlb	0	; () banked
  1102  0009CA  6F66               	movwf	(_response+6)& (0+255),b	;volatile
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;modbus.c: 309: response[7] = crc;
  1106  0009CC  C036  F067         	movff	writeMultipleRegs@crc,_response+7	;volatile
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;modbus.c: 311: LATCbits.LATC1 = 1;
  1110  0009D0  828B               	bsf	3979,1,c	;volatile
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;modbus.c: 312: for(i=0;i!=9;i++){
  1114  0009D2  0E00               	movlw	0
  1115  0009D4  6E3A               	movwf	writeMultipleRegs@i+1,c
  1116  0009D6  0E00               	movlw	0
  1117  0009D8  6E39               	movwf	writeMultipleRegs@i,c
  1118  0009DA                     
  1119                           ; BSR set to: 0
  1120  0009DA  5039               	movf	writeMultipleRegs@i,w,c
  1121  0009DC  0A09               	xorlw	9
  1122  0009DE  103A               	iorwf	writeMultipleRegs@i+1,w,c
  1123  0009E0  B4D8               	btfsc	status,2,c
  1124  0009E2  D00F               	goto	l219
  1125  0009E4                     l220:
  1126  0009E4  A2AC               	btfss	4012,1,c	;volatile
  1127  0009E6  D7FE               	goto	l220
  1128                           
  1129                           ;modbus.c: 314: TXREG1 = response[i];
  1130  0009E8  0100               	movlb	0	; () banked
  1131  0009EA  0E60               	movlw	low _response	;volatile
  1132  0009EC  2439               	addwf	writeMultipleRegs@i,w,c
  1133  0009EE  6ED9               	movwf	fsr2l,c
  1134  0009F0  0100               	movlb	0	; () banked
  1135  0009F2  0E00               	movlw	high _response	;volatile
  1136  0009F4  203A               	addwfc	writeMultipleRegs@i+1,w,c
  1137  0009F6  6EDA               	movwf	fsr2h,c
  1138  0009F8  50DF               	movf	indf2,w,c
  1139  0009FA  6EAD               	movwf	4013,c	;volatile
  1140                           
  1141                           ; BSR set to: 0
  1142  0009FC  4A39               	infsnz	writeMultipleRegs@i,f,c
  1143  0009FE  2A3A               	incf	writeMultipleRegs@i+1,f,c
  1144  000A00  D7EC               	goto	L1
  1145  000A02                     l219:
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;modbus.c: 315: }
  1149                           ;modbus.c: 316: LATCbits.LATC1 = 0;
  1150  000A02  928B               	bcf	3979,1,c	;volatile
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;modbus.c: 317: j=0;
  1154  000A04  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1155  000A06  0E00               	movlw	0
  1156  000A08  6E38               	movwf	writeMultipleRegs@j,c
  1157  000A0A  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;modbus.c: 319: clearResponse();
  1161  000A0C  EC7C  F008         	call	_clearResponse	;wreg free
  1162  000A10  0012               	return	
  1163  000A12                     __end_of_writeMultipleRegs:
  1164                           	opt stack 0
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           prodh	equ	0xFF4
  1170                           prodl	equ	0xFF3
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           indf2	equ	0xFDF
  1174                           postinc2	equ	0xFDE
  1175                           postdec2	equ	0xFDD
  1176                           fsr2h	equ	0xFDA
  1177                           fsr2l	equ	0xFD9
  1178                           status	equ	0xFD8
  1179                           
  1180 ;; *************** function _writeReg *****************
  1181 ;; Defined at:
  1182 ;;		line 191 in file "modbus.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;		None
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;  i               2   45[COMRAM] unsigned int 
  1187 ;;  crc             2   43[COMRAM] unsigned int 
  1188 ;;  wr_valToWrit    2   41[COMRAM] unsigned int 
  1189 ;;  wr_Address      2   39[COMRAM] unsigned int 
  1190 ;;  wr_valToWrit    2   37[COMRAM] unsigned int 
  1191 ;;  wr_valToWrit    2   35[COMRAM] unsigned int 
  1192 ;;  wr_AddressHi    2   33[COMRAM] unsigned int 
  1193 ;;  wr_AddressLo    2   31[COMRAM] unsigned int 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;		None               void
  1196 ;; Registers used:
  1197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;Total ram usage:       18 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    3
  1210 ;; This function calls:
  1211 ;;		_clearResponse
  1212 ;;		_generateCRC
  1213 ;; This function is called by:
  1214 ;;		_decodeIt
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text3
  1219  000CAC                     __ptext3:
  1220                           	opt stack 0
  1221  000CAC                     _writeReg:
  1222                           	opt stack 26
  1223                           
  1224                           ;modbus.c: 195: unsigned int wr_AddressLow = 0;
  1225                           
  1226                           ;incstack = 0
  1227                           ;incstack = 0
  1228  000CAC  0E00               	movlw	0
  1229  000CAE  6E21               	movwf	writeReg@wr_AddressLow+1,c
  1230  000CB0  0E00               	movlw	0
  1231  000CB2  6E20               	movwf	writeReg@wr_AddressLow,c
  1232                           
  1233                           ;modbus.c: 196: unsigned int wr_AddressHigh = 0;
  1234  000CB4  0E00               	movlw	0
  1235  000CB6  6E23               	movwf	writeReg@wr_AddressHigh+1,c
  1236  000CB8  0E00               	movlw	0
  1237  000CBA  6E22               	movwf	writeReg@wr_AddressHigh,c
  1238                           
  1239                           ;modbus.c: 197: unsigned int wr_Address = 0;
  1240  000CBC  0E00               	movlw	0
  1241  000CBE  6E29               	movwf	writeReg@wr_Address+1,c
  1242  000CC0  0E00               	movlw	0
  1243  000CC2  6E28               	movwf	writeReg@wr_Address,c
  1244                           
  1245                           ;modbus.c: 199: unsigned int wr_valToWrite = 0;
  1246  000CC4  0E00               	movlw	0
  1247  000CC6  6E2B               	movwf	writeReg@wr_valToWrite+1,c
  1248  000CC8  0E00               	movlw	0
  1249  000CCA  6E2A               	movwf	writeReg@wr_valToWrite,c
  1250                           
  1251                           ;modbus.c: 200: unsigned int wr_valToWriteLow = 0;
  1252  000CCC  0E00               	movlw	0
  1253  000CCE  6E25               	movwf	writeReg@wr_valToWriteLow+1,c
  1254  000CD0  0E00               	movlw	0
  1255  000CD2  6E24               	movwf	writeReg@wr_valToWriteLow,c
  1256                           
  1257                           ;modbus.c: 201: unsigned int wr_valToWriteHigh = 0;
  1258  000CD4  0E00               	movlw	0
  1259  000CD6  6E27               	movwf	writeReg@wr_valToWriteHigh+1,c
  1260  000CD8  0E00               	movlw	0
  1261  000CDA  6E26               	movwf	writeReg@wr_valToWriteHigh,c
  1262                           
  1263                           ;modbus.c: 203: unsigned int crc = 0;
  1264  000CDC  0E00               	movlw	0
  1265  000CDE  6E2D               	movwf	writeReg@crc+1,c
  1266  000CE0  0E00               	movlw	0
  1267  000CE2  6E2C               	movwf	writeReg@crc,c
  1268                           
  1269                           ;modbus.c: 204: unsigned int i = 0;
  1270  000CE4  0E00               	movlw	0
  1271  000CE6  6E2F               	movwf	writeReg@i+1,c
  1272  000CE8  0E00               	movlw	0
  1273  000CEA  6E2E               	movwf	writeReg@i,c
  1274                           
  1275                           ;modbus.c: 207: wr_Address = received[2];
  1276  000CEC  0101               	movlb	1	; () banked
  1277  000CEE  C102  F028         	movff	_received+2,writeReg@wr_Address	;volatile
  1278  000CF2  6A29               	clrf	writeReg@wr_Address+1,c
  1279                           
  1280                           ;modbus.c: 208: wr_Address <<= 8;
  1281  000CF4  5028               	movf	writeReg@wr_Address,w,c
  1282  000CF6  6E29               	movwf	writeReg@wr_Address+1,c
  1283  000CF8  6A28               	clrf	writeReg@wr_Address,c
  1284                           
  1285                           ; BSR set to: 1
  1286                           ;modbus.c: 209: wr_Address |= received[3];
  1287  000CFA  0101               	movlb	1	; () banked
  1288  000CFC  0101               	movlb	1	; () banked
  1289  000CFE  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1290  000D00  1228               	iorwf	writeReg@wr_Address,f,c
  1291                           
  1292                           ; BSR set to: 1
  1293                           ;modbus.c: 211: wr_AddressLow = received[3];
  1294  000D02  0101               	movlb	1	; () banked
  1295  000D04  C103  F020         	movff	_received+3,writeReg@wr_AddressLow	;volatile
  1296  000D08  6A21               	clrf	writeReg@wr_AddressLow+1,c
  1297                           
  1298                           ; BSR set to: 1
  1299                           ;modbus.c: 212: wr_AddressHigh = received[2];
  1300  000D0A  0101               	movlb	1	; () banked
  1301  000D0C  C102  F022         	movff	_received+2,writeReg@wr_AddressHigh	;volatile
  1302  000D10  6A23               	clrf	writeReg@wr_AddressHigh+1,c
  1303                           
  1304                           ; BSR set to: 1
  1305                           ;modbus.c: 215: wr_valToWrite = received[4];
  1306  000D12  0101               	movlb	1	; () banked
  1307  000D14  C104  F02A         	movff	_received+4,writeReg@wr_valToWrite	;volatile
  1308  000D18  6A2B               	clrf	writeReg@wr_valToWrite+1,c
  1309                           
  1310                           ; BSR set to: 1
  1311                           ;modbus.c: 216: wr_valToWrite <<= 8;
  1312  000D1A  502A               	movf	writeReg@wr_valToWrite,w,c
  1313  000D1C  6E2B               	movwf	writeReg@wr_valToWrite+1,c
  1314  000D1E  6A2A               	clrf	writeReg@wr_valToWrite,c
  1315                           
  1316                           ;modbus.c: 217: wr_valToWrite |= received[5];
  1317  000D20  0101               	movlb	1	; () banked
  1318  000D22  0101               	movlb	1	; () banked
  1319  000D24  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1320  000D26  122A               	iorwf	writeReg@wr_valToWrite,f,c
  1321                           
  1322                           ; BSR set to: 1
  1323                           ;modbus.c: 219: wr_valToWriteLow = received[5];
  1324  000D28  0101               	movlb	1	; () banked
  1325  000D2A  C105  F024         	movff	_received+5,writeReg@wr_valToWriteLow	;volatile
  1326  000D2E  6A25               	clrf	writeReg@wr_valToWriteLow+1,c
  1327                           
  1328                           ; BSR set to: 1
  1329                           ;modbus.c: 220: wr_valToWriteHigh = received[4];
  1330  000D30  0101               	movlb	1	; () banked
  1331  000D32  C104  F026         	movff	_received+4,writeReg@wr_valToWriteHigh	;volatile
  1332  000D36  6A27               	clrf	writeReg@wr_valToWriteHigh+1,c
  1333                           
  1334                           ; BSR set to: 1
  1335                           ;modbus.c: 222: holdingReg[wr_Address] = wr_valToWrite;
  1336  000D38  90D8               	bcf	status,0,c
  1337  000D3A  3428               	rlcf	writeReg@wr_Address,w,c
  1338  000D3C  6E1E               	movwf	??_writeReg& (0+255),c
  1339  000D3E  3429               	rlcf	writeReg@wr_Address+1,w,c
  1340  000D40  6E1F               	movwf	(??_writeReg+1)& (0+255),c
  1341  000D42  0101               	movlb	1	; () banked
  1342  000D44  0E7D               	movlw	low _holdingReg	;volatile
  1343  000D46  241E               	addwf	??_writeReg,w,c
  1344  000D48  6ED9               	movwf	fsr2l,c
  1345  000D4A  0101               	movlb	1	; () banked
  1346  000D4C  0E01               	movlw	high _holdingReg	;volatile
  1347  000D4E  201F               	addwfc	??_writeReg+1,w,c
  1348  000D50  6EDA               	movwf	fsr2h,c
  1349  000D52  C02A  FFDE         	movff	writeReg@wr_valToWrite,postinc2
  1350  000D56  C02B  FFDD         	movff	writeReg@wr_valToWrite+1,postdec2
  1351                           
  1352                           ; BSR set to: 1
  1353                           ;modbus.c: 224: response[0] = 2;
  1354  000D5A  0E02               	movlw	2
  1355  000D5C  0100               	movlb	0	; () banked
  1356  000D5E  0100               	movlb	0	; () banked
  1357  000D60  6F60               	movwf	_response& (0+255),b	;volatile
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;modbus.c: 225: response[1] = 0x06;
  1361  000D62  0E06               	movlw	6
  1362  000D64  0100               	movlb	0	; () banked
  1363  000D66  0100               	movlb	0	; () banked
  1364  000D68  6F61               	movwf	(_response+1)& (0+255),b	;volatile
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;modbus.c: 226: response[3] = wr_AddressLow;
  1368  000D6A  C020  F063         	movff	writeReg@wr_AddressLow,_response+3	;volatile
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;modbus.c: 227: response[2] = wr_AddressHigh;
  1372  000D6E  C022  F062         	movff	writeReg@wr_AddressHigh,_response+2	;volatile
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;modbus.c: 230: response[4] = wr_valToWriteHigh;
  1376  000D72  C026  F064         	movff	writeReg@wr_valToWriteHigh,_response+4	;volatile
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;modbus.c: 231: response[5] = wr_valToWriteLow;
  1380  000D76  C024  F065         	movff	writeReg@wr_valToWriteLow,_response+5	;volatile
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;modbus.c: 233: crc = generateCRC(8);
  1384  000D7A  6E1E               	movwf	??_writeReg& (0+255),c
  1385  000D7C  0E08               	movlw	8
  1386  000D7E  6E0F               	movwf	?_generateCRC,c
  1387  000D80  501E               	movf	??_writeReg& (0+255),w,c
  1388  000D82  EC6D  F007         	call	_generateCRC	;wreg free
  1389  000D86  C00F  F02C         	movff	?_generateCRC,writeReg@crc
  1390  000D8A  C010  F02D         	movff	?_generateCRC+1,writeReg@crc+1
  1391                           
  1392                           ;modbus.c: 235: response[6] = crc >> 8;
  1393  000D8E  502D               	movf	writeReg@crc+1,w,c
  1394  000D90  0100               	movlb	0	; () banked
  1395  000D92  0100               	movlb	0	; () banked
  1396  000D94  6F66               	movwf	(_response+6)& (0+255),b	;volatile
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;modbus.c: 236: response[7] = crc;
  1400  000D96  C02C  F067         	movff	writeReg@crc,_response+7	;volatile
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;modbus.c: 238: LATCbits.LATC1 = 1;
  1404  000D9A  828B               	bsf	3979,1,c	;volatile
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;modbus.c: 239: for(i=0;i!=9;i++){
  1408  000D9C  0E00               	movlw	0
  1409  000D9E  6E2F               	movwf	writeReg@i+1,c
  1410  000DA0  0E00               	movlw	0
  1411  000DA2  6E2E               	movwf	writeReg@i,c
  1412  000DA4                     
  1413                           ; BSR set to: 0
  1414  000DA4  502E               	movf	writeReg@i,w,c
  1415  000DA6  0A09               	xorlw	9
  1416  000DA8  102F               	iorwf	writeReg@i+1,w,c
  1417  000DAA  B4D8               	btfsc	status,2,c
  1418  000DAC  D00F               	goto	l208
  1419  000DAE                     l209:
  1420  000DAE  A2AC               	btfss	4012,1,c	;volatile
  1421  000DB0  D7FE               	goto	l209
  1422                           
  1423                           ;modbus.c: 241: TXREG1 = response[i];
  1424  000DB2  0100               	movlb	0	; () banked
  1425  000DB4  0E60               	movlw	low _response	;volatile
  1426  000DB6  242E               	addwf	writeReg@i,w,c
  1427  000DB8  6ED9               	movwf	fsr2l,c
  1428  000DBA  0100               	movlb	0	; () banked
  1429  000DBC  0E00               	movlw	high _response	;volatile
  1430  000DBE  202F               	addwfc	writeReg@i+1,w,c
  1431  000DC0  6EDA               	movwf	fsr2h,c
  1432  000DC2  50DF               	movf	indf2,w,c
  1433  000DC4  6EAD               	movwf	4013,c	;volatile
  1434                           
  1435                           ; BSR set to: 0
  1436  000DC6  4A2E               	infsnz	writeReg@i,f,c
  1437  000DC8  2A2F               	incf	writeReg@i+1,f,c
  1438  000DCA  D7EC               	goto	L2
  1439  000DCC                     l208:
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;modbus.c: 242: }
  1443                           ;modbus.c: 243: LATCbits.LATC1 = 0;
  1444  000DCC  928B               	bcf	3979,1,c	;volatile
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;modbus.c: 244: clearResponse();
  1448  000DCE  EC7C  F008         	call	_clearResponse	;wreg free
  1449  000DD2  0012               	return	
  1450  000DD4                     __end_of_writeReg:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           prodh	equ	0xFF4
  1457                           prodl	equ	0xFF3
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           indf2	equ	0xFDF
  1461                           postinc2	equ	0xFDE
  1462                           postdec2	equ	0xFDD
  1463                           fsr2h	equ	0xFDA
  1464                           fsr2l	equ	0xFD9
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _writeCoil *****************
  1468 ;; Defined at:
  1469 ;;		line 485 in file "modbus.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  i               2   44[COMRAM] int 
  1474 ;;  wc_Address      2   42[COMRAM] unsigned int 
  1475 ;;  crc             2   40[COMRAM] unsigned int 
  1476 ;;  wc_valToWrit    2   38[COMRAM] unsigned int 
  1477 ;;  wc_valToWrit    2   36[COMRAM] unsigned int 
  1478 ;;  wc_valToWrit    2   34[COMRAM] unsigned int 
  1479 ;;  wc_AddressHi    2   32[COMRAM] unsigned int 
  1480 ;;  wc_AddressLo    2   30[COMRAM] unsigned int 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;		None               void
  1483 ;; Registers used:
  1484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;Total ram usage:       17 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    3
  1497 ;; This function calls:
  1498 ;;		_clearResponse
  1499 ;;		_generateCRC
  1500 ;; This function is called by:
  1501 ;;		_decodeIt
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text4
  1506  000B76                     __ptext4:
  1507                           	opt stack 0
  1508  000B76                     _writeCoil:
  1509                           	opt stack 26
  1510                           
  1511                           ;modbus.c: 489: unsigned int wc_AddressLow = 0;
  1512                           
  1513                           ;incstack = 0
  1514                           ;incstack = 0
  1515  000B76  0E00               	movlw	0
  1516  000B78  6E20               	movwf	writeCoil@wc_AddressLow+1,c
  1517  000B7A  0E00               	movlw	0
  1518  000B7C  6E1F               	movwf	writeCoil@wc_AddressLow,c
  1519                           
  1520                           ;modbus.c: 490: unsigned int wc_AddressHigh = 0;
  1521  000B7E  0E00               	movlw	0
  1522  000B80  6E22               	movwf	writeCoil@wc_AddressHigh+1,c
  1523  000B82  0E00               	movlw	0
  1524  000B84  6E21               	movwf	writeCoil@wc_AddressHigh,c
  1525                           
  1526                           ;modbus.c: 491: unsigned int wc_Address = 0;
  1527  000B86  0E00               	movlw	0
  1528  000B88  6E2C               	movwf	writeCoil@wc_Address+1,c
  1529  000B8A  0E00               	movlw	0
  1530  000B8C  6E2B               	movwf	writeCoil@wc_Address,c
  1531                           
  1532                           ;modbus.c: 493: unsigned int wc_valToWrite = 0;
  1533  000B8E  0E00               	movlw	0
  1534  000B90  6E28               	movwf	writeCoil@wc_valToWrite+1,c
  1535  000B92  0E00               	movlw	0
  1536  000B94  6E27               	movwf	writeCoil@wc_valToWrite,c
  1537                           
  1538                           ;modbus.c: 494: unsigned int wc_valToWriteLow = 0;
  1539  000B96  0E00               	movlw	0
  1540  000B98  6E24               	movwf	writeCoil@wc_valToWriteLow+1,c
  1541  000B9A  0E00               	movlw	0
  1542  000B9C  6E23               	movwf	writeCoil@wc_valToWriteLow,c
  1543                           
  1544                           ;modbus.c: 495: unsigned int wc_valToWriteHigh = 0;
  1545  000B9E  0E00               	movlw	0
  1546  000BA0  6E26               	movwf	writeCoil@wc_valToWriteHigh+1,c
  1547  000BA2  0E00               	movlw	0
  1548  000BA4  6E25               	movwf	writeCoil@wc_valToWriteHigh,c
  1549                           
  1550                           ;modbus.c: 496: int i = 0;
  1551  000BA6  0E00               	movlw	0
  1552  000BA8  6E2E               	movwf	writeCoil@i+1,c
  1553  000BAA  0E00               	movlw	0
  1554  000BAC  6E2D               	movwf	writeCoil@i,c
  1555                           
  1556                           ;modbus.c: 497: unsigned int crc = 0;
  1557  000BAE  0E00               	movlw	0
  1558  000BB0  6E2A               	movwf	writeCoil@crc+1,c
  1559  000BB2  0E00               	movlw	0
  1560  000BB4  6E29               	movwf	writeCoil@crc,c
  1561                           
  1562                           ;modbus.c: 500: wc_Address = received[2];
  1563  000BB6  0101               	movlb	1	; () banked
  1564  000BB8  C102  F02B         	movff	_received+2,writeCoil@wc_Address	;volatile
  1565  000BBC  6A2C               	clrf	writeCoil@wc_Address+1,c
  1566                           
  1567                           ;modbus.c: 501: wc_Address <<= 8;
  1568  000BBE  502B               	movf	writeCoil@wc_Address,w,c
  1569  000BC0  6E2C               	movwf	writeCoil@wc_Address+1,c
  1570  000BC2  6A2B               	clrf	writeCoil@wc_Address,c
  1571                           
  1572                           ; BSR set to: 1
  1573                           ;modbus.c: 502: wc_Address |= received[3];
  1574  000BC4  0101               	movlb	1	; () banked
  1575  000BC6  0101               	movlb	1	; () banked
  1576  000BC8  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1577  000BCA  122B               	iorwf	writeCoil@wc_Address,f,c
  1578                           
  1579                           ; BSR set to: 1
  1580                           ;modbus.c: 504: wc_AddressLow = received[3];
  1581  000BCC  0101               	movlb	1	; () banked
  1582  000BCE  C103  F01F         	movff	_received+3,writeCoil@wc_AddressLow	;volatile
  1583  000BD2  6A20               	clrf	writeCoil@wc_AddressLow+1,c
  1584                           
  1585                           ; BSR set to: 1
  1586                           ;modbus.c: 505: wc_AddressHigh = received[2];
  1587  000BD4  0101               	movlb	1	; () banked
  1588  000BD6  C102  F021         	movff	_received+2,writeCoil@wc_AddressHigh	;volatile
  1589  000BDA  6A22               	clrf	writeCoil@wc_AddressHigh+1,c
  1590                           
  1591                           ; BSR set to: 1
  1592                           ;modbus.c: 508: wc_valToWrite = received[4];
  1593  000BDC  0101               	movlb	1	; () banked
  1594  000BDE  C104  F027         	movff	_received+4,writeCoil@wc_valToWrite	;volatile
  1595  000BE2  6A28               	clrf	writeCoil@wc_valToWrite+1,c
  1596                           
  1597                           ; BSR set to: 1
  1598                           ;modbus.c: 509: wc_valToWrite <<= 8;
  1599  000BE4  5027               	movf	writeCoil@wc_valToWrite,w,c
  1600  000BE6  6E28               	movwf	writeCoil@wc_valToWrite+1,c
  1601  000BE8  6A27               	clrf	writeCoil@wc_valToWrite,c
  1602                           
  1603                           ;modbus.c: 510: wc_valToWrite |= received[5];
  1604  000BEA  0101               	movlb	1	; () banked
  1605  000BEC  0101               	movlb	1	; () banked
  1606  000BEE  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1607  000BF0  1227               	iorwf	writeCoil@wc_valToWrite,f,c
  1608                           
  1609                           ; BSR set to: 1
  1610                           ;modbus.c: 512: wc_valToWriteLow = received[5];
  1611  000BF2  0101               	movlb	1	; () banked
  1612  000BF4  C105  F023         	movff	_received+5,writeCoil@wc_valToWriteLow	;volatile
  1613  000BF8  6A24               	clrf	writeCoil@wc_valToWriteLow+1,c
  1614                           
  1615                           ; BSR set to: 1
  1616                           ;modbus.c: 513: wc_valToWriteHigh = received[4];
  1617  000BFA  0101               	movlb	1	; () banked
  1618  000BFC  C104  F025         	movff	_received+4,writeCoil@wc_valToWriteHigh	;volatile
  1619  000C00  6A26               	clrf	writeCoil@wc_valToWriteHigh+1,c
  1620                           
  1621                           ;modbus.c: 515: if(wc_valToWrite){
  1622  000C02  5028               	movf	writeCoil@wc_valToWrite+1,w,c
  1623  000C04  1027               	iorwf	writeCoil@wc_valToWrite,w,c
  1624  000C06  B4D8               	btfsc	status,2,c
  1625  000C08  D00A               	goto	l2189
  1626                           
  1627                           ; BSR set to: 1
  1628                           ;modbus.c: 516: coils[wc_Address] = 0xFF;
  1629  000C0A  0102               	movlb	2	; () banked
  1630  000C0C  0E00               	movlw	low _coils	;volatile
  1631  000C0E  242B               	addwf	writeCoil@wc_Address,w,c
  1632  000C10  6ED9               	movwf	fsr2l,c
  1633  000C12  0102               	movlb	2	; () banked
  1634  000C14  0E02               	movlw	high _coils	;volatile
  1635  000C16  202C               	addwfc	writeCoil@wc_Address+1,w,c
  1636  000C18  6EDA               	movwf	fsr2h,c
  1637  000C1A  0EFF               	movlw	255
  1638  000C1C  D009               	goto	L3
  1639  000C1E                     l2189:
  1640                           
  1641                           ;modbus.c: 518: else{
  1642                           ;modbus.c: 519: coils[wc_Address] = 0x00;
  1643  000C1E  0102               	movlb	2	; () banked
  1644  000C20  0E00               	movlw	low _coils	;volatile
  1645  000C22  242B               	addwf	writeCoil@wc_Address,w,c
  1646  000C24  6ED9               	movwf	fsr2l,c
  1647  000C26  0102               	movlb	2	; () banked
  1648  000C28  0E02               	movlw	high _coils	;volatile
  1649  000C2A  202C               	addwfc	writeCoil@wc_Address+1,w,c
  1650  000C2C  6EDA               	movwf	fsr2h,c
  1651  000C2E  0E00               	movlw	0
  1652  000C30                     L3:
  1653  000C30  6EDF               	movwf	indf2,c
  1654                           
  1655                           ; BSR set to: 2
  1656                           ;modbus.c: 520: }
  1657                           ;modbus.c: 522: response[0] = 2;
  1658                           
  1659                           ; BSR set to: 2
  1660  000C32  0E02               	movlw	2
  1661  000C34  0100               	movlb	0	; () banked
  1662  000C36  0100               	movlb	0	; () banked
  1663  000C38  6F60               	movwf	_response& (0+255),b	;volatile
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;modbus.c: 523: response[1] = 0x02;
  1667  000C3A  0E02               	movlw	2
  1668  000C3C  0100               	movlb	0	; () banked
  1669  000C3E  0100               	movlb	0	; () banked
  1670  000C40  6F61               	movwf	(_response+1)& (0+255),b	;volatile
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;modbus.c: 524: response[3] = wc_AddressLow;
  1674  000C42  C01F  F063         	movff	writeCoil@wc_AddressLow,_response+3	;volatile
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;modbus.c: 525: response[2] = wc_AddressHigh;
  1678  000C46  C021  F062         	movff	writeCoil@wc_AddressHigh,_response+2	;volatile
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;modbus.c: 528: response[4] = wc_valToWriteHigh;
  1682  000C4A  C025  F064         	movff	writeCoil@wc_valToWriteHigh,_response+4	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;modbus.c: 529: response[5] = wc_valToWriteLow;
  1686  000C4E  C023  F065         	movff	writeCoil@wc_valToWriteLow,_response+5	;volatile
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;modbus.c: 531: crc = generateCRC(8);
  1690  000C52  6E1E               	movwf	??_writeCoil& (0+255),c
  1691  000C54  0E08               	movlw	8
  1692  000C56  6E0F               	movwf	?_generateCRC,c
  1693  000C58  501E               	movf	??_writeCoil& (0+255),w,c
  1694  000C5A  EC6D  F007         	call	_generateCRC	;wreg free
  1695  000C5E  C00F  F029         	movff	?_generateCRC,writeCoil@crc
  1696  000C62  C010  F02A         	movff	?_generateCRC+1,writeCoil@crc+1
  1697                           
  1698                           ;modbus.c: 533: response[6] = crc >> 8;
  1699  000C66  502A               	movf	writeCoil@crc+1,w,c
  1700  000C68  0100               	movlb	0	; () banked
  1701  000C6A  0100               	movlb	0	; () banked
  1702  000C6C  6F66               	movwf	(_response+6)& (0+255),b	;volatile
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;modbus.c: 534: response[7] = crc;
  1706  000C6E  C029  F067         	movff	writeCoil@crc,_response+7	;volatile
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;modbus.c: 536: LATCbits.LATC1 = 1;
  1710  000C72  828B               	bsf	3979,1,c	;volatile
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;modbus.c: 537: for(i=0;i!=9;i++){
  1714  000C74  0E00               	movlw	0
  1715  000C76  6E2E               	movwf	writeCoil@i+1,c
  1716  000C78  0E00               	movlw	0
  1717  000C7A  6E2D               	movwf	writeCoil@i,c
  1718  000C7C                     
  1719                           ; BSR set to: 0
  1720  000C7C  502D               	movf	writeCoil@i,w,c
  1721  000C7E  0A09               	xorlw	9
  1722  000C80  102E               	iorwf	writeCoil@i+1,w,c
  1723  000C82  B4D8               	btfsc	status,2,c
  1724  000C84  D00F               	goto	l275
  1725  000C86                     l276:
  1726  000C86  A2AC               	btfss	4012,1,c	;volatile
  1727  000C88  D7FE               	goto	l276
  1728                           
  1729                           ;modbus.c: 539: TXREG1 = response[i];
  1730  000C8A  0100               	movlb	0	; () banked
  1731  000C8C  0E60               	movlw	low _response	;volatile
  1732  000C8E  242D               	addwf	writeCoil@i,w,c
  1733  000C90  6ED9               	movwf	fsr2l,c
  1734  000C92  0100               	movlb	0	; () banked
  1735  000C94  0E00               	movlw	high _response	;volatile
  1736  000C96  202E               	addwfc	writeCoil@i+1,w,c
  1737  000C98  6EDA               	movwf	fsr2h,c
  1738  000C9A  50DF               	movf	indf2,w,c
  1739  000C9C  6EAD               	movwf	4013,c	;volatile
  1740                           
  1741                           ; BSR set to: 0
  1742  000C9E  4A2D               	infsnz	writeCoil@i,f,c
  1743  000CA0  2A2E               	incf	writeCoil@i+1,f,c
  1744  000CA2  D7EC               	goto	L4
  1745  000CA4                     l275:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;modbus.c: 540: }
  1749                           ;modbus.c: 541: LATCbits.LATC1 = 0;
  1750  000CA4  928B               	bcf	3979,1,c	;volatile
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;modbus.c: 542: clearResponse();
  1754  000CA6  EC7C  F008         	call	_clearResponse	;wreg free
  1755  000CAA  0012               	return	
  1756  000CAC                     __end_of_writeCoil:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           indf2	equ	0xFDF
  1767                           postinc2	equ	0xFDE
  1768                           postdec2	equ	0xFDD
  1769                           fsr2h	equ	0xFDA
  1770                           fsr2l	equ	0xFD9
  1771                           status	equ	0xFD8
  1772                           
  1773 ;; *************** function _readInputReg *****************
  1774 ;; Defined at:
  1775 ;;		line 137 in file "modbus.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  i               2   39[COMRAM] unsigned int 
  1780 ;;  rr_numRegs      2   37[COMRAM] unsigned int 
  1781 ;;  rr_Address      2   35[COMRAM] unsigned int 
  1782 ;;  crc             2   33[COMRAM] unsigned int 
  1783 ;;  j               1   41[COMRAM] unsigned char 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;		None               void
  1786 ;; Registers used:
  1787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;Total ram usage:       13 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    3
  1800 ;; This function calls:
  1801 ;;		_clearResponse
  1802 ;;		_generateCRC
  1803 ;; This function is called by:
  1804 ;;		_decodeIt
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text5
  1809  00046C                     __ptext5:
  1810                           	opt stack 0
  1811  00046C                     _readInputReg:
  1812                           	opt stack 26
  1813                           
  1814                           ;modbus.c: 138: unsigned int rr_Address = 0;
  1815                           
  1816                           ;incstack = 0
  1817                           ;incstack = 0
  1818  00046C  0E00               	movlw	0
  1819  00046E  6E25               	movwf	readInputReg@rr_Address+1,c
  1820  000470  0E00               	movlw	0
  1821  000472  6E24               	movwf	readInputReg@rr_Address,c
  1822                           
  1823                           ;modbus.c: 139: unsigned int rr_numRegs = 0;
  1824  000474  0E00               	movlw	0
  1825  000476  6E27               	movwf	readInputReg@rr_numRegs+1,c
  1826  000478  0E00               	movlw	0
  1827  00047A  6E26               	movwf	readInputReg@rr_numRegs,c
  1828                           
  1829                           ;modbus.c: 140: unsigned char j = 3;
  1830  00047C  6E1E               	movwf	??_readInputReg& (0+255),c
  1831  00047E  0E03               	movlw	3
  1832  000480  6E2A               	movwf	readInputReg@j,c
  1833  000482  501E               	movf	??_readInputReg& (0+255),w,c
  1834                           
  1835                           ;modbus.c: 141: unsigned int crc = 0;
  1836  000484  0E00               	movlw	0
  1837  000486  6E23               	movwf	readInputReg@crc+1,c
  1838  000488  0E00               	movlw	0
  1839  00048A  6E22               	movwf	readInputReg@crc,c
  1840                           
  1841                           ;modbus.c: 142: unsigned int i = 0;
  1842  00048C  0E00               	movlw	0
  1843  00048E  6E29               	movwf	readInputReg@i+1,c
  1844  000490  0E00               	movlw	0
  1845  000492  6E28               	movwf	readInputReg@i,c
  1846                           
  1847                           ;modbus.c: 145: rr_Address = received[2];
  1848  000494  0101               	movlb	1	; () banked
  1849  000496  C102  F024         	movff	_received+2,readInputReg@rr_Address	;volatile
  1850  00049A  6A25               	clrf	readInputReg@rr_Address+1,c
  1851                           
  1852                           ; BSR set to: 1
  1853                           ;modbus.c: 146: rr_Address <<= 8;
  1854  00049C  5024               	movf	readInputReg@rr_Address,w,c
  1855  00049E  6E25               	movwf	readInputReg@rr_Address+1,c
  1856  0004A0  6A24               	clrf	readInputReg@rr_Address,c
  1857                           
  1858                           ; BSR set to: 1
  1859                           ;modbus.c: 147: rr_Address |= received[3];
  1860  0004A2  0101               	movlb	1	; () banked
  1861  0004A4  0101               	movlb	1	; () banked
  1862  0004A6  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  1863  0004A8  1224               	iorwf	readInputReg@rr_Address,f,c
  1864                           
  1865                           ; BSR set to: 1
  1866                           ;modbus.c: 150: rr_numRegs = received[4];
  1867  0004AA  0101               	movlb	1	; () banked
  1868  0004AC  C104  F026         	movff	_received+4,readInputReg@rr_numRegs	;volatile
  1869  0004B0  6A27               	clrf	readInputReg@rr_numRegs+1,c
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;modbus.c: 151: rr_numRegs <<= 8;
  1873  0004B2  5026               	movf	readInputReg@rr_numRegs,w,c
  1874  0004B4  6E27               	movwf	readInputReg@rr_numRegs+1,c
  1875  0004B6  6A26               	clrf	readInputReg@rr_numRegs,c
  1876                           
  1877                           ; BSR set to: 1
  1878                           ;modbus.c: 152: rr_numRegs |= received[5];
  1879  0004B8  0101               	movlb	1	; () banked
  1880  0004BA  0101               	movlb	1	; () banked
  1881  0004BC  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  1882  0004BE  1226               	iorwf	readInputReg@rr_numRegs,f,c
  1883                           
  1884                           ; BSR set to: 1
  1885                           ;modbus.c: 154: response[0] = 2;
  1886  0004C0  0E02               	movlw	2
  1887  0004C2  0100               	movlb	0	; () banked
  1888  0004C4  0100               	movlb	0	; () banked
  1889  0004C6  6F60               	movwf	_response& (0+255),b	;volatile
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;modbus.c: 155: response[1] = 0x04;
  1893  0004C8  0E04               	movlw	4
  1894  0004CA  0100               	movlb	0	; () banked
  1895  0004CC  0100               	movlb	0	; () banked
  1896  0004CE  6F61               	movwf	(_response+1)& (0+255),b	;volatile
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;modbus.c: 156: response[2] = rr_numRegs*2;
  1900  0004D0  5026               	movf	readInputReg@rr_numRegs,w,c
  1901  0004D2  2426               	addwf	readInputReg@rr_numRegs,w,c
  1902  0004D4  0100               	movlb	0	; () banked
  1903  0004D6  0100               	movlb	0	; () banked
  1904  0004D8  6F62               	movwf	(_response+2)& (0+255),b	;volatile
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;modbus.c: 158: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  1908  0004DA  C024  F028         	movff	readInputReg@rr_Address,readInputReg@i
  1909  0004DE  C025  F029         	movff	readInputReg@rr_Address+1,readInputReg@i+1
  1910  0004E2  D060               	goto	l2143
  1911  0004E4                     l2125:
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;modbus.c: 159: if(holdingReg[i] > 255){
  1915  0004E4  90D8               	bcf	status,0,c
  1916  0004E6  3428               	rlcf	readInputReg@i,w,c
  1917  0004E8  6E1E               	movwf	??_readInputReg& (0+255),c
  1918  0004EA  3429               	rlcf	readInputReg@i+1,w,c
  1919  0004EC  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  1920  0004EE  0101               	movlb	1	; () banked
  1921  0004F0  0E7D               	movlw	low _holdingReg	;volatile
  1922  0004F2  241E               	addwf	??_readInputReg,w,c
  1923  0004F4  6ED9               	movwf	fsr2l,c
  1924  0004F6  0101               	movlb	1	; () banked
  1925  0004F8  0E01               	movlw	high _holdingReg	;volatile
  1926  0004FA  201F               	addwfc	??_readInputReg+1,w,c
  1927  0004FC  6EDA               	movwf	fsr2h,c
  1928  0004FE  CFDE F020          	movff	postinc2,??_readInputReg+2
  1929  000502  CFDD F021          	movff	postdec2,??_readInputReg+3
  1930  000506  0E00               	movlw	0
  1931  000508  5C20               	subwf	??_readInputReg+2,w,c
  1932  00050A  0E01               	movlw	1
  1933  00050C  5821               	subwfb	??_readInputReg+3,w,c
  1934  00050E  A0D8               	btfss	status,0,c
  1935  000510  D020               	goto	l2133
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;modbus.c: 161: response[j] = holdingReg[i] >> 8;
  1939  000512  502A               	movf	readInputReg@j,w,c
  1940  000514  0D01               	mullw	1
  1941  000516  0100               	movlb	0	; () banked
  1942  000518  0E60               	movlw	low _response	;volatile
  1943  00051A  24F3               	addwf	prodl,w,c
  1944  00051C  6ED9               	movwf	fsr2l,c
  1945  00051E  0100               	movlb	0	; () banked
  1946  000520  0E00               	movlw	high _response	;volatile
  1947  000522  20F4               	addwfc	prodh,w,c
  1948  000524  6EDA               	movwf	fsr2h,c
  1949  000526  90D8               	bcf	status,0,c
  1950  000528  3428               	rlcf	readInputReg@i,w,c
  1951  00052A  6E1E               	movwf	??_readInputReg& (0+255),c
  1952  00052C  3429               	rlcf	readInputReg@i+1,w,c
  1953  00052E  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  1954  000530  0101               	movlb	1	; () banked
  1955  000532  0E7D               	movlw	low _holdingReg	;volatile
  1956  000534  241E               	addwf	??_readInputReg,w,c
  1957  000536  6EE1               	movwf	fsr1l,c
  1958  000538  0101               	movlb	1	; () banked
  1959  00053A  0E01               	movlw	high _holdingReg	;volatile
  1960  00053C  201F               	addwfc	??_readInputReg+1,w,c
  1961  00053E  6EE2               	movwf	fsr1h,c
  1962  000540  CFE6 F020          	movff	postinc1,??_readInputReg+2
  1963  000544  CFE5 F021          	movff	postdec1,??_readInputReg+3
  1964  000548  C021  F020         	movff	??_readInputReg+3,??_readInputReg+2
  1965  00054C  6A21               	clrf	??_readInputReg+3,c
  1966  00054E  5020               	movf	??_readInputReg+2,w,c
  1967  000550  D00B               	goto	L5
  1968  000552                     l2133:
  1969                           
  1970                           ;modbus.c: 166: else{
  1971                           ;modbus.c: 167: response[j] = 0x00;
  1972  000552  502A               	movf	readInputReg@j,w,c
  1973  000554  0D01               	mullw	1
  1974  000556  0100               	movlb	0	; () banked
  1975  000558  0E60               	movlw	low _response	;volatile
  1976  00055A  24F3               	addwf	prodl,w,c
  1977  00055C  6ED9               	movwf	fsr2l,c
  1978  00055E  0100               	movlb	0	; () banked
  1979  000560  0E00               	movlw	high _response	;volatile
  1980  000562  20F4               	addwfc	prodh,w,c
  1981  000564  6EDA               	movwf	fsr2h,c
  1982  000566  0E00               	movlw	0
  1983  000568                     L5:
  1984  000568  6EDF               	movwf	indf2,c
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;modbus.c: 168: j++;
  1988  00056A  2A2A               	incf	readInputReg@j,f,c
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;modbus.c: 169: response[j] = holdingReg[i];
  1992  00056C  90D8               	bcf	status,0,c
  1993  00056E  3428               	rlcf	readInputReg@i,w,c
  1994  000570  6E1E               	movwf	??_readInputReg& (0+255),c
  1995  000572  3429               	rlcf	readInputReg@i+1,w,c
  1996  000574  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  1997  000576  0101               	movlb	1	; () banked
  1998  000578  0E7D               	movlw	low _holdingReg	;volatile
  1999  00057A  241E               	addwf	??_readInputReg,w,c
  2000  00057C  6ED9               	movwf	fsr2l,c
  2001  00057E  0101               	movlb	1	; () banked
  2002  000580  0E01               	movlw	high _holdingReg	;volatile
  2003  000582  201F               	addwfc	??_readInputReg+1,w,c
  2004  000584  6EDA               	movwf	fsr2h,c
  2005  000586  502A               	movf	readInputReg@j,w,c
  2006  000588  0D01               	mullw	1
  2007  00058A  0100               	movlb	0	; () banked
  2008  00058C  0E60               	movlw	low _response	;volatile
  2009  00058E  24F3               	addwf	prodl,w,c
  2010  000590  6EE1               	movwf	fsr1l,c
  2011  000592  0100               	movlb	0	; () banked
  2012  000594  0E00               	movlw	high _response	;volatile
  2013  000596  20F4               	addwfc	prodh,w,c
  2014  000598  6EE2               	movwf	fsr1h,c
  2015  00059A  CFDF FFE7          	movff	indf2,indf1
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;modbus.c: 170: j++;
  2019  00059E  2A2A               	incf	readInputReg@j,f,c
  2020                           
  2021                           ; BSR set to: 0
  2022                           
  2023                           ; BSR set to: 0
  2024  0005A0  4A28               	infsnz	readInputReg@i,f,c
  2025  0005A2  2A29               	incf	readInputReg@i+1,f,c
  2026  0005A4                     l2143:
  2027                           
  2028                           ; BSR set to: 0
  2029  0005A4  C024  F01E         	movff	readInputReg@rr_Address,??_readInputReg
  2030  0005A8  C025  F01F         	movff	readInputReg@rr_Address+1,??_readInputReg+1
  2031  0005AC  5026               	movf	readInputReg@rr_numRegs,w,c
  2032  0005AE  261E               	addwf	??_readInputReg,f,c
  2033  0005B0  5027               	movf	readInputReg@rr_numRegs+1,w,c
  2034  0005B2  221F               	addwfc	??_readInputReg+1,f,c
  2035  0005B4  501E               	movf	??_readInputReg,w,c
  2036  0005B6  5C28               	subwf	readInputReg@i,w,c
  2037  0005B8  501F               	movf	??_readInputReg+1,w,c
  2038  0005BA  5829               	subwfb	readInputReg@i+1,w,c
  2039  0005BC  A0D8               	btfss	status,0,c
  2040  0005BE  D792               	goto	l2125
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;modbus.c: 171: }
  2044                           ;modbus.c: 172: }
  2045                           ;modbus.c: 173: crc = generateCRC(j+2);
  2046                           
  2047                           ; BSR set to: 0
  2048  0005C0  502A               	movf	readInputReg@j,w,c
  2049  0005C2  0F02               	addlw	2
  2050  0005C4  6E0F               	movwf	?_generateCRC,c
  2051  0005C6  EC6D  F007         	call	_generateCRC	;wreg free
  2052  0005CA  C00F  F022         	movff	?_generateCRC,readInputReg@crc
  2053  0005CE  C010  F023         	movff	?_generateCRC+1,readInputReg@crc+1
  2054                           
  2055                           ;modbus.c: 174: response[j] = crc >> 8;
  2056  0005D2  502A               	movf	readInputReg@j,w,c
  2057  0005D4  0D01               	mullw	1
  2058  0005D6  0100               	movlb	0	; () banked
  2059  0005D8  0E60               	movlw	low _response	;volatile
  2060  0005DA  24F3               	addwf	prodl,w,c
  2061  0005DC  6ED9               	movwf	fsr2l,c
  2062  0005DE  0100               	movlb	0	; () banked
  2063  0005E0  0E00               	movlw	high _response	;volatile
  2064  0005E2  20F4               	addwfc	prodh,w,c
  2065  0005E4  6EDA               	movwf	fsr2h,c
  2066  0005E6  5023               	movf	readInputReg@crc+1,w,c
  2067  0005E8  6EDF               	movwf	indf2,c
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;modbus.c: 175: j++;
  2071  0005EA  2A2A               	incf	readInputReg@j,f,c
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;modbus.c: 176: response[j] = crc;
  2075  0005EC  502A               	movf	readInputReg@j,w,c
  2076  0005EE  0D01               	mullw	1
  2077  0005F0  0100               	movlb	0	; () banked
  2078  0005F2  0E60               	movlw	low _response	;volatile
  2079  0005F4  24F3               	addwf	prodl,w,c
  2080  0005F6  6ED9               	movwf	fsr2l,c
  2081  0005F8  0100               	movlb	0	; () banked
  2082  0005FA  0E00               	movlw	high _response	;volatile
  2083  0005FC  20F4               	addwfc	prodh,w,c
  2084  0005FE  6EDA               	movwf	fsr2h,c
  2085  000600  C022  FFDF         	movff	readInputReg@crc,indf2
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;modbus.c: 177: j+=2;
  2089  000604  0E02               	movlw	2
  2090  000606  262A               	addwf	readInputReg@j,f,c
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;modbus.c: 179: LATCbits.LATC1 = 1;
  2094  000608  828B               	bsf	3979,1,c	;volatile
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;modbus.c: 180: for(i=0;i!=j;i++){
  2098  00060A  0E00               	movlw	0
  2099  00060C  6E29               	movwf	readInputReg@i+1,c
  2100  00060E  0E00               	movlw	0
  2101  000610  6E28               	movwf	readInputReg@i,c
  2102  000612  D00E               	goto	l2163
  2103  000614                     l200:
  2104  000614  A2AC               	btfss	4012,1,c	;volatile
  2105  000616  D7FE               	goto	l200
  2106                           
  2107                           ;modbus.c: 182: TXREG1 = response[i];
  2108  000618  0100               	movlb	0	; () banked
  2109  00061A  0E60               	movlw	low _response	;volatile
  2110  00061C  2428               	addwf	readInputReg@i,w,c
  2111  00061E  6ED9               	movwf	fsr2l,c
  2112  000620  0100               	movlb	0	; () banked
  2113  000622  0E00               	movlw	high _response	;volatile
  2114  000624  2029               	addwfc	readInputReg@i+1,w,c
  2115  000626  6EDA               	movwf	fsr2h,c
  2116  000628  50DF               	movf	indf2,w,c
  2117  00062A  6EAD               	movwf	4013,c	;volatile
  2118                           
  2119                           ; BSR set to: 0
  2120  00062C  4A28               	infsnz	readInputReg@i,f,c
  2121  00062E  2A29               	incf	readInputReg@i+1,f,c
  2122  000630                     l2163:
  2123                           
  2124                           ; BSR set to: 0
  2125  000630  502A               	movf	readInputReg@j,w,c
  2126  000632  6E1E               	movwf	??_readInputReg& (0+255),c
  2127  000634  6A1F               	clrf	(??_readInputReg+1)& (0+255),c
  2128  000636  5029               	movf	readInputReg@i+1,w,c
  2129  000638  181F               	xorwf	??_readInputReg+1,w,c
  2130  00063A  E102               	bnz	u1305
  2131  00063C  5028               	movf	readInputReg@i,w,c
  2132  00063E  181E               	xorwf	??_readInputReg,w,c
  2133  000640                     u1305:
  2134  000640  A4D8               	btfss	status,2,c
  2135  000642  D7E8               	goto	l200
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;modbus.c: 183: }
  2139                           ;modbus.c: 184: LATCbits.LATC1 = 0;
  2140  000644  928B               	bcf	3979,1,c	;volatile
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;modbus.c: 185: j=0;
  2144  000646  6E1E               	movwf	??_readInputReg& (0+255),c
  2145  000648  0E00               	movlw	0
  2146  00064A  6E2A               	movwf	readInputReg@j,c
  2147  00064C  501E               	movf	??_readInputReg& (0+255),w,c
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;modbus.c: 187: clearResponse();
  2151  00064E  EC7C  F008         	call	_clearResponse	;wreg free
  2152  000652  0012               	return	
  2153  000654                     __end_of_readInputReg:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           prodh	equ	0xFF4
  2160                           prodl	equ	0xFF3
  2161                           postinc0	equ	0xFEE
  2162                           wreg	equ	0xFE8
  2163                           indf1	equ	0xFE7
  2164                           postinc1	equ	0xFE6
  2165                           postdec1	equ	0xFE5
  2166                           fsr1h	equ	0xFE2
  2167                           fsr1l	equ	0xFE1
  2168                           indf2	equ	0xFDF
  2169                           postinc2	equ	0xFDE
  2170                           postdec2	equ	0xFDD
  2171                           fsr2h	equ	0xFDA
  2172                           fsr2l	equ	0xFD9
  2173                           status	equ	0xFD8
  2174                           
  2175 ;; *************** function _readReg *****************
  2176 ;; Defined at:
  2177 ;;		line 83 in file "modbus.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  i               2   39[COMRAM] unsigned int 
  2182 ;;  rr_numRegs      2   37[COMRAM] unsigned int 
  2183 ;;  rr_Address      2   35[COMRAM] unsigned int 
  2184 ;;  crc             2   33[COMRAM] unsigned int 
  2185 ;;  j               1   41[COMRAM] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;		None               void
  2188 ;; Registers used:
  2189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;Total ram usage:       13 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    3
  2202 ;; This function calls:
  2203 ;;		_clearResponse
  2204 ;;		_generateCRC
  2205 ;; This function is called by:
  2206 ;;		_decodeIt
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text6
  2211  000654                     __ptext6:
  2212                           	opt stack 0
  2213  000654                     _readReg:
  2214                           	opt stack 26
  2215                           
  2216                           ;modbus.c: 84: unsigned int rr_Address = 0;
  2217                           
  2218                           ;incstack = 0
  2219                           ;incstack = 0
  2220  000654  0E00               	movlw	0
  2221  000656  6E25               	movwf	readReg@rr_Address+1,c
  2222  000658  0E00               	movlw	0
  2223  00065A  6E24               	movwf	readReg@rr_Address,c
  2224                           
  2225                           ;modbus.c: 85: unsigned int rr_numRegs = 0;
  2226  00065C  0E00               	movlw	0
  2227  00065E  6E27               	movwf	readReg@rr_numRegs+1,c
  2228  000660  0E00               	movlw	0
  2229  000662  6E26               	movwf	readReg@rr_numRegs,c
  2230                           
  2231                           ;modbus.c: 86: unsigned char j = 3;
  2232  000664  6E1E               	movwf	??_readReg& (0+255),c
  2233  000666  0E03               	movlw	3
  2234  000668  6E2A               	movwf	readReg@j,c
  2235  00066A  501E               	movf	??_readReg& (0+255),w,c
  2236                           
  2237                           ;modbus.c: 87: unsigned int crc = 0;
  2238  00066C  0E00               	movlw	0
  2239  00066E  6E23               	movwf	readReg@crc+1,c
  2240  000670  0E00               	movlw	0
  2241  000672  6E22               	movwf	readReg@crc,c
  2242                           
  2243                           ;modbus.c: 88: unsigned int i = 0;
  2244  000674  0E00               	movlw	0
  2245  000676  6E29               	movwf	readReg@i+1,c
  2246  000678  0E00               	movlw	0
  2247  00067A  6E28               	movwf	readReg@i,c
  2248                           
  2249                           ;modbus.c: 91: rr_Address = received[2];
  2250  00067C  0101               	movlb	1	; () banked
  2251  00067E  C102  F024         	movff	_received+2,readReg@rr_Address	;volatile
  2252  000682  6A25               	clrf	readReg@rr_Address+1,c
  2253                           
  2254                           ; BSR set to: 1
  2255                           ;modbus.c: 92: rr_Address <<= 8;
  2256  000684  5024               	movf	readReg@rr_Address,w,c
  2257  000686  6E25               	movwf	readReg@rr_Address+1,c
  2258  000688  6A24               	clrf	readReg@rr_Address,c
  2259                           
  2260                           ; BSR set to: 1
  2261                           ;modbus.c: 93: rr_Address |= received[3];
  2262  00068A  0101               	movlb	1	; () banked
  2263  00068C  0101               	movlb	1	; () banked
  2264  00068E  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2265  000690  1224               	iorwf	readReg@rr_Address,f,c
  2266                           
  2267                           ; BSR set to: 1
  2268                           ;modbus.c: 96: rr_numRegs = received[4];
  2269  000692  0101               	movlb	1	; () banked
  2270  000694  C104  F026         	movff	_received+4,readReg@rr_numRegs	;volatile
  2271  000698  6A27               	clrf	readReg@rr_numRegs+1,c
  2272                           
  2273                           ; BSR set to: 1
  2274                           ;modbus.c: 97: rr_numRegs <<= 8;
  2275  00069A  5026               	movf	readReg@rr_numRegs,w,c
  2276  00069C  6E27               	movwf	readReg@rr_numRegs+1,c
  2277  00069E  6A26               	clrf	readReg@rr_numRegs,c
  2278                           
  2279                           ; BSR set to: 1
  2280                           ;modbus.c: 98: rr_numRegs |= received[5];
  2281  0006A0  0101               	movlb	1	; () banked
  2282  0006A2  0101               	movlb	1	; () banked
  2283  0006A4  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2284  0006A6  1226               	iorwf	readReg@rr_numRegs,f,c
  2285                           
  2286                           ; BSR set to: 1
  2287                           ;modbus.c: 100: response[0] = 2;
  2288  0006A8  0E02               	movlw	2
  2289  0006AA  0100               	movlb	0	; () banked
  2290  0006AC  0100               	movlb	0	; () banked
  2291  0006AE  6F60               	movwf	_response& (0+255),b	;volatile
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;modbus.c: 101: response[1] = 0x03;
  2295  0006B0  0E03               	movlw	3
  2296  0006B2  0100               	movlb	0	; () banked
  2297  0006B4  0100               	movlb	0	; () banked
  2298  0006B6  6F61               	movwf	(_response+1)& (0+255),b	;volatile
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;modbus.c: 102: response[2] = rr_numRegs*2;
  2302  0006B8  5026               	movf	readReg@rr_numRegs,w,c
  2303  0006BA  2426               	addwf	readReg@rr_numRegs,w,c
  2304  0006BC  0100               	movlb	0	; () banked
  2305  0006BE  0100               	movlb	0	; () banked
  2306  0006C0  6F62               	movwf	(_response+2)& (0+255),b	;volatile
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;modbus.c: 104: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2310  0006C2  C024  F028         	movff	readReg@rr_Address,readReg@i
  2311  0006C6  C025  F029         	movff	readReg@rr_Address+1,readReg@i+1
  2312  0006CA  D060               	goto	l2071
  2313  0006CC                     l2053:
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;modbus.c: 105: if(holdingReg[i] > 255){
  2317  0006CC  90D8               	bcf	status,0,c
  2318  0006CE  3428               	rlcf	readReg@i,w,c
  2319  0006D0  6E1E               	movwf	??_readReg& (0+255),c
  2320  0006D2  3429               	rlcf	readReg@i+1,w,c
  2321  0006D4  6E1F               	movwf	(??_readReg+1)& (0+255),c
  2322  0006D6  0101               	movlb	1	; () banked
  2323  0006D8  0E7D               	movlw	low _holdingReg	;volatile
  2324  0006DA  241E               	addwf	??_readReg,w,c
  2325  0006DC  6ED9               	movwf	fsr2l,c
  2326  0006DE  0101               	movlb	1	; () banked
  2327  0006E0  0E01               	movlw	high _holdingReg	;volatile
  2328  0006E2  201F               	addwfc	??_readReg+1,w,c
  2329  0006E4  6EDA               	movwf	fsr2h,c
  2330  0006E6  CFDE F020          	movff	postinc2,??_readReg+2
  2331  0006EA  CFDD F021          	movff	postdec2,??_readReg+3
  2332  0006EE  0E00               	movlw	0
  2333  0006F0  5C20               	subwf	??_readReg+2,w,c
  2334  0006F2  0E01               	movlw	1
  2335  0006F4  5821               	subwfb	??_readReg+3,w,c
  2336  0006F6  A0D8               	btfss	status,0,c
  2337  0006F8  D020               	goto	l2061
  2338                           
  2339                           ; BSR set to: 1
  2340                           ;modbus.c: 107: response[j] = holdingReg[i] >> 8;
  2341  0006FA  502A               	movf	readReg@j,w,c
  2342  0006FC  0D01               	mullw	1
  2343  0006FE  0100               	movlb	0	; () banked
  2344  000700  0E60               	movlw	low _response	;volatile
  2345  000702  24F3               	addwf	prodl,w,c
  2346  000704  6ED9               	movwf	fsr2l,c
  2347  000706  0100               	movlb	0	; () banked
  2348  000708  0E00               	movlw	high _response	;volatile
  2349  00070A  20F4               	addwfc	prodh,w,c
  2350  00070C  6EDA               	movwf	fsr2h,c
  2351  00070E  90D8               	bcf	status,0,c
  2352  000710  3428               	rlcf	readReg@i,w,c
  2353  000712  6E1E               	movwf	??_readReg& (0+255),c
  2354  000714  3429               	rlcf	readReg@i+1,w,c
  2355  000716  6E1F               	movwf	(??_readReg+1)& (0+255),c
  2356  000718  0101               	movlb	1	; () banked
  2357  00071A  0E7D               	movlw	low _holdingReg	;volatile
  2358  00071C  241E               	addwf	??_readReg,w,c
  2359  00071E  6EE1               	movwf	fsr1l,c
  2360  000720  0101               	movlb	1	; () banked
  2361  000722  0E01               	movlw	high _holdingReg	;volatile
  2362  000724  201F               	addwfc	??_readReg+1,w,c
  2363  000726  6EE2               	movwf	fsr1h,c
  2364  000728  CFE6 F020          	movff	postinc1,??_readReg+2
  2365  00072C  CFE5 F021          	movff	postdec1,??_readReg+3
  2366  000730  C021  F020         	movff	??_readReg+3,??_readReg+2
  2367  000734  6A21               	clrf	??_readReg+3,c
  2368  000736  5020               	movf	??_readReg+2,w,c
  2369  000738  D00B               	goto	L6
  2370  00073A                     l2061:
  2371                           
  2372                           ;modbus.c: 112: else{
  2373                           ;modbus.c: 113: response[j] = 0x00;
  2374  00073A  502A               	movf	readReg@j,w,c
  2375  00073C  0D01               	mullw	1
  2376  00073E  0100               	movlb	0	; () banked
  2377  000740  0E60               	movlw	low _response	;volatile
  2378  000742  24F3               	addwf	prodl,w,c
  2379  000744  6ED9               	movwf	fsr2l,c
  2380  000746  0100               	movlb	0	; () banked
  2381  000748  0E00               	movlw	high _response	;volatile
  2382  00074A  20F4               	addwfc	prodh,w,c
  2383  00074C  6EDA               	movwf	fsr2h,c
  2384  00074E  0E00               	movlw	0
  2385  000750                     L6:
  2386  000750  6EDF               	movwf	indf2,c
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;modbus.c: 114: j++;
  2390  000752  2A2A               	incf	readReg@j,f,c
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;modbus.c: 115: response[j] = holdingReg[i];
  2394  000754  90D8               	bcf	status,0,c
  2395  000756  3428               	rlcf	readReg@i,w,c
  2396  000758  6E1E               	movwf	??_readReg& (0+255),c
  2397  00075A  3429               	rlcf	readReg@i+1,w,c
  2398  00075C  6E1F               	movwf	(??_readReg+1)& (0+255),c
  2399  00075E  0101               	movlb	1	; () banked
  2400  000760  0E7D               	movlw	low _holdingReg	;volatile
  2401  000762  241E               	addwf	??_readReg,w,c
  2402  000764  6ED9               	movwf	fsr2l,c
  2403  000766  0101               	movlb	1	; () banked
  2404  000768  0E01               	movlw	high _holdingReg	;volatile
  2405  00076A  201F               	addwfc	??_readReg+1,w,c
  2406  00076C  6EDA               	movwf	fsr2h,c
  2407  00076E  502A               	movf	readReg@j,w,c
  2408  000770  0D01               	mullw	1
  2409  000772  0100               	movlb	0	; () banked
  2410  000774  0E60               	movlw	low _response	;volatile
  2411  000776  24F3               	addwf	prodl,w,c
  2412  000778  6EE1               	movwf	fsr1l,c
  2413  00077A  0100               	movlb	0	; () banked
  2414  00077C  0E00               	movlw	high _response	;volatile
  2415  00077E  20F4               	addwfc	prodh,w,c
  2416  000780  6EE2               	movwf	fsr1h,c
  2417  000782  CFDF FFE7          	movff	indf2,indf1
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;modbus.c: 116: j++;
  2421  000786  2A2A               	incf	readReg@j,f,c
  2422                           
  2423                           ; BSR set to: 0
  2424                           
  2425                           ; BSR set to: 0
  2426  000788  4A28               	infsnz	readReg@i,f,c
  2427  00078A  2A29               	incf	readReg@i+1,f,c
  2428  00078C                     l2071:
  2429                           
  2430                           ; BSR set to: 0
  2431  00078C  C024  F01E         	movff	readReg@rr_Address,??_readReg
  2432  000790  C025  F01F         	movff	readReg@rr_Address+1,??_readReg+1
  2433  000794  5026               	movf	readReg@rr_numRegs,w,c
  2434  000796  261E               	addwf	??_readReg,f,c
  2435  000798  5027               	movf	readReg@rr_numRegs+1,w,c
  2436  00079A  221F               	addwfc	??_readReg+1,f,c
  2437  00079C  501E               	movf	??_readReg,w,c
  2438  00079E  5C28               	subwf	readReg@i,w,c
  2439  0007A0  501F               	movf	??_readReg+1,w,c
  2440  0007A2  5829               	subwfb	readReg@i+1,w,c
  2441  0007A4  A0D8               	btfss	status,0,c
  2442  0007A6  D792               	goto	l2053
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;modbus.c: 117: }
  2446                           ;modbus.c: 118: }
  2447                           ;modbus.c: 119: crc = generateCRC(j+2);
  2448                           
  2449                           ; BSR set to: 0
  2450  0007A8  502A               	movf	readReg@j,w,c
  2451  0007AA  0F02               	addlw	2
  2452  0007AC  6E0F               	movwf	?_generateCRC,c
  2453  0007AE  EC6D  F007         	call	_generateCRC	;wreg free
  2454  0007B2  C00F  F022         	movff	?_generateCRC,readReg@crc
  2455  0007B6  C010  F023         	movff	?_generateCRC+1,readReg@crc+1
  2456                           
  2457                           ;modbus.c: 120: response[j] = crc >> 8;
  2458  0007BA  502A               	movf	readReg@j,w,c
  2459  0007BC  0D01               	mullw	1
  2460  0007BE  0100               	movlb	0	; () banked
  2461  0007C0  0E60               	movlw	low _response	;volatile
  2462  0007C2  24F3               	addwf	prodl,w,c
  2463  0007C4  6ED9               	movwf	fsr2l,c
  2464  0007C6  0100               	movlb	0	; () banked
  2465  0007C8  0E00               	movlw	high _response	;volatile
  2466  0007CA  20F4               	addwfc	prodh,w,c
  2467  0007CC  6EDA               	movwf	fsr2h,c
  2468  0007CE  5023               	movf	readReg@crc+1,w,c
  2469  0007D0  6EDF               	movwf	indf2,c
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;modbus.c: 121: j++;
  2473  0007D2  2A2A               	incf	readReg@j,f,c
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;modbus.c: 122: response[j] = crc;
  2477  0007D4  502A               	movf	readReg@j,w,c
  2478  0007D6  0D01               	mullw	1
  2479  0007D8  0100               	movlb	0	; () banked
  2480  0007DA  0E60               	movlw	low _response	;volatile
  2481  0007DC  24F3               	addwf	prodl,w,c
  2482  0007DE  6ED9               	movwf	fsr2l,c
  2483  0007E0  0100               	movlb	0	; () banked
  2484  0007E2  0E00               	movlw	high _response	;volatile
  2485  0007E4  20F4               	addwfc	prodh,w,c
  2486  0007E6  6EDA               	movwf	fsr2h,c
  2487  0007E8  C022  FFDF         	movff	readReg@crc,indf2
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;modbus.c: 123: j+=2;
  2491  0007EC  0E02               	movlw	2
  2492  0007EE  262A               	addwf	readReg@j,f,c
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;modbus.c: 125: LATCbits.LATC1 = 1;
  2496  0007F0  828B               	bsf	3979,1,c	;volatile
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;modbus.c: 126: for(i=0;i!=j;i++){
  2500  0007F2  0E00               	movlw	0
  2501  0007F4  6E29               	movwf	readReg@i+1,c
  2502  0007F6  0E00               	movlw	0
  2503  0007F8  6E28               	movwf	readReg@i,c
  2504  0007FA  D00E               	goto	l2091
  2505  0007FC                     l186:
  2506  0007FC  A2AC               	btfss	4012,1,c	;volatile
  2507  0007FE  D7FE               	goto	l186
  2508                           
  2509                           ;modbus.c: 128: TXREG1 = response[i];
  2510  000800  0100               	movlb	0	; () banked
  2511  000802  0E60               	movlw	low _response	;volatile
  2512  000804  2428               	addwf	readReg@i,w,c
  2513  000806  6ED9               	movwf	fsr2l,c
  2514  000808  0100               	movlb	0	; () banked
  2515  00080A  0E00               	movlw	high _response	;volatile
  2516  00080C  2029               	addwfc	readReg@i+1,w,c
  2517  00080E  6EDA               	movwf	fsr2h,c
  2518  000810  50DF               	movf	indf2,w,c
  2519  000812  6EAD               	movwf	4013,c	;volatile
  2520                           
  2521                           ; BSR set to: 0
  2522  000814  4A28               	infsnz	readReg@i,f,c
  2523  000816  2A29               	incf	readReg@i+1,f,c
  2524  000818                     l2091:
  2525                           
  2526                           ; BSR set to: 0
  2527  000818  502A               	movf	readReg@j,w,c
  2528  00081A  6E1E               	movwf	??_readReg& (0+255),c
  2529  00081C  6A1F               	clrf	(??_readReg+1)& (0+255),c
  2530  00081E  5029               	movf	readReg@i+1,w,c
  2531  000820  181F               	xorwf	??_readReg+1,w,c
  2532  000822  E102               	bnz	u1265
  2533  000824  5028               	movf	readReg@i,w,c
  2534  000826  181E               	xorwf	??_readReg,w,c
  2535  000828                     u1265:
  2536  000828  A4D8               	btfss	status,2,c
  2537  00082A  D7E8               	goto	l186
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;modbus.c: 129: }
  2541                           ;modbus.c: 130: LATCbits.LATC1 = 0;
  2542  00082C  928B               	bcf	3979,1,c	;volatile
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;modbus.c: 131: j=0;
  2546  00082E  6E1E               	movwf	??_readReg& (0+255),c
  2547  000830  0E00               	movlw	0
  2548  000832  6E2A               	movwf	readReg@j,c
  2549  000834  501E               	movf	??_readReg& (0+255),w,c
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;modbus.c: 133: clearResponse();
  2553  000836  EC7C  F008         	call	_clearResponse	;wreg free
  2554  00083A  0012               	return	
  2555  00083C                     __end_of_readReg:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           indf1	equ	0xFE7
  2566                           postinc1	equ	0xFE6
  2567                           postdec1	equ	0xFE5
  2568                           fsr1h	equ	0xFE2
  2569                           fsr1l	equ	0xFE1
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function _readInputCoil *****************
  2578 ;; Defined at:
  2579 ;;		line 405 in file "modbus.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  rc_numCoils     2   36[COMRAM] unsigned int 
  2584 ;;  crc             2   33[COMRAM] unsigned int 
  2585 ;;  rc_Address      2   31[COMRAM] unsigned int 
  2586 ;;  k               1   43[COMRAM] unsigned char 
  2587 ;;  j               1   42[COMRAM] unsigned char 
  2588 ;;  i               1   41[COMRAM] unsigned char 
  2589 ;;  lsb             1   40[COMRAM] unsigned char 
  2590 ;;  l               1   39[COMRAM] unsigned char 
  2591 ;;  howManyBytes    1   38[COMRAM] unsigned char 
  2592 ;;  remainder       1   35[COMRAM] unsigned char 
  2593 ;; Return value:  Size  Location     Type
  2594 ;;		None               void
  2595 ;; Registers used:
  2596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;Total ram usage:       15 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    3
  2609 ;; This function calls:
  2610 ;;		_clearResponse
  2611 ;;		_generateCRC
  2612 ;; This function is called by:
  2613 ;;		_decodeIt
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text7
  2618  000018                     __ptext7:
  2619                           	opt stack 0
  2620  000018                     _readInputCoil:
  2621                           	opt stack 26
  2622                           
  2623                           ;modbus.c: 409: unsigned int rc_Address = 0;
  2624                           
  2625                           ;incstack = 0
  2626                           ;incstack = 0
  2627  000018  0E00               	movlw	0
  2628  00001A  6E21               	movwf	readInputCoil@rc_Address+1,c
  2629  00001C  0E00               	movlw	0
  2630  00001E  6E20               	movwf	readInputCoil@rc_Address,c
  2631                           
  2632                           ;modbus.c: 410: unsigned int rc_numCoils = 0;
  2633  000020  0E00               	movlw	0
  2634  000022  6E26               	movwf	readInputCoil@rc_numCoils+1,c
  2635  000024  0E00               	movlw	0
  2636  000026  6E25               	movwf	readInputCoil@rc_numCoils,c
  2637                           
  2638                           ;modbus.c: 411: unsigned int crc = 0;
  2639  000028  0E00               	movlw	0
  2640  00002A  6E23               	movwf	readInputCoil@crc+1,c
  2641  00002C  0E00               	movlw	0
  2642  00002E  6E22               	movwf	readInputCoil@crc,c
  2643                           
  2644                           ;modbus.c: 413: unsigned char howManyBytes = 0;
  2645  000030  6E1E               	movwf	??_readInputCoil& (0+255),c
  2646  000032  0E00               	movlw	0
  2647  000034  6E27               	movwf	readInputCoil@howManyBytes,c
  2648  000036  501E               	movf	??_readInputCoil& (0+255),w,c
  2649                           
  2650                           ;modbus.c: 414: unsigned char remainder = 0;
  2651  000038  6E1E               	movwf	??_readInputCoil& (0+255),c
  2652  00003A  0E00               	movlw	0
  2653  00003C  6E24               	movwf	readInputCoil@remainder,c
  2654  00003E  501E               	movf	??_readInputCoil& (0+255),w,c
  2655                           
  2656                           ;modbus.c: 415: unsigned char lsb = 0;
  2657  000040  6E1E               	movwf	??_readInputCoil& (0+255),c
  2658  000042  0E00               	movlw	0
  2659  000044  6E29               	movwf	readInputCoil@lsb,c
  2660  000046  501E               	movf	??_readInputCoil& (0+255),w,c
  2661                           
  2662                           ;modbus.c: 416: unsigned char i,j,k,l = 0;
  2663  000048  6E1E               	movwf	??_readInputCoil& (0+255),c
  2664  00004A  0E00               	movlw	0
  2665  00004C  6E28               	movwf	readInputCoil@l,c
  2666  00004E  501E               	movf	??_readInputCoil& (0+255),w,c
  2667                           
  2668                           ;modbus.c: 419: rc_Address = received[2];
  2669  000050  0101               	movlb	1	; () banked
  2670  000052  C102  F020         	movff	_received+2,readInputCoil@rc_Address	;volatile
  2671  000056  6A21               	clrf	readInputCoil@rc_Address+1,c
  2672                           
  2673                           ;modbus.c: 420: rc_Address <<=8;
  2674  000058  5020               	movf	readInputCoil@rc_Address,w,c
  2675  00005A  6E21               	movwf	readInputCoil@rc_Address+1,c
  2676  00005C  6A20               	clrf	readInputCoil@rc_Address,c
  2677                           
  2678                           ; BSR set to: 1
  2679                           ;modbus.c: 421: rc_Address |= received[3];
  2680  00005E  0101               	movlb	1	; () banked
  2681  000060  0101               	movlb	1	; () banked
  2682  000062  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  2683  000064  1220               	iorwf	readInputCoil@rc_Address,f,c
  2684                           
  2685                           ; BSR set to: 1
  2686                           ;modbus.c: 424: rc_numCoils = received[4];
  2687  000066  0101               	movlb	1	; () banked
  2688  000068  C104  F025         	movff	_received+4,readInputCoil@rc_numCoils	;volatile
  2689  00006C  6A26               	clrf	readInputCoil@rc_numCoils+1,c
  2690                           
  2691                           ; BSR set to: 1
  2692                           ;modbus.c: 425: rc_numCoils <<= 8;
  2693  00006E  5025               	movf	readInputCoil@rc_numCoils,w,c
  2694  000070  6E26               	movwf	readInputCoil@rc_numCoils+1,c
  2695  000072  6A25               	clrf	readInputCoil@rc_numCoils,c
  2696                           
  2697                           ;modbus.c: 426: rc_numCoils |= received[5];
  2698  000074  0101               	movlb	1	; () banked
  2699  000076  0101               	movlb	1	; () banked
  2700  000078  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  2701  00007A  1225               	iorwf	readInputCoil@rc_numCoils,f,c
  2702                           
  2703                           ; BSR set to: 1
  2704                           ;modbus.c: 428: response[0] = 2;
  2705  00007C  0E02               	movlw	2
  2706  00007E  0100               	movlb	0	; () banked
  2707  000080  0100               	movlb	0	; () banked
  2708  000082  6F60               	movwf	_response& (0+255),b	;volatile
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;modbus.c: 429: response[1] = 0x02;
  2712  000084  0E02               	movlw	2
  2713  000086  0100               	movlb	0	; () banked
  2714  000088  0100               	movlb	0	; () banked
  2715  00008A  6F61               	movwf	(_response+1)& (0+255),b	;volatile
  2716                           
  2717                           ;modbus.c: 431: howManyBytes = rc_numCoils/8;
  2718  00008C  C025  F01E         	movff	readInputCoil@rc_numCoils,??_readInputCoil
  2719  000090  C026  F01F         	movff	readInputCoil@rc_numCoils+1,??_readInputCoil+1
  2720  000094  90D8               	bcf	status,0,c
  2721  000096  321F               	rrcf	??_readInputCoil+1,f,c
  2722  000098  321E               	rrcf	??_readInputCoil,f,c
  2723  00009A  90D8               	bcf	status,0,c
  2724  00009C  321F               	rrcf	??_readInputCoil+1,f,c
  2725  00009E  321E               	rrcf	??_readInputCoil,f,c
  2726  0000A0  90D8               	bcf	status,0,c
  2727  0000A2  321F               	rrcf	??_readInputCoil+1,f,c
  2728  0000A4  321E               	rrcf	??_readInputCoil,f,c
  2729  0000A6  501E               	movf	??_readInputCoil,w,c
  2730  0000A8  6E27               	movwf	readInputCoil@howManyBytes,c
  2731                           
  2732                           ;modbus.c: 432: remainder = rc_numCoils % 8;
  2733  0000AA  5025               	movf	readInputCoil@rc_numCoils,w,c
  2734  0000AC  0B07               	andlw	7
  2735  0000AE  6E24               	movwf	readInputCoil@remainder,c
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;modbus.c: 434: if(remainder){
  2739  0000B0  5024               	movf	readInputCoil@remainder,w,c
  2740  0000B2  A4D8               	btfss	status,2,c
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;modbus.c: 435: howManyBytes += 1;
  2744  0000B4  2A27               	incf	readInputCoil@howManyBytes,f,c
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;modbus.c: 436: }
  2748                           ;modbus.c: 437: response[2] = howManyBytes;
  2749                           
  2750                           ; BSR set to: 0
  2751  0000B6  C027  F062         	movff	readInputCoil@howManyBytes,_response+2	;volatile
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;modbus.c: 439: l = rc_Address;
  2755  0000BA  C020  F028         	movff	readInputCoil@rc_Address,readInputCoil@l
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;modbus.c: 440: k = 3;
  2759  0000BE  6E1E               	movwf	??_readInputCoil& (0+255),c
  2760  0000C0  0E03               	movlw	3
  2761  0000C2  6E2C               	movwf	readInputCoil@k,c
  2762  0000C4  501E               	movf	??_readInputCoil& (0+255),w,c
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;modbus.c: 442: for(i=howManyBytes; i!=0; i--){
  2766  0000C6  C027  F02A         	movff	readInputCoil@howManyBytes,readInputCoil@i
  2767  0000CA  D06E               	goto	L10
  2768  0000CC                     l1963:
  2769                           
  2770                           ;modbus.c: 443: if(i>1){
  2771  0000CC  0E01               	movlw	1
  2772  0000CE  642A               	cpfsgt	readInputCoil@i,c
  2773  0000D0  D035               	goto	l1987
  2774                           
  2775                           ;modbus.c: 444: for(j=0;j!=8;j++){
  2776  0000D2  6E1E               	movwf	??_readInputCoil& (0+255),c
  2777  0000D4  0E00               	movlw	0
  2778  0000D6  6E2B               	movwf	readInputCoil@j,c
  2779  0000D8  501E               	movf	??_readInputCoil& (0+255),w,c
  2780  0000DA  502B               	movf	readInputCoil@j,w,c
  2781  0000DC  0A08               	xorlw	8
  2782  0000DE  B4D8               	btfsc	status,2,c
  2783  0000E0  D061               	goto	l2003
  2784                           
  2785                           ;modbus.c: 445: if(coils[l]){
  2786  0000E2  5028               	movf	readInputCoil@l,w,c
  2787  0000E4  0D01               	mullw	1
  2788  0000E6  0102               	movlb	2	; () banked
  2789  0000E8  0E00               	movlw	low _coils	;volatile
  2790  0000EA  24F3               	addwf	prodl,w,c
  2791  0000EC  6ED9               	movwf	fsr2l,c
  2792  0000EE  0102               	movlb	2	; () banked
  2793  0000F0  0E02               	movlw	high _coils	;volatile
  2794  0000F2  20F4               	addwfc	prodh,w,c
  2795  0000F4  6EDA               	movwf	fsr2h,c
  2796  0000F6  50DF               	movf	indf2,w,c
  2797  0000F8  B4D8               	btfsc	status,2,c
  2798  0000FA  D003               	goto	l1975
  2799                           
  2800                           ; BSR set to: 2
  2801                           ;modbus.c: 446: lsb = 1;
  2802  0000FC  6E1E               	movwf	??_readInputCoil& (0+255),c
  2803  0000FE  0E01               	movlw	1
  2804  000100  D002               	goto	L7
  2805  000102                     l1975:
  2806                           
  2807                           ; BSR set to: 2
  2808                           ;modbus.c: 448: else{
  2809                           ;modbus.c: 449: lsb = 0;
  2810  000102  6E1E               	movwf	??_readInputCoil& (0+255),c
  2811  000104  0E00               	movlw	0
  2812  000106                     L7:
  2813  000106  6E29               	movwf	readInputCoil@lsb,c
  2814  000108  501E               	movf	??_readInputCoil& (0+255),w,c
  2815                           
  2816                           ; BSR set to: 2
  2817                           ;modbus.c: 450: }
  2818                           ;modbus.c: 451: response[k] ^= (lsb << j);
  2819                           
  2820                           ; BSR set to: 2
  2821  00010A  C02B  F01E         	movff	readInputCoil@j,??_readInputCoil
  2822  00010E  C029  F01F         	movff	readInputCoil@lsb,??_readInputCoil+1
  2823  000112  2A1E               	incf	??_readInputCoil,f,c
  2824  000114  D002               	goto	u1154
  2825  000116                     u1155:
  2826  000116  90D8               	bcf	status,0,c
  2827  000118  361F               	rlcf	??_readInputCoil+1,f,c
  2828  00011A                     u1154:
  2829  00011A  2E1E               	decfsz	??_readInputCoil,f,c
  2830  00011C  D7FC               	goto	u1155
  2831  00011E  502C               	movf	readInputCoil@k,w,c
  2832  000120  0D01               	mullw	1
  2833  000122  0100               	movlb	0	; () banked
  2834  000124  0E60               	movlw	low _response	;volatile
  2835  000126  24F3               	addwf	prodl,w,c
  2836  000128  6ED9               	movwf	fsr2l,c
  2837  00012A  0100               	movlb	0	; () banked
  2838  00012C  0E00               	movlw	high _response	;volatile
  2839  00012E  20F4               	addwfc	prodh,w,c
  2840  000130  6EDA               	movwf	fsr2h,c
  2841  000132  501F               	movf	??_readInputCoil+1,w,c
  2842  000134  1ADF               	xorwf	indf2,f,c
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;modbus.c: 452: l++;
  2846  000136  2A28               	incf	readInputCoil@l,f,c
  2847                           
  2848                           ; BSR set to: 0
  2849  000138  2A2B               	incf	readInputCoil@j,f,c
  2850  00013A  D7CF               	goto	L8
  2851  00013C                     l1987:
  2852                           
  2853                           ;modbus.c: 456: else{
  2854                           ;modbus.c: 457: for(j=0;j!=remainder;j++){
  2855  00013C  6E1E               	movwf	??_readInputCoil& (0+255),c
  2856  00013E  0E00               	movlw	0
  2857  000140  6E2B               	movwf	readInputCoil@j,c
  2858  000142  501E               	movf	??_readInputCoil& (0+255),w,c
  2859  000144  D02C               	goto	l2001
  2860  000146                     l1989:
  2861                           
  2862                           ;modbus.c: 458: if(coils[l]){
  2863  000146  5028               	movf	readInputCoil@l,w,c
  2864  000148  0D01               	mullw	1
  2865  00014A  0102               	movlb	2	; () banked
  2866  00014C  0E00               	movlw	low _coils	;volatile
  2867  00014E  24F3               	addwf	prodl,w,c
  2868  000150  6ED9               	movwf	fsr2l,c
  2869  000152  0102               	movlb	2	; () banked
  2870  000154  0E02               	movlw	high _coils	;volatile
  2871  000156  20F4               	addwfc	prodh,w,c
  2872  000158  6EDA               	movwf	fsr2h,c
  2873  00015A  50DF               	movf	indf2,w,c
  2874  00015C  B4D8               	btfsc	status,2,c
  2875  00015E  D003               	goto	l1993
  2876                           
  2877                           ; BSR set to: 2
  2878                           ;modbus.c: 459: lsb = 1;
  2879  000160  6E1E               	movwf	??_readInputCoil& (0+255),c
  2880  000162  0E01               	movlw	1
  2881  000164  D002               	goto	L9
  2882  000166                     l1993:
  2883                           
  2884                           ; BSR set to: 2
  2885                           ;modbus.c: 461: else{
  2886                           ;modbus.c: 462: lsb = 0;
  2887  000166  6E1E               	movwf	??_readInputCoil& (0+255),c
  2888  000168  0E00               	movlw	0
  2889  00016A                     L9:
  2890  00016A  6E29               	movwf	readInputCoil@lsb,c
  2891  00016C  501E               	movf	??_readInputCoil& (0+255),w,c
  2892                           
  2893                           ; BSR set to: 2
  2894                           ;modbus.c: 463: }
  2895                           ;modbus.c: 464: response[k] ^= (lsb << j);
  2896                           
  2897                           ; BSR set to: 2
  2898  00016E  C02B  F01E         	movff	readInputCoil@j,??_readInputCoil
  2899  000172  C029  F01F         	movff	readInputCoil@lsb,??_readInputCoil+1
  2900  000176  2A1E               	incf	??_readInputCoil,f,c
  2901  000178  D002               	goto	u1184
  2902  00017A                     u1185:
  2903  00017A  90D8               	bcf	status,0,c
  2904  00017C  361F               	rlcf	??_readInputCoil+1,f,c
  2905  00017E                     u1184:
  2906  00017E  2E1E               	decfsz	??_readInputCoil,f,c
  2907  000180  D7FC               	goto	u1185
  2908  000182  502C               	movf	readInputCoil@k,w,c
  2909  000184  0D01               	mullw	1
  2910  000186  0100               	movlb	0	; () banked
  2911  000188  0E60               	movlw	low _response	;volatile
  2912  00018A  24F3               	addwf	prodl,w,c
  2913  00018C  6ED9               	movwf	fsr2l,c
  2914  00018E  0100               	movlb	0	; () banked
  2915  000190  0E00               	movlw	high _response	;volatile
  2916  000192  20F4               	addwfc	prodh,w,c
  2917  000194  6EDA               	movwf	fsr2h,c
  2918  000196  501F               	movf	??_readInputCoil+1,w,c
  2919  000198  1ADF               	xorwf	indf2,f,c
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;modbus.c: 465: l++;
  2923  00019A  2A28               	incf	readInputCoil@l,f,c
  2924                           
  2925                           ; BSR set to: 0
  2926  00019C  2A2B               	incf	readInputCoil@j,f,c
  2927  00019E                     l2001:
  2928  00019E  5024               	movf	readInputCoil@remainder,w,c
  2929  0001A0  622B               	cpfseq	readInputCoil@j,c
  2930  0001A2  D7D1               	goto	l1989
  2931  0001A4                     l2003:
  2932                           
  2933                           ;modbus.c: 466: }
  2934                           ;modbus.c: 467: k++;
  2935  0001A4  2A2C               	incf	readInputCoil@k,f,c
  2936  0001A6  062A               	decf	readInputCoil@i,f,c
  2937  0001A8                     L10:
  2938  0001A8  662A               	tstfsz	readInputCoil@i,c
  2939  0001AA  D790               	goto	l1963
  2940                           
  2941                           ;modbus.c: 468: }
  2942                           ;modbus.c: 469: }
  2943                           ;modbus.c: 470: crc = generateCRC(k+2);
  2944  0001AC  502C               	movf	readInputCoil@k,w,c
  2945  0001AE  0F02               	addlw	2
  2946  0001B0  6E0F               	movwf	?_generateCRC,c
  2947  0001B2  EC6D  F007         	call	_generateCRC	;wreg free
  2948  0001B6  C00F  F022         	movff	?_generateCRC,readInputCoil@crc
  2949  0001BA  C010  F023         	movff	?_generateCRC+1,readInputCoil@crc+1
  2950                           
  2951                           ;modbus.c: 472: response[k] = crc >> 8;
  2952  0001BE  502C               	movf	readInputCoil@k,w,c
  2953  0001C0  0D01               	mullw	1
  2954  0001C2  0100               	movlb	0	; () banked
  2955  0001C4  0E60               	movlw	low _response	;volatile
  2956  0001C6  24F3               	addwf	prodl,w,c
  2957  0001C8  6ED9               	movwf	fsr2l,c
  2958  0001CA  0100               	movlb	0	; () banked
  2959  0001CC  0E00               	movlw	high _response	;volatile
  2960  0001CE  20F4               	addwfc	prodh,w,c
  2961  0001D0  6EDA               	movwf	fsr2h,c
  2962  0001D2  5023               	movf	readInputCoil@crc+1,w,c
  2963  0001D4  6EDF               	movwf	indf2,c
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;modbus.c: 473: response[k+1] = crc;
  2967  0001D6  502C               	movf	readInputCoil@k,w,c
  2968  0001D8  6E1E               	movwf	??_readInputCoil& (0+255),c
  2969  0001DA  6A1F               	clrf	(??_readInputCoil+1)& (0+255),c
  2970  0001DC  0E01               	movlw	1
  2971  0001DE  261E               	addwf	??_readInputCoil,f,c
  2972  0001E0  0E00               	movlw	0
  2973  0001E2  221F               	addwfc	??_readInputCoil+1,f,c
  2974  0001E4  0100               	movlb	0	; () banked
  2975  0001E6  0E60               	movlw	low _response	;volatile
  2976  0001E8  241E               	addwf	??_readInputCoil,w,c
  2977  0001EA  6ED9               	movwf	fsr2l,c
  2978  0001EC  0100               	movlb	0	; () banked
  2979  0001EE  0E00               	movlw	high _response	;volatile
  2980  0001F0  201F               	addwfc	??_readInputCoil+1,w,c
  2981  0001F2  6EDA               	movwf	fsr2h,c
  2982  0001F4  C022  FFDF         	movff	readInputCoil@crc,indf2
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;modbus.c: 475: LATCbits.LATC1 = 1;
  2986  0001F8  828B               	bsf	3979,1,c	;volatile
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;modbus.c: 476: for(i=0;i!=(k+3);i++){
  2990  0001FA  6E1E               	movwf	??_readInputCoil& (0+255),c
  2991  0001FC  0E00               	movlw	0
  2992  0001FE  6E2A               	movwf	readInputCoil@i,c
  2993  000200  501E               	movf	??_readInputCoil& (0+255),w,c
  2994  000202  D00F               	goto	l2021
  2995  000204                     l265:
  2996  000204  A2AC               	btfss	4012,1,c	;volatile
  2997  000206  D7FE               	goto	l265
  2998                           
  2999                           ;modbus.c: 478: TXREG1 = response[i];
  3000  000208  502A               	movf	readInputCoil@i,w,c
  3001  00020A  0D01               	mullw	1
  3002  00020C  0100               	movlb	0	; () banked
  3003  00020E  0E60               	movlw	low _response	;volatile
  3004  000210  24F3               	addwf	prodl,w,c
  3005  000212  6ED9               	movwf	fsr2l,c
  3006  000214  0100               	movlb	0	; () banked
  3007  000216  0E00               	movlw	high _response	;volatile
  3008  000218  20F4               	addwfc	prodh,w,c
  3009  00021A  6EDA               	movwf	fsr2h,c
  3010  00021C  50DF               	movf	indf2,w,c
  3011  00021E  6EAD               	movwf	4013,c	;volatile
  3012                           
  3013                           ; BSR set to: 0
  3014  000220  2A2A               	incf	readInputCoil@i,f,c
  3015  000222                     l2021:
  3016                           
  3017                           ; BSR set to: 0
  3018  000222  502C               	movf	readInputCoil@k,w,c
  3019  000224  6E1E               	movwf	??_readInputCoil& (0+255),c
  3020  000226  6A1F               	clrf	(??_readInputCoil+1)& (0+255),c
  3021  000228  0E03               	movlw	3
  3022  00022A  261E               	addwf	??_readInputCoil,f,c
  3023  00022C  0E00               	movlw	0
  3024  00022E  221F               	addwfc	??_readInputCoil+1,f,c
  3025  000230  502A               	movf	readInputCoil@i,w,c
  3026  000232  181E               	xorwf	??_readInputCoil,w,c
  3027  000234  101F               	iorwf	??_readInputCoil+1,w,c
  3028  000236  A4D8               	btfss	status,2,c
  3029  000238  D7E5               	goto	l265
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;modbus.c: 479: }
  3033                           ;modbus.c: 480: LATCbits.LATC1 = 0;
  3034  00023A  928B               	bcf	3979,1,c	;volatile
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;modbus.c: 481: clearResponse();
  3038  00023C  EC7C  F008         	call	_clearResponse	;wreg free
  3039  000240  0012               	return	
  3040  000242                     __end_of_readInputCoil:
  3041                           	opt stack 0
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           prodh	equ	0xFF4
  3047                           prodl	equ	0xFF3
  3048                           postinc0	equ	0xFEE
  3049                           wreg	equ	0xFE8
  3050                           indf1	equ	0xFE7
  3051                           postinc1	equ	0xFE6
  3052                           postdec1	equ	0xFE5
  3053                           fsr1h	equ	0xFE2
  3054                           fsr1l	equ	0xFE1
  3055                           indf2	equ	0xFDF
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _readCoil *****************
  3063 ;; Defined at:
  3064 ;;		line 325 in file "modbus.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  rc_numCoils     2   36[COMRAM] unsigned int 
  3069 ;;  crc             2   33[COMRAM] unsigned int 
  3070 ;;  rc_Address      2   31[COMRAM] unsigned int 
  3071 ;;  k               1   43[COMRAM] unsigned char 
  3072 ;;  j               1   42[COMRAM] unsigned char 
  3073 ;;  i               1   41[COMRAM] unsigned char 
  3074 ;;  lsb             1   40[COMRAM] unsigned char 
  3075 ;;  l               1   39[COMRAM] unsigned char 
  3076 ;;  howManyBytes    1   38[COMRAM] unsigned char 
  3077 ;;  remainder       1   35[COMRAM] unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;		None               void
  3080 ;; Registers used:
  3081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;Total ram usage:       15 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    3
  3094 ;; This function calls:
  3095 ;;		_clearResponse
  3096 ;;		_generateCRC
  3097 ;; This function is called by:
  3098 ;;		_decodeIt
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text8
  3103  000242                     __ptext8:
  3104                           	opt stack 0
  3105  000242                     _readCoil:
  3106                           	opt stack 26
  3107                           
  3108                           ;modbus.c: 329: unsigned int rc_Address = 0;
  3109                           
  3110                           ;incstack = 0
  3111                           ;incstack = 0
  3112  000242  0E00               	movlw	0
  3113  000244  6E21               	movwf	readCoil@rc_Address+1,c
  3114  000246  0E00               	movlw	0
  3115  000248  6E20               	movwf	readCoil@rc_Address,c
  3116                           
  3117                           ;modbus.c: 330: unsigned int rc_numCoils = 0;
  3118  00024A  0E00               	movlw	0
  3119  00024C  6E26               	movwf	readCoil@rc_numCoils+1,c
  3120  00024E  0E00               	movlw	0
  3121  000250  6E25               	movwf	readCoil@rc_numCoils,c
  3122                           
  3123                           ;modbus.c: 331: unsigned int crc = 0;
  3124  000252  0E00               	movlw	0
  3125  000254  6E23               	movwf	readCoil@crc+1,c
  3126  000256  0E00               	movlw	0
  3127  000258  6E22               	movwf	readCoil@crc,c
  3128                           
  3129                           ;modbus.c: 333: unsigned char howManyBytes = 0;
  3130  00025A  6E1E               	movwf	??_readCoil& (0+255),c
  3131  00025C  0E00               	movlw	0
  3132  00025E  6E27               	movwf	readCoil@howManyBytes,c
  3133  000260  501E               	movf	??_readCoil& (0+255),w,c
  3134                           
  3135                           ;modbus.c: 334: unsigned char remainder = 0;
  3136  000262  6E1E               	movwf	??_readCoil& (0+255),c
  3137  000264  0E00               	movlw	0
  3138  000266  6E24               	movwf	readCoil@remainder,c
  3139  000268  501E               	movf	??_readCoil& (0+255),w,c
  3140                           
  3141                           ;modbus.c: 335: unsigned char lsb = 0;
  3142  00026A  6E1E               	movwf	??_readCoil& (0+255),c
  3143  00026C  0E00               	movlw	0
  3144  00026E  6E29               	movwf	readCoil@lsb,c
  3145  000270  501E               	movf	??_readCoil& (0+255),w,c
  3146                           
  3147                           ;modbus.c: 336: unsigned char i,j,k,l = 0;
  3148  000272  6E1E               	movwf	??_readCoil& (0+255),c
  3149  000274  0E00               	movlw	0
  3150  000276  6E28               	movwf	readCoil@l,c
  3151  000278  501E               	movf	??_readCoil& (0+255),w,c
  3152                           
  3153                           ;modbus.c: 339: rc_Address = received[2];
  3154  00027A  0101               	movlb	1	; () banked
  3155  00027C  C102  F020         	movff	_received+2,readCoil@rc_Address	;volatile
  3156  000280  6A21               	clrf	readCoil@rc_Address+1,c
  3157                           
  3158                           ;modbus.c: 340: rc_Address <<=8;
  3159  000282  5020               	movf	readCoil@rc_Address,w,c
  3160  000284  6E21               	movwf	readCoil@rc_Address+1,c
  3161  000286  6A20               	clrf	readCoil@rc_Address,c
  3162                           
  3163                           ; BSR set to: 1
  3164                           ;modbus.c: 341: rc_Address |= received[3];
  3165  000288  0101               	movlb	1	; () banked
  3166  00028A  0101               	movlb	1	; () banked
  3167  00028C  5103               	movf	(_received+3)& (0+255),w,b	;volatile
  3168  00028E  1220               	iorwf	readCoil@rc_Address,f,c
  3169                           
  3170                           ; BSR set to: 1
  3171                           ;modbus.c: 344: rc_numCoils = received[4];
  3172  000290  0101               	movlb	1	; () banked
  3173  000292  C104  F025         	movff	_received+4,readCoil@rc_numCoils	;volatile
  3174  000296  6A26               	clrf	readCoil@rc_numCoils+1,c
  3175                           
  3176                           ; BSR set to: 1
  3177                           ;modbus.c: 345: rc_numCoils <<= 8;
  3178  000298  5025               	movf	readCoil@rc_numCoils,w,c
  3179  00029A  6E26               	movwf	readCoil@rc_numCoils+1,c
  3180  00029C  6A25               	clrf	readCoil@rc_numCoils,c
  3181                           
  3182                           ;modbus.c: 346: rc_numCoils |= received[5];
  3183  00029E  0101               	movlb	1	; () banked
  3184  0002A0  0101               	movlb	1	; () banked
  3185  0002A2  5105               	movf	(_received+5)& (0+255),w,b	;volatile
  3186  0002A4  1225               	iorwf	readCoil@rc_numCoils,f,c
  3187                           
  3188                           ; BSR set to: 1
  3189                           ;modbus.c: 348: response[0] = 2;
  3190  0002A6  0E02               	movlw	2
  3191  0002A8  0100               	movlb	0	; () banked
  3192  0002AA  0100               	movlb	0	; () banked
  3193  0002AC  6F60               	movwf	_response& (0+255),b	;volatile
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;modbus.c: 349: response[1] = 0x01;
  3197  0002AE  0E01               	movlw	1
  3198  0002B0  0100               	movlb	0	; () banked
  3199  0002B2  0100               	movlb	0	; () banked
  3200  0002B4  6F61               	movwf	(_response+1)& (0+255),b	;volatile
  3201                           
  3202                           ;modbus.c: 351: howManyBytes = rc_numCoils/8;
  3203  0002B6  C025  F01E         	movff	readCoil@rc_numCoils,??_readCoil
  3204  0002BA  C026  F01F         	movff	readCoil@rc_numCoils+1,??_readCoil+1
  3205  0002BE  90D8               	bcf	status,0,c
  3206  0002C0  321F               	rrcf	??_readCoil+1,f,c
  3207  0002C2  321E               	rrcf	??_readCoil,f,c
  3208  0002C4  90D8               	bcf	status,0,c
  3209  0002C6  321F               	rrcf	??_readCoil+1,f,c
  3210  0002C8  321E               	rrcf	??_readCoil,f,c
  3211  0002CA  90D8               	bcf	status,0,c
  3212  0002CC  321F               	rrcf	??_readCoil+1,f,c
  3213  0002CE  321E               	rrcf	??_readCoil,f,c
  3214  0002D0  501E               	movf	??_readCoil,w,c
  3215  0002D2  6E27               	movwf	readCoil@howManyBytes,c
  3216                           
  3217                           ;modbus.c: 352: remainder = rc_numCoils % 8;
  3218  0002D4  5025               	movf	readCoil@rc_numCoils,w,c
  3219  0002D6  0B07               	andlw	7
  3220  0002D8  6E24               	movwf	readCoil@remainder,c
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;modbus.c: 354: if(remainder){
  3224  0002DA  5024               	movf	readCoil@remainder,w,c
  3225  0002DC  A4D8               	btfss	status,2,c
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;modbus.c: 355: howManyBytes += 1;
  3229  0002DE  2A27               	incf	readCoil@howManyBytes,f,c
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;modbus.c: 356: }
  3233                           ;modbus.c: 357: response[2] = howManyBytes;
  3234                           
  3235                           ; BSR set to: 0
  3236  0002E0  C027  F062         	movff	readCoil@howManyBytes,_response+2	;volatile
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;modbus.c: 359: l = rc_Address;
  3240  0002E4  C020  F028         	movff	readCoil@rc_Address,readCoil@l
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;modbus.c: 360: k = 3;
  3244  0002E8  6E1E               	movwf	??_readCoil& (0+255),c
  3245  0002EA  0E03               	movlw	3
  3246  0002EC  6E2C               	movwf	readCoil@k,c
  3247  0002EE  501E               	movf	??_readCoil& (0+255),w,c
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;modbus.c: 362: for(i=howManyBytes; i!=0; i--){
  3251  0002F0  C027  F02A         	movff	readCoil@howManyBytes,readCoil@i
  3252  0002F4  D06E               	goto	L14
  3253  0002F6                     l1863:
  3254                           
  3255                           ;modbus.c: 363: if(i>1){
  3256  0002F6  0E01               	movlw	1
  3257  0002F8  642A               	cpfsgt	readCoil@i,c
  3258  0002FA  D035               	goto	l1887
  3259                           
  3260                           ;modbus.c: 364: for(j=0;j!=8;j++){
  3261  0002FC  6E1E               	movwf	??_readCoil& (0+255),c
  3262  0002FE  0E00               	movlw	0
  3263  000300  6E2B               	movwf	readCoil@j,c
  3264  000302  501E               	movf	??_readCoil& (0+255),w,c
  3265  000304  502B               	movf	readCoil@j,w,c
  3266  000306  0A08               	xorlw	8
  3267  000308  B4D8               	btfsc	status,2,c
  3268  00030A  D061               	goto	l1903
  3269                           
  3270                           ;modbus.c: 365: if(coils[l]){
  3271  00030C  5028               	movf	readCoil@l,w,c
  3272  00030E  0D01               	mullw	1
  3273  000310  0102               	movlb	2	; () banked
  3274  000312  0E00               	movlw	low _coils	;volatile
  3275  000314  24F3               	addwf	prodl,w,c
  3276  000316  6ED9               	movwf	fsr2l,c
  3277  000318  0102               	movlb	2	; () banked
  3278  00031A  0E02               	movlw	high _coils	;volatile
  3279  00031C  20F4               	addwfc	prodh,w,c
  3280  00031E  6EDA               	movwf	fsr2h,c
  3281  000320  50DF               	movf	indf2,w,c
  3282  000322  B4D8               	btfsc	status,2,c
  3283  000324  D003               	goto	l1875
  3284                           
  3285                           ; BSR set to: 2
  3286                           ;modbus.c: 366: lsb = 1;
  3287  000326  6E1E               	movwf	??_readCoil& (0+255),c
  3288  000328  0E01               	movlw	1
  3289  00032A  D002               	goto	L11
  3290  00032C                     l1875:
  3291                           
  3292                           ; BSR set to: 2
  3293                           ;modbus.c: 368: else{
  3294                           ;modbus.c: 369: lsb = 0;
  3295  00032C  6E1E               	movwf	??_readCoil& (0+255),c
  3296  00032E  0E00               	movlw	0
  3297  000330                     L11:
  3298  000330  6E29               	movwf	readCoil@lsb,c
  3299  000332  501E               	movf	??_readCoil& (0+255),w,c
  3300                           
  3301                           ; BSR set to: 2
  3302                           ;modbus.c: 370: }
  3303                           ;modbus.c: 371: response[k] ^= (lsb << j);
  3304                           
  3305                           ; BSR set to: 2
  3306  000334  C02B  F01E         	movff	readCoil@j,??_readCoil
  3307  000338  C029  F01F         	movff	readCoil@lsb,??_readCoil+1
  3308  00033C  2A1E               	incf	??_readCoil,f,c
  3309  00033E  D002               	goto	u1024
  3310  000340                     u1025:
  3311  000340  90D8               	bcf	status,0,c
  3312  000342  361F               	rlcf	??_readCoil+1,f,c
  3313  000344                     u1024:
  3314  000344  2E1E               	decfsz	??_readCoil,f,c
  3315  000346  D7FC               	goto	u1025
  3316  000348  502C               	movf	readCoil@k,w,c
  3317  00034A  0D01               	mullw	1
  3318  00034C  0100               	movlb	0	; () banked
  3319  00034E  0E60               	movlw	low _response	;volatile
  3320  000350  24F3               	addwf	prodl,w,c
  3321  000352  6ED9               	movwf	fsr2l,c
  3322  000354  0100               	movlb	0	; () banked
  3323  000356  0E00               	movlw	high _response	;volatile
  3324  000358  20F4               	addwfc	prodh,w,c
  3325  00035A  6EDA               	movwf	fsr2h,c
  3326  00035C  501F               	movf	??_readCoil+1,w,c
  3327  00035E  1ADF               	xorwf	indf2,f,c
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;modbus.c: 372: l++;
  3331  000360  2A28               	incf	readCoil@l,f,c
  3332                           
  3333                           ; BSR set to: 0
  3334  000362  2A2B               	incf	readCoil@j,f,c
  3335  000364  D7CF               	goto	L12
  3336  000366                     l1887:
  3337                           
  3338                           ;modbus.c: 376: else{
  3339                           ;modbus.c: 377: for(j=0;j!=remainder;j++){
  3340  000366  6E1E               	movwf	??_readCoil& (0+255),c
  3341  000368  0E00               	movlw	0
  3342  00036A  6E2B               	movwf	readCoil@j,c
  3343  00036C  501E               	movf	??_readCoil& (0+255),w,c
  3344  00036E  D02C               	goto	l1901
  3345  000370                     l1889:
  3346                           
  3347                           ;modbus.c: 378: if(coils[l]){
  3348  000370  5028               	movf	readCoil@l,w,c
  3349  000372  0D01               	mullw	1
  3350  000374  0102               	movlb	2	; () banked
  3351  000376  0E00               	movlw	low _coils	;volatile
  3352  000378  24F3               	addwf	prodl,w,c
  3353  00037A  6ED9               	movwf	fsr2l,c
  3354  00037C  0102               	movlb	2	; () banked
  3355  00037E  0E02               	movlw	high _coils	;volatile
  3356  000380  20F4               	addwfc	prodh,w,c
  3357  000382  6EDA               	movwf	fsr2h,c
  3358  000384  50DF               	movf	indf2,w,c
  3359  000386  B4D8               	btfsc	status,2,c
  3360  000388  D003               	goto	l1893
  3361                           
  3362                           ; BSR set to: 2
  3363                           ;modbus.c: 379: lsb = 1;
  3364  00038A  6E1E               	movwf	??_readCoil& (0+255),c
  3365  00038C  0E01               	movlw	1
  3366  00038E  D002               	goto	L13
  3367  000390                     l1893:
  3368                           
  3369                           ; BSR set to: 2
  3370                           ;modbus.c: 381: else{
  3371                           ;modbus.c: 382: lsb = 0;
  3372  000390  6E1E               	movwf	??_readCoil& (0+255),c
  3373  000392  0E00               	movlw	0
  3374  000394                     L13:
  3375  000394  6E29               	movwf	readCoil@lsb,c
  3376  000396  501E               	movf	??_readCoil& (0+255),w,c
  3377                           
  3378                           ; BSR set to: 2
  3379                           ;modbus.c: 383: }
  3380                           ;modbus.c: 384: response[k] ^= (lsb << j);
  3381                           
  3382                           ; BSR set to: 2
  3383  000398  C02B  F01E         	movff	readCoil@j,??_readCoil
  3384  00039C  C029  F01F         	movff	readCoil@lsb,??_readCoil+1
  3385  0003A0  2A1E               	incf	??_readCoil,f,c
  3386  0003A2  D002               	goto	u1054
  3387  0003A4                     u1055:
  3388  0003A4  90D8               	bcf	status,0,c
  3389  0003A6  361F               	rlcf	??_readCoil+1,f,c
  3390  0003A8                     u1054:
  3391  0003A8  2E1E               	decfsz	??_readCoil,f,c
  3392  0003AA  D7FC               	goto	u1055
  3393  0003AC  502C               	movf	readCoil@k,w,c
  3394  0003AE  0D01               	mullw	1
  3395  0003B0  0100               	movlb	0	; () banked
  3396  0003B2  0E60               	movlw	low _response	;volatile
  3397  0003B4  24F3               	addwf	prodl,w,c
  3398  0003B6  6ED9               	movwf	fsr2l,c
  3399  0003B8  0100               	movlb	0	; () banked
  3400  0003BA  0E00               	movlw	high _response	;volatile
  3401  0003BC  20F4               	addwfc	prodh,w,c
  3402  0003BE  6EDA               	movwf	fsr2h,c
  3403  0003C0  501F               	movf	??_readCoil+1,w,c
  3404  0003C2  1ADF               	xorwf	indf2,f,c
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;modbus.c: 385: l++;
  3408  0003C4  2A28               	incf	readCoil@l,f,c
  3409                           
  3410                           ; BSR set to: 0
  3411  0003C6  2A2B               	incf	readCoil@j,f,c
  3412  0003C8                     l1901:
  3413  0003C8  5024               	movf	readCoil@remainder,w,c
  3414  0003CA  622B               	cpfseq	readCoil@j,c
  3415  0003CC  D7D1               	goto	l1889
  3416  0003CE                     l1903:
  3417                           
  3418                           ;modbus.c: 386: }
  3419                           ;modbus.c: 387: k++;
  3420  0003CE  2A2C               	incf	readCoil@k,f,c
  3421  0003D0  062A               	decf	readCoil@i,f,c
  3422  0003D2                     L14:
  3423  0003D2  662A               	tstfsz	readCoil@i,c
  3424  0003D4  D790               	goto	l1863
  3425                           
  3426                           ;modbus.c: 388: }
  3427                           ;modbus.c: 389: }
  3428                           ;modbus.c: 390: crc = generateCRC(k+2);
  3429  0003D6  502C               	movf	readCoil@k,w,c
  3430  0003D8  0F02               	addlw	2
  3431  0003DA  6E0F               	movwf	?_generateCRC,c
  3432  0003DC  EC6D  F007         	call	_generateCRC	;wreg free
  3433  0003E0  C00F  F022         	movff	?_generateCRC,readCoil@crc
  3434  0003E4  C010  F023         	movff	?_generateCRC+1,readCoil@crc+1
  3435                           
  3436                           ;modbus.c: 392: response[k] = crc >> 8;
  3437  0003E8  502C               	movf	readCoil@k,w,c
  3438  0003EA  0D01               	mullw	1
  3439  0003EC  0100               	movlb	0	; () banked
  3440  0003EE  0E60               	movlw	low _response	;volatile
  3441  0003F0  24F3               	addwf	prodl,w,c
  3442  0003F2  6ED9               	movwf	fsr2l,c
  3443  0003F4  0100               	movlb	0	; () banked
  3444  0003F6  0E00               	movlw	high _response	;volatile
  3445  0003F8  20F4               	addwfc	prodh,w,c
  3446  0003FA  6EDA               	movwf	fsr2h,c
  3447  0003FC  5023               	movf	readCoil@crc+1,w,c
  3448  0003FE  6EDF               	movwf	indf2,c
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;modbus.c: 393: response[k+1] = crc;
  3452  000400  502C               	movf	readCoil@k,w,c
  3453  000402  6E1E               	movwf	??_readCoil& (0+255),c
  3454  000404  6A1F               	clrf	(??_readCoil+1)& (0+255),c
  3455  000406  0E01               	movlw	1
  3456  000408  261E               	addwf	??_readCoil,f,c
  3457  00040A  0E00               	movlw	0
  3458  00040C  221F               	addwfc	??_readCoil+1,f,c
  3459  00040E  0100               	movlb	0	; () banked
  3460  000410  0E60               	movlw	low _response	;volatile
  3461  000412  241E               	addwf	??_readCoil,w,c
  3462  000414  6ED9               	movwf	fsr2l,c
  3463  000416  0100               	movlb	0	; () banked
  3464  000418  0E00               	movlw	high _response	;volatile
  3465  00041A  201F               	addwfc	??_readCoil+1,w,c
  3466  00041C  6EDA               	movwf	fsr2h,c
  3467  00041E  C022  FFDF         	movff	readCoil@crc,indf2
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;modbus.c: 395: LATCbits.LATC1 = 1;
  3471  000422  828B               	bsf	3979,1,c	;volatile
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;modbus.c: 396: for(i=0;i!=(k+3);i++){
  3475  000424  6E1E               	movwf	??_readCoil& (0+255),c
  3476  000426  0E00               	movlw	0
  3477  000428  6E2A               	movwf	readCoil@i,c
  3478  00042A  501E               	movf	??_readCoil& (0+255),w,c
  3479  00042C  D00F               	goto	l1921
  3480  00042E                     l242:
  3481  00042E  A2AC               	btfss	4012,1,c	;volatile
  3482  000430  D7FE               	goto	l242
  3483                           
  3484                           ;modbus.c: 398: TXREG1 = response[i];
  3485  000432  502A               	movf	readCoil@i,w,c
  3486  000434  0D01               	mullw	1
  3487  000436  0100               	movlb	0	; () banked
  3488  000438  0E60               	movlw	low _response	;volatile
  3489  00043A  24F3               	addwf	prodl,w,c
  3490  00043C  6ED9               	movwf	fsr2l,c
  3491  00043E  0100               	movlb	0	; () banked
  3492  000440  0E00               	movlw	high _response	;volatile
  3493  000442  20F4               	addwfc	prodh,w,c
  3494  000444  6EDA               	movwf	fsr2h,c
  3495  000446  50DF               	movf	indf2,w,c
  3496  000448  6EAD               	movwf	4013,c	;volatile
  3497                           
  3498                           ; BSR set to: 0
  3499  00044A  2A2A               	incf	readCoil@i,f,c
  3500  00044C                     l1921:
  3501                           
  3502                           ; BSR set to: 0
  3503  00044C  502C               	movf	readCoil@k,w,c
  3504  00044E  6E1E               	movwf	??_readCoil& (0+255),c
  3505  000450  6A1F               	clrf	(??_readCoil+1)& (0+255),c
  3506  000452  0E03               	movlw	3
  3507  000454  261E               	addwf	??_readCoil,f,c
  3508  000456  0E00               	movlw	0
  3509  000458  221F               	addwfc	??_readCoil+1,f,c
  3510  00045A  502A               	movf	readCoil@i,w,c
  3511  00045C  181E               	xorwf	??_readCoil,w,c
  3512  00045E  101F               	iorwf	??_readCoil+1,w,c
  3513  000460  A4D8               	btfss	status,2,c
  3514  000462  D7E5               	goto	l242
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;modbus.c: 399: }
  3518                           ;modbus.c: 400: LATCbits.LATC1 = 0;
  3519  000464  928B               	bcf	3979,1,c	;volatile
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;modbus.c: 401: clearResponse();
  3523  000466  EC7C  F008         	call	_clearResponse	;wreg free
  3524  00046A  0012               	return	
  3525  00046C                     __end_of_readCoil:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           indf1	equ	0xFE7
  3536                           postinc1	equ	0xFE6
  3537                           postdec1	equ	0xFE5
  3538                           fsr1h	equ	0xFE2
  3539                           fsr1l	equ	0xFE1
  3540                           indf2	equ	0xFDF
  3541                           postinc2	equ	0xFDE
  3542                           postdec2	equ	0xFDD
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _generateCRC *****************
  3548 ;; Defined at:
  3549 ;;		line 546 in file "modbus.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  messageLengt    1   14[COMRAM] unsigned char 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  crc             2   27[COMRAM] unsigned int 
  3554 ;;  j               2   25[COMRAM] int 
  3555 ;;  i               2   23[COMRAM] int 
  3556 ;;  crcHigh         2   21[COMRAM] unsigned int 
  3557 ;;  crcLow          2   19[COMRAM] unsigned int 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  2   14[COMRAM] unsigned int 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;Total ram usage:       15 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    2
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_readReg
  3578 ;;		_readInputReg
  3579 ;;		_writeReg
  3580 ;;		_writeMultipleRegs
  3581 ;;		_readCoil
  3582 ;;		_readInputCoil
  3583 ;;		_writeCoil
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text9
  3588  000EDA                     __ptext9:
  3589                           	opt stack 0
  3590  000EDA                     _generateCRC:
  3591                           	opt stack 26
  3592                           
  3593                           ;modbus.c: 547: unsigned int crc = 0xFFFF;
  3594                           
  3595                           ;incstack = 0
  3596                           ;incstack = 0
  3597  000EDA  681C               	setf	generateCRC@crc,c
  3598  000EDC  681D               	setf	generateCRC@crc+1,c
  3599                           
  3600                           ;modbus.c: 548: unsigned int crcHigh = 0;
  3601  000EDE  0E00               	movlw	0
  3602  000EE0  6E17               	movwf	generateCRC@crcHigh+1,c
  3603  000EE2  0E00               	movlw	0
  3604  000EE4  6E16               	movwf	generateCRC@crcHigh,c
  3605                           
  3606                           ;modbus.c: 549: unsigned int crcLow = 0;
  3607  000EE6  0E00               	movlw	0
  3608  000EE8  6E15               	movwf	generateCRC@crcLow+1,c
  3609  000EEA  0E00               	movlw	0
  3610  000EEC  6E14               	movwf	generateCRC@crcLow,c
  3611                           
  3612                           ;modbus.c: 550: int i,j = 0;
  3613  000EEE  0E00               	movlw	0
  3614  000EF0  6E1B               	movwf	generateCRC@j+1,c
  3615  000EF2  0E00               	movlw	0
  3616  000EF4  6E1A               	movwf	generateCRC@j,c
  3617                           
  3618                           ;modbus.c: 552: for(i=0;i<messageLength-2;i++){
  3619  000EF6  0E00               	movlw	0
  3620  000EF8  6E19               	movwf	generateCRC@i+1,c
  3621  000EFA  0E00               	movlw	0
  3622  000EFC  6E18               	movwf	generateCRC@i,c
  3623  000EFE  D027               	goto	l2383
  3624  000F00                     l2365:
  3625                           
  3626                           ;modbus.c: 553: crc ^= response[i];
  3627  000F00  0100               	movlb	0	; () banked
  3628  000F02  0E60               	movlw	low _response	;volatile
  3629  000F04  2418               	addwf	generateCRC@i,w,c
  3630  000F06  6ED9               	movwf	fsr2l,c
  3631  000F08  0100               	movlb	0	; () banked
  3632  000F0A  0E00               	movlw	high _response	;volatile
  3633  000F0C  2019               	addwfc	generateCRC@i+1,w,c
  3634  000F0E  6EDA               	movwf	fsr2h,c
  3635  000F10  50DF               	movf	indf2,w,c
  3636  000F12  6E11               	movwf	??_generateCRC& (0+255),c
  3637  000F14  5011               	movf	??_generateCRC,w,c
  3638  000F16  1A1C               	xorwf	generateCRC@crc,f,c
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;modbus.c: 554: for(j=8; j!=0; j--){
  3642  000F18  0E00               	movlw	0
  3643  000F1A  6E1B               	movwf	generateCRC@j+1,c
  3644  000F1C  0E08               	movlw	8
  3645  000F1E  6E1A               	movwf	generateCRC@j,c
  3646  000F20                     
  3647                           ; BSR set to: 0
  3648  000F20  501B               	movf	generateCRC@j+1,w,c
  3649  000F22  101A               	iorwf	generateCRC@j,w,c
  3650  000F24  B4D8               	btfsc	status,2,c
  3651  000F26  D011               	goto	l2381
  3652                           
  3653                           ;modbus.c: 555: if((crc & 0x0001) != 0){
  3654                           
  3655                           ; BSR set to: 0
  3656  000F28  A01C               	btfss	generateCRC@crc,0,c
  3657  000F2A  D008               	goto	l2377
  3658                           
  3659                           ;modbus.c: 556: crc >>= 1;
  3660  000F2C  90D8               	bcf	status,0,c
  3661  000F2E  321D               	rrcf	generateCRC@crc+1,f,c
  3662  000F30  321C               	rrcf	generateCRC@crc,f,c
  3663                           
  3664                           ;modbus.c: 557: crc ^= 0xA001;
  3665  000F32  0E01               	movlw	1
  3666  000F34  1A1C               	xorwf	generateCRC@crc,f,c
  3667  000F36  0EA0               	movlw	160
  3668  000F38  1A1D               	xorwf	generateCRC@crc+1,f,c
  3669                           
  3670                           ;modbus.c: 558: }
  3671  000F3A  D003               	goto	l287
  3672  000F3C                     l2377:
  3673                           
  3674                           ;modbus.c: 559: else{
  3675                           ;modbus.c: 560: crc >>= 1;
  3676  000F3C  90D8               	bcf	status,0,c
  3677  000F3E  321D               	rrcf	generateCRC@crc+1,f,c
  3678  000F40  321C               	rrcf	generateCRC@crc,f,c
  3679  000F42                     l287:
  3680  000F42  061A               	decf	generateCRC@j,f,c
  3681  000F44  A0D8               	btfss	status,0,c
  3682  000F46  061B               	decf	generateCRC@j+1,f,c
  3683  000F48  D7EB               	goto	L15
  3684  000F4A                     l2381:
  3685  000F4A  4A18               	infsnz	generateCRC@i,f,c
  3686  000F4C  2A19               	incf	generateCRC@i+1,f,c
  3687  000F4E                     l2383:
  3688  000F4E  0EFE               	movlw	254
  3689  000F50  240F               	addwf	generateCRC@messageLength,w,c
  3690  000F52  6E11               	movwf	??_generateCRC& (0+255),c
  3691  000F54  6A12               	clrf	(??_generateCRC+1)& (0+255),c
  3692  000F56  0EFF               	movlw	255
  3693  000F58  2212               	addwfc	(??_generateCRC+1)& (0+255),f,c
  3694  000F5A  5019               	movf	generateCRC@i+1,w,c
  3695  000F5C  0A80               	xorlw	128
  3696  000F5E  6E13               	movwf	(??_generateCRC+2)& (0+255),c
  3697  000F60  5011               	movf	??_generateCRC,w,c
  3698  000F62  5C18               	subwf	generateCRC@i,w,c
  3699  000F64  5012               	movf	??_generateCRC+1,w,c
  3700  000F66  0A80               	xorlw	128
  3701  000F68  5813               	subwfb	(??_generateCRC+2)& (0+255),w,c
  3702  000F6A  A0D8               	btfss	status,0,c
  3703  000F6C  D7C9               	goto	l2365
  3704                           
  3705                           ;modbus.c: 561: }
  3706                           ;modbus.c: 562: }
  3707                           ;modbus.c: 563: }
  3708                           ;modbus.c: 565: crcHigh = (crc & 0x00FF) <<8;
  3709  000F6E  501C               	movf	generateCRC@crc,w,c
  3710  000F70  6E12               	movwf	(??_generateCRC+1)& (0+255),c
  3711  000F72  6A11               	clrf	??_generateCRC& (0+255),c
  3712  000F74  C011  F016         	movff	??_generateCRC,generateCRC@crcHigh
  3713  000F78  C012  F017         	movff	??_generateCRC+1,generateCRC@crcHigh+1
  3714                           
  3715                           ;modbus.c: 566: crcLow = (crc & 0xFF00) >>8;
  3716  000F7C  C01D  F011         	movff	generateCRC@crc+1,??_generateCRC
  3717  000F80  C011  F012         	movff	??_generateCRC,??_generateCRC+1
  3718  000F84  6A13               	clrf	(??_generateCRC+2)& (0+255),c
  3719  000F86  5012               	movf	??_generateCRC+1,w,c
  3720  000F88  6E14               	movwf	generateCRC@crcLow,c
  3721  000F8A  6A15               	clrf	generateCRC@crcLow+1,c
  3722                           
  3723                           ;modbus.c: 567: crcHigh |= crcLow;
  3724  000F8C  5014               	movf	generateCRC@crcLow,w,c
  3725  000F8E  1216               	iorwf	generateCRC@crcHigh,f,c
  3726  000F90  5015               	movf	generateCRC@crcLow+1,w,c
  3727  000F92  1217               	iorwf	generateCRC@crcHigh+1,f,c
  3728                           
  3729                           ;modbus.c: 568: crc = crcHigh;
  3730  000F94  C016  F01C         	movff	generateCRC@crcHigh,generateCRC@crc
  3731  000F98  C017  F01D         	movff	generateCRC@crcHigh+1,generateCRC@crc+1
  3732                           
  3733                           ;modbus.c: 569: return crc;
  3734  000F9C  C01C  F00F         	movff	generateCRC@crc,?_generateCRC
  3735  000FA0  C01D  F010         	movff	generateCRC@crc+1,?_generateCRC+1
  3736  000FA4  0012               	return	
  3737  000FA6                     __end_of_generateCRC:
  3738                           	opt stack 0
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           indf1	equ	0xFE7
  3748                           postinc1	equ	0xFE6
  3749                           postdec1	equ	0xFE5
  3750                           fsr1h	equ	0xFE2
  3751                           fsr1l	equ	0xFE1
  3752                           indf2	equ	0xFDF
  3753                           postinc2	equ	0xFDE
  3754                           postdec2	equ	0xFDD
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _clearResponse *****************
  3760 ;; Defined at:
  3761 ;;		line 42 in file "modbus.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  i               1   15[COMRAM] unsigned char 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;		None               void
  3768 ;; Registers used:
  3769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;Total ram usage:        2 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    2
  3782 ;; This function calls:
  3783 ;;		Nothing
  3784 ;; This function is called by:
  3785 ;;		_readReg
  3786 ;;		_readInputReg
  3787 ;;		_writeReg
  3788 ;;		_writeMultipleRegs
  3789 ;;		_readCoil
  3790 ;;		_readInputCoil
  3791 ;;		_writeCoil
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text10
  3796  0010F8                     __ptext10:
  3797                           	opt stack 0
  3798  0010F8                     _clearResponse:
  3799                           	opt stack 26
  3800                           
  3801                           ;modbus.c: 43: unsigned char i;
  3802                           ;modbus.c: 44: for(i=0;i<125;i++){
  3803                           
  3804                           ;incstack = 0
  3805                           ;incstack = 0
  3806  0010F8  6E0F               	movwf	??_clearResponse& (0+255),c
  3807  0010FA  0E00               	movlw	0
  3808  0010FC  6E10               	movwf	clearResponse@i,c
  3809  0010FE  500F               	movf	??_clearResponse& (0+255),w,c
  3810  001100  D00D               	goto	L16
  3811  001102                     l1779:
  3812                           
  3813                           ;modbus.c: 45: response[i] = 0;
  3814  001102  5010               	movf	clearResponse@i,w,c
  3815  001104  0D01               	mullw	1
  3816  001106  0100               	movlb	0	; () banked
  3817  001108  0E60               	movlw	low _response	;volatile
  3818  00110A  24F3               	addwf	prodl,w,c
  3819  00110C  6ED9               	movwf	fsr2l,c
  3820  00110E  0100               	movlb	0	; () banked
  3821  001110  0E00               	movlw	high _response	;volatile
  3822  001112  20F4               	addwfc	prodh,w,c
  3823  001114  6EDA               	movwf	fsr2h,c
  3824  001116  0E00               	movlw	0
  3825  001118  6EDF               	movwf	indf2,c
  3826                           
  3827                           ; BSR set to: 0
  3828  00111A  2A10               	incf	clearResponse@i,f,c
  3829  00111C                     L16:
  3830                           
  3831                           ; BSR set to: 0
  3832  00111C  0E7C               	movlw	124
  3833  00111E  6410               	cpfsgt	clearResponse@i,c
  3834  001120  D7F0               	goto	l1779
  3835                           
  3836                           ; BSR set to: 0
  3837  001122  0012               	return	
  3838  001124                     __end_of_clearResponse:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           postinc0	equ	0xFEE
  3847                           wreg	equ	0xFE8
  3848                           indf1	equ	0xFE7
  3849                           postinc1	equ	0xFE6
  3850                           postdec1	equ	0xFE5
  3851                           fsr1h	equ	0xFE2
  3852                           fsr1l	equ	0xFE1
  3853                           indf2	equ	0xFDF
  3854                           postinc2	equ	0xFDE
  3855                           postdec2	equ	0xFDD
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _checkCRC *****************
  3861 ;; Defined at:
  3862 ;;		line 573 in file "modbus.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;		None
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  i               2   26[COMRAM] int 
  3867 ;;  crc             2   24[COMRAM] unsigned int 
  3868 ;;  j               2   22[COMRAM] int 
  3869 ;;  crcLow          2   20[COMRAM] unsigned int 
  3870 ;;  crcHigh         2   18[COMRAM] unsigned int 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      unsigned char 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;Total ram usage:       14 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    2
  3887 ;; This function calls:
  3888 ;;		Nothing
  3889 ;; This function is called by:
  3890 ;;		_decodeIt
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text11
  3895  000DD4                     __ptext11:
  3896                           	opt stack 0
  3897  000DD4                     _checkCRC:
  3898                           	opt stack 27
  3899                           
  3900                           ;modbus.c: 574: unsigned int crc = 0xFFFF;
  3901                           
  3902                           ;incstack = 0
  3903                           ;incstack = 0
  3904  000DD4  6819               	setf	checkCRC@crc,c
  3905  000DD6  681A               	setf	checkCRC@crc+1,c
  3906                           
  3907                           ;modbus.c: 575: unsigned int crcHigh = 0;
  3908  000DD8  0E00               	movlw	0
  3909  000DDA  6E14               	movwf	checkCRC@crcHigh+1,c
  3910  000DDC  0E00               	movlw	0
  3911  000DDE  6E13               	movwf	checkCRC@crcHigh,c
  3912                           
  3913                           ;modbus.c: 576: unsigned int crcLow = 0;
  3914  000DE0  0E00               	movlw	0
  3915  000DE2  6E16               	movwf	checkCRC@crcLow+1,c
  3916  000DE4  0E00               	movlw	0
  3917  000DE6  6E15               	movwf	checkCRC@crcLow,c
  3918                           
  3919                           ;modbus.c: 577: int i,j = 0;
  3920  000DE8  0E00               	movlw	0
  3921  000DEA  6E18               	movwf	checkCRC@j+1,c
  3922  000DEC  0E00               	movlw	0
  3923  000DEE  6E17               	movwf	checkCRC@j,c
  3924                           
  3925                           ;modbus.c: 579: for(i=0;i<messageLength-2;i++){
  3926  000DF0  0E00               	movlw	0
  3927  000DF2  6E1C               	movwf	checkCRC@i+1,c
  3928  000DF4  0E00               	movlw	0
  3929  000DF6  6E1B               	movwf	checkCRC@i,c
  3930  000DF8  D027               	goto	l1807
  3931  000DFA                     l1789:
  3932                           
  3933                           ;modbus.c: 580: crc ^= received[i];
  3934  000DFA  0101               	movlb	1	; () banked
  3935  000DFC  0E00               	movlw	low _received	;volatile
  3936  000DFE  241B               	addwf	checkCRC@i,w,c
  3937  000E00  6ED9               	movwf	fsr2l,c
  3938  000E02  0101               	movlb	1	; () banked
  3939  000E04  0E01               	movlw	high _received	;volatile
  3940  000E06  201C               	addwfc	checkCRC@i+1,w,c
  3941  000E08  6EDA               	movwf	fsr2h,c
  3942  000E0A  50DF               	movf	indf2,w,c
  3943  000E0C  6E0F               	movwf	??_checkCRC& (0+255),c
  3944  000E0E  500F               	movf	??_checkCRC,w,c
  3945  000E10  1A19               	xorwf	checkCRC@crc,f,c
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;modbus.c: 581: for(j=8; j!=0; j--){
  3949  000E12  0E00               	movlw	0
  3950  000E14  6E18               	movwf	checkCRC@j+1,c
  3951  000E16  0E08               	movlw	8
  3952  000E18  6E17               	movwf	checkCRC@j,c
  3953  000E1A                     
  3954                           ; BSR set to: 1
  3955  000E1A  5018               	movf	checkCRC@j+1,w,c
  3956  000E1C  1017               	iorwf	checkCRC@j,w,c
  3957  000E1E  B4D8               	btfsc	status,2,c
  3958  000E20  D011               	goto	l1805
  3959                           
  3960                           ;modbus.c: 582: if((crc & 0x0001) != 0){
  3961                           
  3962                           ; BSR set to: 1
  3963  000E22  A019               	btfss	checkCRC@crc,0,c
  3964  000E24  D008               	goto	l1801
  3965                           
  3966                           ;modbus.c: 583: crc >>= 1;
  3967  000E26  90D8               	bcf	status,0,c
  3968  000E28  321A               	rrcf	checkCRC@crc+1,f,c
  3969  000E2A  3219               	rrcf	checkCRC@crc,f,c
  3970                           
  3971                           ;modbus.c: 584: crc ^= 0xA001;
  3972  000E2C  0E01               	movlw	1
  3973  000E2E  1A19               	xorwf	checkCRC@crc,f,c
  3974  000E30  0EA0               	movlw	160
  3975  000E32  1A1A               	xorwf	checkCRC@crc+1,f,c
  3976                           
  3977                           ;modbus.c: 585: }
  3978  000E34  D003               	goto	l297
  3979  000E36                     l1801:
  3980                           
  3981                           ;modbus.c: 586: else{
  3982                           ;modbus.c: 587: crc >>= 1;
  3983  000E36  90D8               	bcf	status,0,c
  3984  000E38  321A               	rrcf	checkCRC@crc+1,f,c
  3985  000E3A  3219               	rrcf	checkCRC@crc,f,c
  3986  000E3C                     l297:
  3987  000E3C  0617               	decf	checkCRC@j,f,c
  3988  000E3E  A0D8               	btfss	status,0,c
  3989  000E40  0618               	decf	checkCRC@j+1,f,c
  3990  000E42  D7EB               	goto	L17
  3991  000E44                     l1805:
  3992  000E44  4A1B               	infsnz	checkCRC@i,f,c
  3993  000E46  2A1C               	incf	checkCRC@i+1,f,c
  3994  000E48                     l1807:
  3995  000E48  0EFE               	movlw	254
  3996  000E4A  243C               	addwf	_messageLength,w,c	;volatile
  3997  000E4C  6E0F               	movwf	??_checkCRC& (0+255),c
  3998  000E4E  6A10               	clrf	(??_checkCRC+1)& (0+255),c
  3999  000E50  0EFF               	movlw	255
  4000  000E52  2210               	addwfc	(??_checkCRC+1)& (0+255),f,c
  4001  000E54  501C               	movf	checkCRC@i+1,w,c
  4002  000E56  0A80               	xorlw	128
  4003  000E58  6E11               	movwf	(??_checkCRC+2)& (0+255),c
  4004  000E5A  500F               	movf	??_checkCRC,w,c
  4005  000E5C  5C1B               	subwf	checkCRC@i,w,c
  4006  000E5E  5010               	movf	??_checkCRC+1,w,c
  4007  000E60  0A80               	xorlw	128
  4008  000E62  5811               	subwfb	(??_checkCRC+2)& (0+255),w,c
  4009  000E64  A0D8               	btfss	status,0,c
  4010  000E66  D7C9               	goto	l1789
  4011                           
  4012                           ;modbus.c: 588: }
  4013                           ;modbus.c: 589: }
  4014                           ;modbus.c: 590: }
  4015                           ;modbus.c: 592: crcHigh = (crc & 0x00FF);
  4016  000E68  5019               	movf	checkCRC@crc,w,c
  4017  000E6A  6E13               	movwf	checkCRC@crcHigh,c
  4018  000E6C  6A14               	clrf	checkCRC@crcHigh+1,c
  4019                           
  4020                           ;modbus.c: 593: crcLow = (crc & 0xFF00) >>8;
  4021  000E6E  C01A  F00F         	movff	checkCRC@crc+1,??_checkCRC
  4022  000E72  C00F  F010         	movff	??_checkCRC,??_checkCRC+1
  4023  000E76  6A11               	clrf	(??_checkCRC+2)& (0+255),c
  4024  000E78  5010               	movf	??_checkCRC+1,w,c
  4025  000E7A  6E15               	movwf	checkCRC@crcLow,c
  4026  000E7C  6A16               	clrf	checkCRC@crcLow+1,c
  4027                           
  4028                           ;modbus.c: 594: if((crcHigh == received[i])&&(crcLow == received[i+1]))
  4029  000E7E  0101               	movlb	1	; () banked
  4030  000E80  0E00               	movlw	low _received	;volatile
  4031  000E82  241B               	addwf	checkCRC@i,w,c
  4032  000E84  6ED9               	movwf	fsr2l,c
  4033  000E86  0101               	movlb	1	; () banked
  4034  000E88  0E01               	movlw	high _received	;volatile
  4035  000E8A  201C               	addwfc	checkCRC@i+1,w,c
  4036  000E8C  6EDA               	movwf	fsr2h,c
  4037  000E8E  50DF               	movf	indf2,w,c
  4038  000E90  6E0F               	movwf	??_checkCRC& (0+255),c
  4039  000E92  6A10               	clrf	(??_checkCRC+1)& (0+255),c
  4040  000E94  5014               	movf	checkCRC@crcHigh+1,w,c
  4041  000E96  1810               	xorwf	??_checkCRC+1,w,c
  4042  000E98  E102               	bnz	u955
  4043  000E9A  5013               	movf	checkCRC@crcHigh,w,c
  4044  000E9C  180F               	xorwf	??_checkCRC,w,c
  4045  000E9E                     u955:
  4046  000E9E  A4D8               	btfss	status,2,c
  4047  000EA0  D01A               	goto	l1821
  4048                           
  4049                           ; BSR set to: 1
  4050  000EA2  0E01               	movlw	1
  4051  000EA4  241B               	addwf	checkCRC@i,w,c
  4052  000EA6  6E0F               	movwf	??_checkCRC& (0+255),c
  4053  000EA8  0E00               	movlw	0
  4054  000EAA  201C               	addwfc	checkCRC@i+1,w,c
  4055  000EAC  6E10               	movwf	(??_checkCRC+1)& (0+255),c
  4056  000EAE  0101               	movlb	1	; () banked
  4057  000EB0  0E00               	movlw	low _received	;volatile
  4058  000EB2  240F               	addwf	??_checkCRC,w,c
  4059  000EB4  6ED9               	movwf	fsr2l,c
  4060  000EB6  0101               	movlb	1	; () banked
  4061  000EB8  0E01               	movlw	high _received	;volatile
  4062  000EBA  2010               	addwfc	??_checkCRC+1,w,c
  4063  000EBC  6EDA               	movwf	fsr2h,c
  4064  000EBE  50DF               	movf	indf2,w,c
  4065  000EC0  6E11               	movwf	(??_checkCRC+2)& (0+255),c
  4066  000EC2  6A12               	clrf	(??_checkCRC+3)& (0+255),c
  4067  000EC4  5016               	movf	checkCRC@crcLow+1,w,c
  4068  000EC6  1812               	xorwf	??_checkCRC+3,w,c
  4069  000EC8  E102               	bnz	u965
  4070  000ECA  5015               	movf	checkCRC@crcLow,w,c
  4071  000ECC  1811               	xorwf	??_checkCRC+2,w,c
  4072  000ECE                     u965:
  4073  000ECE  A4D8               	btfss	status,2,c
  4074  000ED0  D002               	goto	l1821
  4075                           
  4076                           ; BSR set to: 1
  4077                           ;modbus.c: 595: {
  4078                           ;modbus.c: 596: return 1;
  4079  000ED2  0E01               	movlw	1
  4080  000ED4  D001               	goto	l300
  4081  000ED6                     l1821:
  4082                           
  4083                           ; BSR set to: 1
  4084                           ;modbus.c: 598: else{
  4085                           ;modbus.c: 599: return 0;
  4086  000ED6  0E00               	movlw	0
  4087  000ED8                     l300:
  4088                           
  4089                           ; BSR set to: 1
  4090  000ED8  0012               	return	
  4091  000EDA                     __end_of_checkCRC:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodh	equ	0xFF4
  4098                           prodl	equ	0xFF3
  4099                           postinc0	equ	0xFEE
  4100                           wreg	equ	0xFE8
  4101                           indf1	equ	0xFE7
  4102                           postinc1	equ	0xFE6
  4103                           postdec1	equ	0xFE5
  4104                           fsr1h	equ	0xFE2
  4105                           fsr1l	equ	0xFE1
  4106                           indf2	equ	0xFDF
  4107                           postinc2	equ	0xFDE
  4108                           postdec2	equ	0xFDD
  4109                           fsr2h	equ	0xFDA
  4110                           fsr2l	equ	0xFD9
  4111                           status	equ	0xFD8
  4112                           
  4113 ;; *************** function _ConfigInterrupts *****************
  4114 ;; Defined at:
  4115 ;;		line 121 in file "system.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;		None               void
  4122 ;; Registers used:
  4123 ;;		None
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    2
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text12
  4144  00116C                     __ptext12:
  4145                           	opt stack 0
  4146  00116C                     _ConfigInterrupts:
  4147                           	opt stack 28
  4148                           
  4149                           ;system.c: 122: RCONbits.IPEN = 0;
  4150                           
  4151                           ; BSR set to: 1
  4152                           ;incstack = 0
  4153                           ;incstack = 0
  4154  00116C  9ED0               	bcf	4048,7,c	;volatile
  4155                           
  4156                           ;system.c: 123: INTCONbits.GIE = 1;
  4157  00116E  8EF2               	bsf	intcon,7,c	;volatile
  4158                           
  4159                           ;system.c: 124: INTCONbits.PEIE = 1;
  4160  001170  8CF2               	bsf	intcon,6,c	;volatile
  4161  001172  0012               	return	
  4162  001174                     __end_of_ConfigInterrupts:
  4163                           	opt stack 0
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           intcon	equ	0xFF2
  4171                           postinc0	equ	0xFEE
  4172                           wreg	equ	0xFE8
  4173                           indf1	equ	0xFE7
  4174                           postinc1	equ	0xFE6
  4175                           postdec1	equ	0xFE5
  4176                           fsr1h	equ	0xFE2
  4177                           fsr1l	equ	0xFE1
  4178                           indf2	equ	0xFDF
  4179                           postinc2	equ	0xFDE
  4180                           postdec2	equ	0xFDD
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function _OpnUSART *****************
  4186 ;; Defined at:
  4187 ;;		line 24 in file "system.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  spbrg           4   15[COMRAM] unsigned long 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;		None               void
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;Total ram usage:        5 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    3
  4208 ;; This function calls:
  4209 ;;		_ClsUSART
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text13
  4216  001046                     __ptext13:
  4217                           	opt stack 0
  4218  001046                     _OpnUSART:
  4219                           	opt stack 27
  4220                           
  4221                           ;system.c: 29: unsigned long spbrg = 0;
  4222                           
  4223                           ;incstack = 0
  4224                           ;incstack = 0
  4225  001046  0E00               	movlw	0
  4226  001048  6E10               	movwf	OpnUSART@spbrg,c
  4227  00104A  0E00               	movlw	0
  4228  00104C  6E11               	movwf	OpnUSART@spbrg+1,c
  4229  00104E  0E00               	movlw	0
  4230  001050  6E12               	movwf	OpnUSART@spbrg+2,c
  4231  001052  0E00               	movlw	0
  4232  001054  6E13               	movwf	OpnUSART@spbrg+3,c
  4233                           
  4234                           ;system.c: 31: spbrg = 10000000L/9600;
  4235  001056  0E11               	movlw	17
  4236  001058  6E10               	movwf	OpnUSART@spbrg,c
  4237  00105A  0E04               	movlw	4
  4238  00105C  6E11               	movwf	OpnUSART@spbrg+1,c
  4239  00105E  0E00               	movlw	0
  4240  001060  6E12               	movwf	OpnUSART@spbrg+2,c
  4241  001062  0E00               	movlw	0
  4242  001064  6E13               	movwf	OpnUSART@spbrg+3,c
  4243                           
  4244                           ;system.c: 32: spbrg /= 64;
  4245  001066  0E06               	movlw	6
  4246  001068  6E0F               	movwf	??_OpnUSART& (0+255),c
  4247  00106A                     u795:
  4248  00106A  90D8               	bcf	status,0,c
  4249  00106C  3213               	rrcf	OpnUSART@spbrg+3,f,c
  4250  00106E  3212               	rrcf	OpnUSART@spbrg+2,f,c
  4251  001070  3211               	rrcf	OpnUSART@spbrg+1,f,c
  4252  001072  3210               	rrcf	OpnUSART@spbrg,f,c
  4253  001074  2E0F               	decfsz	??_OpnUSART& (0+255),f,c
  4254  001076  D7F9               	goto	u795
  4255                           
  4256                           ;system.c: 33: spbrg -= 1;
  4257  001078  0610               	decf	OpnUSART@spbrg,f,c
  4258  00107A  0E00               	movlw	0
  4259  00107C  5A11               	subwfb	OpnUSART@spbrg+1,f,c
  4260  00107E  5A12               	subwfb	OpnUSART@spbrg+2,f,c
  4261  001080  5A13               	subwfb	OpnUSART@spbrg+3,f,c
  4262                           
  4263                           ;system.c: 34: ClsUSART();
  4264  001082  ECAB  F008         	call	_ClsUSART	;wreg free
  4265                           
  4266                           ;system.c: 35: TRISCbits.TRISC1 = 0;
  4267  001086  9294               	bcf	3988,1,c	;volatile
  4268                           
  4269                           ;system.c: 36: LATCbits.LATC1 = 0;
  4270  001088  928B               	bcf	3979,1,c	;volatile
  4271                           
  4272                           ;system.c: 62: TXSTA1 = 0;
  4273  00108A  0E00               	movlw	0
  4274  00108C  6EAC               	movwf	4012,c	;volatile
  4275                           
  4276                           ;system.c: 63: RCSTA1 = 0;
  4277  00108E  0E00               	movlw	0
  4278  001090  6EAB               	movwf	4011,c	;volatile
  4279                           
  4280                           ;system.c: 65: TRISCbits.TRISC6 = 0;
  4281  001092  9C94               	bcf	3988,6,c	;volatile
  4282                           
  4283                           ;system.c: 66: TRISCbits.TRISC7 = 1;
  4284  001094  8E94               	bsf	3988,7,c	;volatile
  4285                           
  4286                           ;system.c: 68: TXSTA1bits.SYNC = 0;
  4287  001096  98AC               	bcf	4012,4,c	;volatile
  4288                           
  4289                           ;system.c: 69: TXSTA1bits.TX9 = 0;
  4290  001098  9CAC               	bcf	4012,6,c	;volatile
  4291                           
  4292                           ;system.c: 70: TXSTA1bits.SENDB = 0;
  4293  00109A  96AC               	bcf	4012,3,c	;volatile
  4294                           
  4295                           ;system.c: 71: TXSTA1bits.BRGH = 0;
  4296  00109C  94AC               	bcf	4012,2,c	;volatile
  4297                           
  4298                           ;system.c: 73: RCSTA1bits.CREN = 1;
  4299  00109E  88AB               	bsf	4011,4,c	;volatile
  4300                           
  4301                           ;system.c: 74: RCSTA1bits.RX9 = 0;
  4302  0010A0  9CAB               	bcf	4011,6,c	;volatile
  4303                           
  4304                           ;system.c: 76: PIE1bits.RCIE = 1;
  4305  0010A2  8A9D               	bsf	3997,5,c	;volatile
  4306                           
  4307                           ;system.c: 77: PIE1bits.TXIE = 0;
  4308  0010A4  989D               	bcf	3997,4,c	;volatile
  4309                           
  4310                           ;system.c: 79: BAUDCON1bits.BRG16 = 0;
  4311  0010A6  967E               	bcf	3966,3,c	;volatile
  4312                           
  4313                           ;system.c: 80: SPBRG = spbrg;
  4314  0010A8  C010  FFAF         	movff	OpnUSART@spbrg,4015	;volatile
  4315                           
  4316                           ;system.c: 82: TXSTA1bits.TXEN = 1;
  4317  0010AC  8AAC               	bsf	4012,5,c	;volatile
  4318                           
  4319                           ;system.c: 83: RCSTA1bits.SPEN = 1;
  4320  0010AE  8EAB               	bsf	4011,7,c	;volatile
  4321  0010B0  0012               	return	
  4322  0010B2                     __end_of_OpnUSART:
  4323                           	opt stack 0
  4324                           tblptru	equ	0xFF8
  4325                           tblptrh	equ	0xFF7
  4326                           tblptrl	equ	0xFF6
  4327                           tablat	equ	0xFF5
  4328                           prodh	equ	0xFF4
  4329                           prodl	equ	0xFF3
  4330                           intcon	equ	0xFF2
  4331                           postinc0	equ	0xFEE
  4332                           wreg	equ	0xFE8
  4333                           indf1	equ	0xFE7
  4334                           postinc1	equ	0xFE6
  4335                           postdec1	equ	0xFE5
  4336                           fsr1h	equ	0xFE2
  4337                           fsr1l	equ	0xFE1
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function _ClsUSART *****************
  4346 ;; Defined at:
  4347 ;;		line 88 in file "system.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;		None
  4352 ;; Return value:  Size  Location     Type
  4353 ;;		None               void
  4354 ;; Registers used:
  4355 ;;		wreg, status,2, status,0
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;Total ram usage:        0 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    2
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_OpnUSART
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text14
  4376  001156                     __ptext14:
  4377                           	opt stack 0
  4378  001156                     _ClsUSART:
  4379                           	opt stack 27
  4380                           
  4381                           ;system.c: 95: RCSTA1 &= 0b01001111;
  4382                           
  4383                           ;incstack = 0
  4384                           ;incstack = 0
  4385  001156  0E4F               	movlw	79
  4386  001158  16AB               	andwf	4011,f,c	;volatile
  4387                           
  4388                           ;system.c: 96: TXSTA1bits.TXEN = 0;
  4389  00115A  9AAC               	bcf	4012,5,c	;volatile
  4390                           
  4391                           ;system.c: 97: PIE1 &= 0b11001111;
  4392  00115C  0ECF               	movlw	207
  4393  00115E  169D               	andwf	3997,f,c	;volatile
  4394  001160  0012               	return	
  4395  001162                     __end_of_ClsUSART:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           postinc0	equ	0xFEE
  4405                           wreg	equ	0xFE8
  4406                           indf1	equ	0xFE7
  4407                           postinc1	equ	0xFE6
  4408                           postdec1	equ	0xFE5
  4409                           fsr1h	equ	0xFE2
  4410                           fsr1l	equ	0xFE1
  4411                           indf2	equ	0xFDF
  4412                           postinc2	equ	0xFDE
  4413                           postdec2	equ	0xFDD
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function _isr *****************
  4419 ;; Defined at:
  4420 ;;		line 28 in file "interrupts.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;		None
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;		None
  4425 ;; Return value:  Size  Location     Type
  4426 ;;		None               void
  4427 ;; Registers used:
  4428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:       14 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    1
  4441 ;; This function calls:
  4442 ;;		_OpenTmr0
  4443 ;;		_modbusDelay
  4444 ;; This function is called by:
  4445 ;;		Interrupt level 2
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	intcode
  4450  000008                     __pintcode:
  4451                           	opt stack 0
  4452  000008                     _isr:
  4453                           	opt stack 26
  4454                           
  4455                           ;incstack = 0
  4456  000008  CFFA F001          	movff	pclath,??_isr
  4457  00000C  CFFB F002          	movff	pclatu,??_isr+1
  4458  000010  ED09  F005         	call	int_func,f	;refresh shadow registers
  4459                           pclatu	equ	0xFFB
  4460                           pclath	equ	0xFFA
  4461                           tblptru	equ	0xFF8
  4462                           tblptrh	equ	0xFF7
  4463                           tblptrl	equ	0xFF6
  4464                           tablat	equ	0xFF5
  4465                           prodh	equ	0xFF4
  4466                           prodl	equ	0xFF3
  4467                           intcon	equ	0xFF2
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           indf1	equ	0xFE7
  4471                           postinc1	equ	0xFE6
  4472                           postdec1	equ	0xFE5
  4473                           fsr1h	equ	0xFE2
  4474                           fsr1l	equ	0xFE1
  4475                           indf2	equ	0xFDF
  4476                           postinc2	equ	0xFDE
  4477                           postdec2	equ	0xFDD
  4478                           fsr2h	equ	0xFDA
  4479                           fsr2l	equ	0xFD9
  4480                           status	equ	0xFD8
  4481                           
  4482                           	psect	intcode_body
  4483  000A12                     __pintcode_body:
  4484                           	opt stack 26
  4485  000A12                     int_func:
  4486                           	opt stack 26
  4487  000A12  0006               	pop		; remove dummy address from shadow register refresh
  4488  000A14  CFE9 F003          	movff	fsr0l,??_isr+2
  4489  000A18  CFEA F004          	movff	fsr0h,??_isr+3
  4490  000A1C  CFE1 F005          	movff	fsr1l,??_isr+4
  4491  000A20  CFE2 F006          	movff	fsr1h,??_isr+5
  4492  000A24  CFD9 F007          	movff	fsr2l,??_isr+6
  4493  000A28  CFDA F008          	movff	fsr2h,??_isr+7
  4494  000A2C  CFF3 F009          	movff	prodl,??_isr+8
  4495  000A30  CFF4 F00A          	movff	prodh,??_isr+9
  4496  000A34  CFF6 F00B          	movff	tblptrl,??_isr+10
  4497  000A38  CFF7 F00C          	movff	tblptrh,??_isr+11
  4498  000A3C  CFF8 F00D          	movff	tblptru,??_isr+12
  4499  000A40  CFF5 F00E          	movff	tablat,??_isr+13
  4500  000A44                     
  4501                           ;interrupts.c: 29: if(PIR1bits.RCIF){
  4502  000A44  AA9E               	btfss	3998,5,c	;volatile
  4503  000A46  D001               	goto	i2u146_41
  4504  000A48  D001               	goto	i2u146_40
  4505  000A4A                     i2u146_41:
  4506  000A4A  D043               	goto	i2l31
  4507  000A4C                     i2u146_40:
  4508  000A4C                     
  4509                           ;interrupts.c: 30: if((!endOfMessage)&&(!newMessage)){
  4510  000A4C  663B               	tstfsz	_endOfMessage,c	;volatile
  4511  000A4E  D001               	goto	i2u147_41
  4512  000A50  D001               	goto	i2u147_40
  4513  000A52                     i2u147_41:
  4514  000A52  D019               	goto	i2l2409
  4515  000A54                     i2u147_40:
  4516  000A54  6640               	tstfsz	_newMessage,c	;volatile
  4517  000A56  D001               	goto	i2u148_41
  4518  000A58  D001               	goto	i2u148_40
  4519  000A5A                     i2u148_41:
  4520  000A5A  D015               	goto	i2l2409
  4521  000A5C                     i2u148_40:
  4522  000A5C                     
  4523                           ;interrupts.c: 31: if(PIR1bits.TXIF){
  4524  000A5C  A89E               	btfss	3998,4,c	;volatile
  4525  000A5E  D001               	goto	i2u149_41
  4526  000A60  D001               	goto	i2u149_40
  4527  000A62                     i2u149_41:
  4528  000A62  D011               	goto	i2l2409
  4529  000A64                     i2u149_40:
  4530  000A64                     
  4531                           ;interrupts.c: 32: received[z] = RCREG1;
  4532  000A64  503F               	movf	_z,w,c	;volatile
  4533  000A66  0D01               	mullw	1
  4534  000A68  0101               	movlb	1	; () banked
  4535  000A6A  0E00               	movlw	low _received	;volatile
  4536  000A6C  24F3               	addwf	prodl,w,c
  4537  000A6E  6ED9               	movwf	fsr2l,c
  4538  000A70  0101               	movlb	1	; () banked
  4539  000A72  0E01               	movlw	high _received	;volatile
  4540  000A74  20F4               	addwfc	prodh,w,c
  4541  000A76  6EDA               	movwf	fsr2h,c
  4542  000A78  CFAE FFDF          	movff	4014,indf2	;volatile
  4543  000A7C                     
  4544                           ; BSR set to: 1
  4545                           ;interrupts.c: 33: z++;
  4546  000A7C  2A3F               	incf	_z,f,c	;volatile
  4547  000A7E                     
  4548                           ; BSR set to: 1
  4549                           ;interrupts.c: 34: timerCount = 0;
  4550  000A7E  0E00               	movlw	0
  4551  000A80  6E3E               	movwf	_timerCount,c	;volatile
  4552  000A82  D001               	goto	i2l2409
  4553  000A84                     
  4554                           ; BSR set to: 1
  4555  000A84  D000               	goto	i2l2409
  4556  000A86                     i2l2409:
  4557                           
  4558                           ;interrupts.c: 35: }
  4559                           ;interrupts.c: 36: }
  4560                           ;interrupts.c: 37: if(newMessage){
  4561  000A86  5040               	movf	_newMessage,w,c	;volatile
  4562  000A88  B4D8               	btfsc	status,2,c
  4563  000A8A  D001               	goto	i2u150_41
  4564  000A8C  D001               	goto	i2u150_40
  4565  000A8E                     i2u150_41:
  4566  000A8E  D056               	goto	i2l36
  4567  000A90                     i2u150_40:
  4568  000A90                     
  4569                           ;interrupts.c: 38: OpenTmr0();
  4570  000A90  EC9F  F008         	call	_OpenTmr0	;wreg free
  4571  000A94                     
  4572                           ;interrupts.c: 39: if(PIR1bits.TXIF){
  4573  000A94  A89E               	btfss	3998,4,c	;volatile
  4574  000A96  D001               	goto	i2u151_41
  4575  000A98  D001               	goto	i2u151_40
  4576  000A9A                     i2u151_41:
  4577  000A9A  D050               	goto	i2l36
  4578  000A9C                     i2u151_40:
  4579  000A9C                     
  4580                           ;interrupts.c: 40: received[z] = RCREG1;
  4581  000A9C  503F               	movf	_z,w,c	;volatile
  4582  000A9E  0D01               	mullw	1
  4583  000AA0  0101               	movlb	1	; () banked
  4584  000AA2  0E00               	movlw	low _received	;volatile
  4585  000AA4  24F3               	addwf	prodl,w,c
  4586  000AA6  6ED9               	movwf	fsr2l,c
  4587  000AA8  0101               	movlb	1	; () banked
  4588  000AAA  0E01               	movlw	high _received	;volatile
  4589  000AAC  20F4               	addwfc	prodh,w,c
  4590  000AAE  6EDA               	movwf	fsr2h,c
  4591  000AB0  CFAE FFDF          	movff	4014,indf2	;volatile
  4592  000AB4                     
  4593                           ; BSR set to: 1
  4594                           ;interrupts.c: 41: z++;
  4595  000AB4  2A3F               	incf	_z,f,c	;volatile
  4596  000AB6                     
  4597                           ; BSR set to: 1
  4598                           ;interrupts.c: 42: newMessage = 0;
  4599  000AB6  0E00               	movlw	0
  4600  000AB8  6E40               	movwf	_newMessage,c	;volatile
  4601  000ABA                     
  4602                           ; BSR set to: 1
  4603                           ;interrupts.c: 43: endOfMessage = 0;
  4604  000ABA  0E00               	movlw	0
  4605  000ABC  6E3B               	movwf	_endOfMessage,c	;volatile
  4606  000ABE                     
  4607                           ; BSR set to: 1
  4608                           ;interrupts.c: 44: messageLength = 0;
  4609  000ABE  0E00               	movlw	0
  4610  000AC0  6E3C               	movwf	_messageLength,c	;volatile
  4611  000AC2                     
  4612                           ; BSR set to: 1
  4613                           ;interrupts.c: 45: modbusMessage = 0;
  4614  000AC2  0E00               	movlw	0
  4615  000AC4  6E3D               	movwf	_modbusMessage,c	;volatile
  4616  000AC6                     
  4617                           ; BSR set to: 1
  4618                           ;interrupts.c: 46: timerCount = 0;
  4619  000AC6  0E00               	movlw	0
  4620  000AC8  6E3E               	movwf	_timerCount,c	;volatile
  4621  000ACA  D038               	goto	i2l36
  4622  000ACC                     
  4623                           ; BSR set to: 1
  4624                           ;interrupts.c: 47: return;
  4625  000ACC  D037               	goto	i2l36
  4626  000ACE                     
  4627                           ; BSR set to: 1
  4628  000ACE  D036               	goto	i2l36
  4629  000AD0                     
  4630                           ; BSR set to: 1
  4631                           ;interrupts.c: 48: }
  4632                           ;interrupts.c: 49: }
  4633                           ;interrupts.c: 50: }
  4634  000AD0  D035               	goto	i2l36
  4635  000AD2                     i2l31:
  4636                           
  4637                           ;interrupts.c: 51: else if(INTCONbits.TMR0IF){
  4638  000AD2  A4F2               	btfss	intcon,2,c	;volatile
  4639  000AD4  D001               	goto	i2u152_41
  4640  000AD6  D001               	goto	i2u152_40
  4641  000AD8                     i2u152_41:
  4642  000AD8  D031               	goto	i2l36
  4643  000ADA                     i2u152_40:
  4644  000ADA                     
  4645                           ;interrupts.c: 52: modbusDelay();
  4646  000ADA  ECB1  F008         	call	_modbusDelay	;wreg free
  4647  000ADE                     
  4648                           ;interrupts.c: 53: timerCount++;
  4649  000ADE  2A3E               	incf	_timerCount,f,c	;volatile
  4650  000AE0                     
  4651                           ;interrupts.c: 54: if(timerCount > 4){
  4652  000AE0  0E04               	movlw	4
  4653  000AE2  643E               	cpfsgt	_timerCount,c	;volatile
  4654  000AE4  D001               	goto	i2u153_41
  4655  000AE6  D001               	goto	i2u153_40
  4656  000AE8                     i2u153_41:
  4657  000AE8  D026               	goto	i2l2453
  4658  000AEA                     i2u153_40:
  4659  000AEA                     
  4660                           ;interrupts.c: 55: endOfMessage = 1;
  4661  000AEA  0E01               	movlw	1
  4662  000AEC  6E3B               	movwf	_endOfMessage,c	;volatile
  4663                           
  4664                           ;interrupts.c: 56: newMessage = 1;
  4665  000AEE  0E01               	movlw	1
  4666  000AF0  6E40               	movwf	_newMessage,c	;volatile
  4667  000AF2                     
  4668                           ;interrupts.c: 57: messageLength = z;
  4669  000AF2  C03F  F03C         	movff	_z,_messageLength	;volatile
  4670                           
  4671                           ;interrupts.c: 58: modbusMessage = 1;
  4672  000AF6  0E01               	movlw	1
  4673  000AF8  6E3D               	movwf	_modbusMessage,c	;volatile
  4674  000AFA                     
  4675                           ;interrupts.c: 59: for(z=(messageLength);z!=125;z++){
  4676  000AFA  C03C  F03F         	movff	_messageLength,_z	;volatile
  4677  000AFE  D00E               	goto	i2l2447
  4678  000B00                     i2l2443:
  4679                           
  4680                           ;interrupts.c: 60: received[z] = 0;
  4681  000B00  503F               	movf	_z,w,c	;volatile
  4682  000B02  0D01               	mullw	1
  4683  000B04  0101               	movlb	1	; () banked
  4684  000B06  0E00               	movlw	low _received	;volatile
  4685  000B08  24F3               	addwf	prodl,w,c
  4686  000B0A  6ED9               	movwf	fsr2l,c
  4687  000B0C  0101               	movlb	1	; () banked
  4688  000B0E  0E01               	movlw	high _received	;volatile
  4689  000B10  20F4               	addwfc	prodh,w,c
  4690  000B12  6EDA               	movwf	fsr2h,c
  4691  000B14  0E00               	movlw	0
  4692  000B16  6EDF               	movwf	indf2,c
  4693  000B18                     
  4694                           ; BSR set to: 1
  4695  000B18  2A3F               	incf	_z,f,c	;volatile
  4696  000B1A  D000               	goto	i2l2447
  4697  000B1C                     i2l2447:
  4698  000B1C  503F               	movf	_z,w,c	;volatile
  4699  000B1E  0A7D               	xorlw	125
  4700  000B20  A4D8               	btfss	status,2,c
  4701  000B22  D001               	goto	i2u154_41
  4702  000B24  D001               	goto	i2u154_40
  4703  000B26                     i2u154_41:
  4704  000B26  D7EC               	goto	i2l2443
  4705  000B28                     i2u154_40:
  4706  000B28  D000               	goto	i2l2449
  4707  000B2A                     i2l2449:
  4708                           
  4709                           ;interrupts.c: 61: }
  4710                           ;interrupts.c: 62: z=0;
  4711  000B2A  0E00               	movlw	0
  4712  000B2C  6E3F               	movwf	_z,c	;volatile
  4713  000B2E                     
  4714                           ;interrupts.c: 63: T0CONbits.TMR0ON = 0;
  4715  000B2E  9ED5               	bcf	4053,7,c	;volatile
  4716                           
  4717                           ;interrupts.c: 64: timerCount = 0;
  4718  000B30  0E00               	movlw	0
  4719  000B32  6E3E               	movwf	_timerCount,c	;volatile
  4720  000B34  D000               	goto	i2l2453
  4721  000B36                     i2l2453:
  4722                           
  4723                           ;interrupts.c: 65: }
  4724                           ;interrupts.c: 66: INTCONbits.TMR0IF = 0;
  4725  000B36  94F2               	bcf	intcon,2,c	;volatile
  4726  000B38  D001               	goto	i2l36
  4727  000B3A  D000               	goto	i2l36
  4728  000B3C                     i2l36:
  4729  000B3C  C00E  FFF5         	movff	??_isr+13,tablat
  4730  000B40  C00D  FFF8         	movff	??_isr+12,tblptru
  4731  000B44  C00C  FFF7         	movff	??_isr+11,tblptrh
  4732  000B48  C00B  FFF6         	movff	??_isr+10,tblptrl
  4733  000B4C  C00A  FFF4         	movff	??_isr+9,prodh
  4734  000B50  C009  FFF3         	movff	??_isr+8,prodl
  4735  000B54  C008  FFDA         	movff	??_isr+7,fsr2h
  4736  000B58  C007  FFD9         	movff	??_isr+6,fsr2l
  4737  000B5C  C006  FFE2         	movff	??_isr+5,fsr1h
  4738  000B60  C005  FFE1         	movff	??_isr+4,fsr1l
  4739  000B64  C004  FFEA         	movff	??_isr+3,fsr0h
  4740  000B68  C003  FFE9         	movff	??_isr+2,fsr0l
  4741  000B6C  C002  FFFB         	movff	??_isr+1,pclatu
  4742  000B70  C001  FFFA         	movff	??_isr,pclath
  4743  000B74  0011               	retfie		f
  4744  000B76                     __end_of_isr:
  4745                           	opt stack 0
  4746                           pclatu	equ	0xFFB
  4747                           pclath	equ	0xFFA
  4748                           tblptru	equ	0xFF8
  4749                           tblptrh	equ	0xFF7
  4750                           tblptrl	equ	0xFF6
  4751                           tablat	equ	0xFF5
  4752                           prodh	equ	0xFF4
  4753                           prodl	equ	0xFF3
  4754                           intcon	equ	0xFF2
  4755                           postinc0	equ	0xFEE
  4756                           fsr0h	equ	0xFEA
  4757                           fsr0l	equ	0xFE9
  4758                           wreg	equ	0xFE8
  4759                           indf1	equ	0xFE7
  4760                           postinc1	equ	0xFE6
  4761                           postdec1	equ	0xFE5
  4762                           fsr1h	equ	0xFE2
  4763                           fsr1l	equ	0xFE1
  4764                           indf2	equ	0xFDF
  4765                           postinc2	equ	0xFDE
  4766                           postdec2	equ	0xFDD
  4767                           fsr2h	equ	0xFDA
  4768                           fsr2l	equ	0xFD9
  4769                           status	equ	0xFD8
  4770                           
  4771 ;; *************** function _modbusDelay *****************
  4772 ;; Defined at:
  4773 ;;		line 35 in file "modbus.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;		None               void
  4780 ;; Registers used:
  4781 ;;		wreg, status,2
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;Total ram usage:        0 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; This function calls:
  4794 ;;		Nothing
  4795 ;; This function is called by:
  4796 ;;		_isr
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           	psect	text16
  4801  001162                     __ptext16:
  4802                           	opt stack 0
  4803  001162                     _modbusDelay:
  4804                           	opt stack 26
  4805                           
  4806                           ;modbus.c: 37: TMR0H = 0xF5;
  4807                           
  4808                           ;incstack = 0
  4809                           ;incstack = 0
  4810  001162  0EF5               	movlw	245
  4811  001164  6ED7               	movwf	4055,c	;volatile
  4812                           
  4813                           ;modbus.c: 38: TMR0L = 0xD7;
  4814  001166  0ED7               	movlw	215
  4815  001168  6ED6               	movwf	4054,c	;volatile
  4816  00116A  0012               	return	
  4817  00116C                     __end_of_modbusDelay:
  4818                           	opt stack 0
  4819                           pclatu	equ	0xFFB
  4820                           pclath	equ	0xFFA
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           postinc0	equ	0xFEE
  4829                           fsr0h	equ	0xFEA
  4830                           fsr0l	equ	0xFE9
  4831                           wreg	equ	0xFE8
  4832                           indf1	equ	0xFE7
  4833                           postinc1	equ	0xFE6
  4834                           postdec1	equ	0xFE5
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _OpenTmr0 *****************
  4845 ;; Defined at:
  4846 ;;		line 102 in file "system.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, status,2
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_isr
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text17
  4874  00113E                     __ptext17:
  4875                           	opt stack 0
  4876  00113E                     _OpenTmr0:
  4877                           	opt stack 26
  4878                           
  4879                           ;system.c: 103: T0CONbits.TMR0ON = 0;
  4880                           
  4881                           ;incstack = 0
  4882                           ;incstack = 0
  4883  00113E  9ED5               	bcf	4053,7,c	;volatile
  4884                           
  4885                           ;system.c: 104: T0CONbits.T08BIT = 0;
  4886  001140  9CD5               	bcf	4053,6,c	;volatile
  4887                           
  4888                           ;system.c: 105: T0CONbits.T0CS = 0;
  4889  001142  9AD5               	bcf	4053,5,c	;volatile
  4890                           
  4891                           ;system.c: 106: T0CONbits.PSA = 1;
  4892  001144  86D5               	bsf	4053,3,c	;volatile
  4893                           
  4894                           ;system.c: 108: TMR0H = 0xF5;
  4895  001146  0EF5               	movlw	245
  4896  001148  6ED7               	movwf	4055,c	;volatile
  4897                           
  4898                           ;system.c: 109: TMR0L = 0xD7;
  4899  00114A  0ED7               	movlw	215
  4900  00114C  6ED6               	movwf	4054,c	;volatile
  4901                           
  4902                           ;system.c: 111: T0CONbits.TMR0ON = 1;
  4903  00114E  8ED5               	bsf	4053,7,c	;volatile
  4904                           
  4905                           ;system.c: 113: INTCONbits.TMR0IF = 0;
  4906  001150  94F2               	bcf	intcon,2,c	;volatile
  4907                           
  4908                           ;system.c: 114: INTCONbits.TMR0IE = 1;
  4909  001152  8AF2               	bsf	intcon,5,c	;volatile
  4910  001154  0012               	return	
  4911  001156                     __end_of_OpenTmr0:
  4912                           	opt stack 0
  4913  0000                     pclatu	equ	0xFFB
  4914                           pclath	equ	0xFFA
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           postinc0	equ	0xFEE
  4923                           fsr0h	equ	0xFEA
  4924                           fsr0l	equ	0xFE9
  4925                           wreg	equ	0xFE8
  4926                           indf1	equ	0xFE7
  4927                           postinc1	equ	0xFE6
  4928                           postdec1	equ	0xFE5
  4929                           fsr1h	equ	0xFE2
  4930                           fsr1l	equ	0xFE1
  4931                           indf2	equ	0xFDF
  4932                           postinc2	equ	0xFDE
  4933                           postdec2	equ	0xFDD
  4934                           fsr2h	equ	0xFDA
  4935                           fsr2l	equ	0xFD9
  4936                           status	equ	0xFD8
  4937                           pclatu	equ	0xFFB
  4938                           pclath	equ	0xFFA
  4939                           tblptru	equ	0xFF8
  4940                           tblptrh	equ	0xFF7
  4941                           tblptrl	equ	0xFF6
  4942                           tablat	equ	0xFF5
  4943                           prodh	equ	0xFF4
  4944                           prodl	equ	0xFF3
  4945                           intcon	equ	0xFF2
  4946                           postinc0	equ	0xFEE
  4947                           fsr0h	equ	0xFEA
  4948                           fsr0l	equ	0xFE9
  4949                           wreg	equ	0xFE8
  4950                           indf1	equ	0xFE7
  4951                           postinc1	equ	0xFE6
  4952                           postdec1	equ	0xFE5
  4953                           fsr1h	equ	0xFE2
  4954                           fsr1l	equ	0xFE1
  4955                           indf2	equ	0xFDF
  4956                           postinc2	equ	0xFDE
  4957                           postdec2	equ	0xFDD
  4958                           fsr2h	equ	0xFDA
  4959                           fsr2l	equ	0xFD9
  4960                           status	equ	0xFD8
  4961                           
  4962                           	psect	rparam
  4963  0000                     pclatu	equ	0xFFB
  4964                           pclath	equ	0xFFA
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           intcon	equ	0xFF2
  4972                           postinc0	equ	0xFEE
  4973                           fsr0h	equ	0xFEA
  4974                           fsr0l	equ	0xFE9
  4975                           wreg	equ	0xFE8
  4976                           indf1	equ	0xFE7
  4977                           postinc1	equ	0xFE6
  4978                           postdec1	equ	0xFE5
  4979                           fsr1h	equ	0xFE2
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           postdec2	equ	0xFDD
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         405
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      64
    BANK0           160      0     125
    BANK1           256      0     225
    BANK2           256      0      50
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    ?_generateCRC	unsigned int  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _decodeIt->_writeMultipleRegs
    _writeMultipleRegs->_generateCRC
    _writeReg->_generateCRC
    _writeCoil->_generateCRC
    _readInputReg->_generateCRC
    _readReg->_generateCRC
    _readInputCoil->_generateCRC
    _readCoil->_generateCRC

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5816
                           _OpnUSART
                   _ConfigInterrupts
                           _decodeIt
 ---------------------------------------------------------------------------------
 (1) _decodeIt                                             0     0      0    5790
                           _checkCRC
                           _readCoil
                      _readInputCoil
                            _readReg
                       _readInputReg
                          _writeCoil
                           _writeReg
                  _writeMultipleRegs
 ---------------------------------------------------------------------------------
 (2) _writeMultipleRegs                                   29    29      0     714
                                             29 COMRAM    29    29      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeReg                                            18    18      0     589
                                             29 COMRAM    18    18      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeCoil                                           17    17      0     611
                                             29 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputReg                                        13    13      0     811
                                             29 COMRAM    13    13      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readReg                                             13    13      0     811
                                             29 COMRAM    13    13      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputCoil                                       15    15      0     999
                                             29 COMRAM    15    15      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readCoil                                            15    15      0     999
                                             29 COMRAM    15    15      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (3) _generateCRC                                         15    13      2     258
                                             14 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (3) _clearResponse                                        2     2      0      68
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _checkCRC                                            14    14      0     256
                                             14 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpnUSART                                             5     5      0      26
                                             14 COMRAM     5     5      0
                           _ClsUSART
 ---------------------------------------------------------------------------------
 (2) _ClsUSART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
                           _OpenTmr0
                        _modbusDelay
 ---------------------------------------------------------------------------------
 (5) _modbusDelay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _OpenTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpnUSART
     _ClsUSART
   _ConfigInterrupts
   _decodeIt
     _checkCRC
     _readCoil
       _clearResponse
       _generateCRC
     _readInputCoil
       _clearResponse
       _generateCRC
     _readReg
       _clearResponse
       _generateCRC
     _readInputReg
       _clearResponse
       _generateCRC
     _writeCoil
       _clearResponse
       _generateCRC
     _writeReg
       _clearResponse
       _generateCRC
     _writeMultipleRegs
       _clearResponse
       _generateCRC

 _isr (ROOT)
   _OpenTmr0
   _modbusDelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      32       9       19.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E1       7       87.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      7D       5       78.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      40       1       67.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       7       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D0      32        0.0%
DATA                 0      0     1D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Dec 16 09:52:36 2013

                               _z 003F                      generateCRC@i 0018  
                    generateCRC@j 001A                writeReg@wr_Address 0028  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_OSC$HS 000000  
                    __CFG_CP4$OFF 000000                      __CFG_CP5$OFF 000000  
                    __CFG_CP6$OFF 000000                      __CFG_CP7$OFF 000000  
                             l200 0614                               l300 0ED8  
                             l220 09E4                               l208 0DCC  
                             l160 1040                               l209 0DAE  
                             l242 042E                               l219 0A02  
                             l265 0204                               l186 07FC  
                             l275 0CA4                               l276 0C86  
                             l287 0F42                               l297 0E3C  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                             u795 106A                               u955 0E9E  
                             u965 0ECE                               _isr 0008  
                             prod 000FF3                               wreg 000FE8  
                      _TXSTA1bits 000FAC                      __CFG_MODE$MC 000000  
                    __CFG_LVP$OFF 000000                      __CFG_WDT$OFF 000000  
                            l2001 019E                              l2003 01A4  
                            l2021 0222                              l2061 073A  
                            l2053 06CC                              l2133 0552  
                            l2125 04E4                              l2071 078C  
                            l2143 05A4                              l2311 090A  
                            l2091 0818                              l2163 0630  
                            l2325 0984                              l1801 0E36  
                            l1821 0ED6                              l1805 0E44  
                            l2381 0F4A                              l2365 0F00  
                            l1901 03C8                              l2189 0C1E  
                            l1807 0E48                              l2383 0F4E  
                            l1903 03CE                              l1751 0FF0  
                            l1743 0FCC                              l2377 0F3C  
                            l1921 044C                              l1763 1026  
                            l1755 1002                              l1747 0FDE  
                            l1683 1130                              l1863 02F6  
                            l1767 1038                              l1759 1014  
                            l1779 1102                              l1875 032C  
                            l1963 00CC                              l1789 0DFA  
                            l1893 0390                              l1887 0366  
                            l1975 0102                              l1889 0370  
                            l1993 0166                              l1987 013C  
                            l1989 0146                              ?_isr 0001  
                            u1024 0344                              u1025 0340  
                            u1054 03A8                              u1055 03A4  
                            u1305 0640                              u1154 011A  
                            u1155 0116                              u1184 017E  
                            u1185 017A                              u1265 0828  
                            _LATF 000F8E                              _PIE1 000F9D  
                            i2l31 0AD2                              i2l40 0B1C  
                            i2l32 0A86                              i2l41 0B00  
                            i2l33 0A84                              i2l42 0B2A  
                            i2l34 0AD0                              i2l35 0ACE  
                            i2l36 0B3C                              i2l37 0B3C  
                            i2l38 0B3A                              i2l39 0B36  
                  generateCRC@crc 001C                              _main 1124  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            indf1 000FE7                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            pclat 000FFA                              prodh 000FF4  
                            prodl 000FF3                              start 0014  
                   __CFG_IESO$OFF 000000                     __CFG_MCLRE$ON 000000  
                           ??_isr 0001                      _BAUDCON1bits 000F7E  
                   __CFG_WAIT$OFF 000000                             ?_main 0001  
                  clearResponse@i 0010         writeReg@wr_valToWriteHigh 0026  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _TRISF 000F97  
                   __CFG_PWRT$OFF 000000               writeCoil@wc_Address 002B  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                   __CFG_WRT4$OFF 000000                     __CFG_WRT5$OFF 000000  
                   __CFG_WRT6$OFF 000000                     __CFG_WRT7$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                    __CFG_EBTR4$OFF 000000  
                  __CFG_EBTR5$OFF 000000                    __CFG_EBTR6$OFF 000000  
                  __CFG_EBTR7$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                             _coils 0200  
                 __end_of_readReg 083C             writeReg@wr_AddressLow 0020  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8                  __end_of_ClsUSART 1162  
                    ?_modbusDelay 0001                    checkCRC@crcLow 0015  
      __size_of_writeMultipleRegs 01D6         writeCoil@wc_valToWriteLow 0023  
                 __initialization 10B2   writeMultipleRegs@wmr_AddressLow 002A  
                    __end_of_main 113E                  __end_of_OpnUSART 10B2  
 writeMultipleRegs@valToWriteHigh 0022                            ??_main 003B  
                __end_of_OpenTmr0 1156                     __activetblptr 000000  
                   ?_readInputReg 0001             __end_of_clearResponse 1124  
        __end_of_ConfigInterrupts 1174            __size_of_readInputCoil 022A  
                     readCoil@crc 0022                       readCoil@lsb 0029  
                 __CFG_BBSIZ$BB2K 000000                            i2l2401 0A5C  
                          i2l2411 0A90                            i2l2403 0A64  
                          i2l2421 0ABA                            i2l2413 0A94  
                          i2l2405 0A7C                            i2l2431 0ADA  
                          i2l2423 0ABE                            i2l2415 0A9C  
                          i2l2407 0A7E                            i2l2441 0AFA  
                          i2l2433 0ADE                            i2l2425 0AC2  
                          i2l2417 0AB4                            i2l2409 0A86  
                          i2l2451 0B2E                            i2l2443 0B00  
                          i2l2435 0AE0                            i2l2427 0AC6  
                          i2l2419 0AB6                            i2l2445 0B18  
                          i2l2437 0AEA                            i2l2453 0B36  
                          i2l2429 0ACC                            i2l2447 0B1C  
                          i2l2439 0AF2                            i2l2449 0B2A  
                          i2l2395 0A44                            i2l2397 0A4C  
                          i2l2399 0A54                            _RCREG1 000FAE  
                          _RCSTA1 000FAB                  __end_of_checkCRC 0EDA  
                __end_of_decodeIt 1046                            _TXREG1 000FAD  
                          _TXSTA1 000FAC            writeCoil@wc_valToWrite 0027  
            __size_of_generateCRC 00CC                    __CFG_XINST$OFF 000000  
                  __CFG_STVREN$ON 000000                  __end_of_readCoil 046C  
                          clear_0 10B8                            clear_1 10C4  
                          clear_2 10D0            writeReg@wr_AddressHigh 0022  
                 readInputReg@crc 0022                         ??_readReg 001E  
                    __pdataCOMRAM 0040                    ??_readInputReg 001E  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                  __end_of_writeReg 0DD4  
                      __accesstop 0060           __end_of__initialization 10F2  
        writeReg@wr_valToWriteLow 0024                   checkCRC@crcHigh 0013  
                   _readInputCoil 0018                    __pcstackCOMRAM 0001  
                       ?_ClsUSART 0001                      _endOfMessage 003B  
       readInputCoil@howManyBytes 0027                        __pbssBANK0 0060  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                       ?_OpnUSART 0001                         ?_OpenTmr0 0001  
                  ?_readInputCoil 0001              __size_of_modbusDelay 000A  
                       ?_checkCRC 0001                         ?_decodeIt 0001  
                      ??_ClsUSART 000F       writeMultipleRegs@valToWrite 0034  
                       ?_readCoil 0001                        ??_OpnUSART 000F  
              __size_of_writeCoil 0136                 readReg@rr_Address 0024  
                      ??_OpenTmr0 0001                           __Hparam 0000  
              writeMultipleRegs@i 0039                writeMultipleRegs@j 0038  
                         __Lparam 0000              __end_of_readInputReg 0654  
                      _holdingReg 017D                 generateCRC@crcLow 0014  
                      _newMessage 0040                           __pcinit 10B2  
                   _messageLength 003C                           __ramtop 1000  
                         __ptext0 1124                           __ptext1 0FA6  
                         __ptext2 083C                           __ptext3 0CAC  
                         __ptext4 0B76                           __ptext5 046C  
                         __ptext6 0654                           __ptext7 0018  
                         __ptext8 0242                           __ptext9 0EDA  
                       ?_writeReg 0001                         _T0CONbits 000FD5  
                      ??_checkCRC 000F                           _readReg 0654  
                    __size_of_isr 0B6E                        ??_decodeIt 003B  
                readInputCoil@crc 0022                  readInputCoil@lsb 0029  
               ?_ConfigInterrupts 0001                    __pintcode_body 0A12  
            end_of_initialization 10F2                ??_ConfigInterrupts 000F  
               readReg@rr_numRegs 0026                        ??_readCoil 001E  
                         int_func 0A12                   ??_readInputCoil 001E  
                   _modbusMessage 003D                      writeCoil@crc 0029  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                        _timerCount 003E  
                      ??_writeReg 001E                 readCoil@remainder 0024  
               __end_of_writeCoil 0CAC                         _TRISCbits 000F94  
                   ??_generateCRC 0011             writeReg@wr_valToWrite 002A  
          __size_of_clearResponse 002C           writeCoil@wc_AddressHigh 0021  
                   __pidataCOMRAM 1174               start_initialization 10B2  
 writeMultipleRegs@wmr_numRegsLow 002E                       __end_of_isr 0B76  
               __size_of_ClsUSART 000C    writeMultipleRegs@valToWriteLow 0024  
           __size_of_readInputReg 01E8              writeMultipleRegs@crc 0036  
                      readReg@crc 0022                 __size_of_OpnUSART 006C  
             __end_of_generateCRC 0FA6                 __size_of_OpenTmr0 0018  
                  readInputCoil@i 002A                    readInputCoil@j 002B  
                  readInputCoil@k 002C                    readInputCoil@l 0028  
                __CFG_LPT1OSC$OFF 000000                       __pbssCOMRAM 003B  
                    _readInputReg 046C                 __size_of_checkCRC 0106  
               __size_of_decodeIt 00A0                     _clearResponse 10F8  
                   ??_modbusDelay 0001                 __size_of_readCoil 022A  
               __CFG_CCP2MX$PORTC 000000                         __pintcode 0008  
                       checkCRC@i 001B                         checkCRC@j 0017  
                        ?_readReg 0001                 __size_of_writeReg 0128  
                  ?_clearResponse 0001              readCoil@howManyBytes 0027  
                     _generateCRC 0EDA                          _LATCbits 000F8B  
                        _PIE1bits 000F9D  writeMultipleRegs@wmr_numRegsHigh 002C  
                        i2u150_40 0A90                          i2u150_41 0A8E  
                        i2u151_40 0A9C                          i2u151_41 0A9A  
                        i2u152_40 0ADA                          i2u152_41 0AD8  
                        i2u153_40 0AEA                          i2u153_41 0AE8  
                        i2u154_40 0B28                          i2u146_40 0A4C  
                        i2u154_41 0B26                          i2u146_41 0A4A  
                        i2u147_40 0A54                          i2u147_41 0A52  
                        i2u148_40 0A5C                          i2u148_41 0A5A  
                        i2u149_40 0A64                          i2u149_41 0A62  
                        _PIR1bits 000F9E             __CFG_DATABW$DATA16BIT 000000  
       __size_of_ConfigInterrupts 0008                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000                       writeReg@crc 002C  
             __end_of_modbusDelay 116C                 __CFG_ECCPMX$PORTE 000000  
                        _ClsUSART 1156                       checkCRC@crc 0019  
                       _writeCoil 0B76            writeCoil@wc_AddressLow 001F  
                   OpnUSART@spbrg 0010                          _OpnUSART 1046  
                       readCoil@i 002A                         readCoil@j 002B  
                       readCoil@k 002C                         readCoil@l 0028  
                        _OpenTmr0 113E                          __Hrparam 0000  
           __end_of_readInputCoil 0242                          __Lrparam 0000  
                   readInputReg@i 0028                     readInputReg@j 002A  
              generateCRC@crcHigh 0016                          _checkCRC 0DD4  
                 ??_clearResponse 000F                          _decodeIt 0FA6  
                __size_of_readReg 01E8                          __ptext10 10F8  
                        __ptext11 0DD4                          __ptext12 116C  
                        __ptext13 1046                          __ptext14 1156  
                        __ptext16 1162                          __ptext17 113E  
                      ?_writeCoil 0001     writeMultipleRegs@wmr_numBytes 0030  
      writeCoil@wc_valToWriteHigh 0025                          _readCoil 0242  
                   __size_of_main 001A  writeMultipleRegs@wmr_AddressHigh 0028  
                        _received 0100                       _modbusDelay 1162  
                      writeCoil@i 002D      writeMultipleRegs@wmr_Address 0032  
                        _response 0060          generateCRC@messageLength 000F  
                        _writeReg 0CAC             __CFG_ADDRBW$ADDR20BIT 000000  
                      _INTCONbits 000FF2            readInputReg@rr_Address 0024  
              readCoil@rc_Address 0020                          readReg@i 0028  
                        readReg@j 002A           readInputCoil@rc_Address 0020  
             readCoil@rc_numCoils 0025          readInputCoil@rc_numCoils 0025  
                        intlevel2 0000      writeMultipleRegs@wmr_numRegs 0026  
                      _RCSTA1bits 000FAB                  _ConfigInterrupts 116C  
                       writeReg@i 002E                 _writeMultipleRegs 083C  
              ?_writeMultipleRegs 0001            readInputReg@rr_numRegs 0026  
             ??_writeMultipleRegs 001E                       ??_writeCoil 001E  
                    ?_generateCRC 000F            readInputCoil@remainder 0024  
       __end_of_writeMultipleRegs 0A12  
