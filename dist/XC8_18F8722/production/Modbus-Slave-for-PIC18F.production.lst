

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Jan 06 11:16:21 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	idataCOMRAM
    37  0013F6                     __pidataCOMRAM:
    38                           	opt stack 0
    39                           
    40                           ;initializer for _newMessage
    41  0013F6  01                 	db	1
    42  0000                     _BAUDCON1bits	set	3966
    43  0000                     _INTCONbits	set	4082
    44  0000                     _LATCbits	set	3979
    45  0000                     _LATF	set	3982
    46  0000                     _PIE1	set	3997
    47  0000                     _PIE1bits	set	3997
    48  0000                     _PIR1bits	set	3998
    49  0000                     _RCONbits	set	4048
    50  0000                     _RCREG1	set	4014
    51  0000                     _RCSTA1	set	4011
    52  0000                     _RCSTA1bits	set	4011
    53  0000                     _SPBRG	set	4015
    54  0000                     _T0CONbits	set	4053
    55  0000                     _TMR0H	set	4055
    56  0000                     _TMR0L	set	4054
    57  0000                     _TRISCbits	set	3988
    58  0000                     _TRISF	set	3991
    59  0000                     _TXREG1	set	4013
    60  0000                     _TXSTA1	set	4012
    61  0000                     _TXSTA1bits	set	4012
    62                           
    63                           ; #config settings
    64  0000                     
    65                           	psect	cinit
    66  001334                     __pcinit:
    67                           	opt stack 0
    68  001334                     start_initialization:
    69                           	opt stack 0
    70  001334                     __initialization:
    71                           	opt stack 0
    72                           
    73                           ; Clear objects allocated to BANK2 (100 bytes)
    74  001334  EE02  F000         	lfsr	0,__pbssBANK2
    75  001338  0E64               	movlw	100
    76  00133A                     clear_0:
    77  00133A  6AEE               	clrf	postinc0,c
    78  00133C  06E8               	decf	wreg,f,c
    79  00133E  E1FD               	bnz	clear_0
    80                           
    81                           ; Clear objects allocated to BANK1 (175 bytes)
    82  001340  EE01  F000         	lfsr	0,__pbssBANK1
    83  001344  0EAF               	movlw	175
    84  001346                     clear_1:
    85  001346  6AEE               	clrf	postinc0,c
    86  001348  06E8               	decf	wreg,f,c
    87  00134A  E1FD               	bnz	clear_1
    88                           
    89                           ; Clear objects allocated to BANK0 (125 bytes)
    90  00134C  EE00  F060         	lfsr	0,__pbssBANK0
    91  001350  0E7D               	movlw	125
    92  001352                     clear_2:
    93  001352  6AEE               	clrf	postinc0,c
    94  001354  06E8               	decf	wreg,f,c
    95  001356  E1FD               	bnz	clear_2
    96                           
    97                           ; Clear objects allocated to COMRAM (5 bytes)
    98  001358  6A41               	clrf	(__pbssCOMRAM+4)& (0+255),c
    99  00135A  6A40               	clrf	(__pbssCOMRAM+3)& (0+255),c
   100  00135C  6A3F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   101  00135E  6A3E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   102  001360  6A3D               	clrf	__pbssCOMRAM& (0+255),c
   103                           
   104                           ; Initialize objects allocated to COMRAM (1 bytes)
   105                           ; load TBLPTR registers with __pidataCOMRAM
   106  001362  0EF6               	movlw	low __pidataCOMRAM
   107  001364  6EF6               	movwf	tblptrl,c
   108  001366  0E13               	movlw	high __pidataCOMRAM
   109  001368  6EF7               	movwf	tblptrh,c
   110  00136A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   111  00136C  6EF8               	movwf	tblptru,c
   112  00136E  0009               	tblrd		*+	;fetch initializer
   113  001370  CFF5 F042          	movff	tablat,__pdataCOMRAM
   114  001374                     end_of_initialization:
   115                           	opt stack 0
   116  001374                     __end_of__initialization:
   117                           	opt stack 0
   118  001374  0100               	movlb	0
   119  001376  EFD3  F009         	goto	_main	;jump to C main() function
   120                           tblptru	equ	0xFF8
   121                           tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           
   127                           	psect	bssCOMRAM
   128  00003D                     __pbssCOMRAM:
   129                           	opt stack 0
   130  00003D                     _endOfMessage:
   131                           	opt stack 0
   132  00003D                     	ds	1
   133  00003E                     _messageLength:
   134                           	opt stack 0
   135  00003E                     	ds	1
   136  00003F                     _modbusMessage:
   137                           	opt stack 0
   138  00003F                     	ds	1
   139  000040                     _timerCount:
   140                           	opt stack 0
   141  000040                     	ds	1
   142  000041                     _z:
   143                           	opt stack 0
   144  000041                     	ds	1
   145                           tblptru	equ	0xFF8
   146                           tblptrh	equ	0xFF7
   147                           tblptrl	equ	0xFF6
   148                           tablat	equ	0xFF5
   149                           postinc0	equ	0xFEE
   150                           wreg	equ	0xFE8
   151                           
   152                           	psect	dataCOMRAM
   153  000042                     __pdataCOMRAM:
   154                           	opt stack 0
   155  000042                     _newMessage:
   156                           	opt stack 0
   157  000042                     	ds	1
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           tblptrl	equ	0xFF6
   161                           tablat	equ	0xFF5
   162                           postinc0	equ	0xFEE
   163                           wreg	equ	0xFE8
   164                           
   165                           	psect	bssBANK0
   166  000060                     __pbssBANK0:
   167                           	opt stack 0
   168  000060                     _received:
   169                           	opt stack 0
   170  000060                     	ds	125
   171                           tblptru	equ	0xFF8
   172                           tblptrh	equ	0xFF7
   173                           tblptrl	equ	0xFF6
   174                           tablat	equ	0xFF5
   175                           postinc0	equ	0xFEE
   176                           wreg	equ	0xFE8
   177                           
   178                           	psect	bssBANK1
   179  000100                     __pbssBANK1:
   180                           	opt stack 0
   181  000100                     _response:
   182                           	opt stack 0
   183  000100                     	ds	125
   184  00017D                     _coils:
   185                           	opt stack 0
   186  00017D                     	ds	50
   187                           tblptru	equ	0xFF8
   188                           tblptrh	equ	0xFF7
   189                           tblptrl	equ	0xFF6
   190                           tablat	equ	0xFF5
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           
   194                           	psect	bssBANK2
   195  000200                     __pbssBANK2:
   196                           	opt stack 0
   197  000200                     _holdingReg:
   198                           	opt stack 0
   199  000200                     	ds	100
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           
   207                           	psect	cstackCOMRAM
   208  000001                     __pcstackCOMRAM:
   209                           	opt stack 0
   210  000001                     ??_isr:
   211  000001                     
   212                           ; 1 bytes @ 0x0
   213  000001                     	ds	14
   214  00000F                     ??_OpnUSART:
   215  00000F                     ??_checkCRC:
   216  00000F                     ??_clearResponse:
   217  00000F                     ?_generateCRC:
   218                           	opt stack 0
   219  00000F                     generateCRC@messageLength:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0xE
   223  00000F                     	ds	1
   224  000010                     clearResponse@i:
   225                           	opt stack 0
   226  000010                     OpnUSART@spbrg:
   227                           	opt stack 0
   228                           
   229                           ; 4 bytes @ 0xF
   230  000010                     	ds	1
   231  000011                     ??_generateCRC:
   232                           
   233                           ; 0 bytes @ 0x10
   234  000011                     	ds	2
   235  000013                     checkCRC@crcHigh:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x12
   239  000013                     	ds	1
   240  000014                     generateCRC@crcLow:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x13
   244  000014                     	ds	1
   245  000015                     checkCRC@crcLow:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x14
   249  000015                     	ds	1
   250  000016                     generateCRC@crcHigh:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x15
   254  000016                     	ds	1
   255  000017                     checkCRC@j:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x16
   259  000017                     	ds	1
   260  000018                     generateCRC@i:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x17
   264  000018                     	ds	1
   265  000019                     checkCRC@crc:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x18
   269  000019                     	ds	1
   270  00001A                     generateCRC@j:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x19
   274  00001A                     	ds	1
   275  00001B                     checkCRC@i:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x1A
   279  00001B                     	ds	1
   280  00001C                     generateCRC@crc:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x1B
   284  00001C                     	ds	2
   285  00001E                     ??_readCoil:
   286  00001E                     ??_readInputCoil:
   287  00001E                     ??_readReg:
   288  00001E                     ??_readInputReg:
   289  00001E                     ??_writeCoil:
   290  00001E                     ??_writeReg:
   291  00001E                     ??_writeMultipleRegs:
   292  00001E                     ??_writeMultipleCoils:
   293                           
   294                           ; 0 bytes @ 0x1D
   295  00001E                     	ds	1
   296  00001F                     writeCoil@wc_AddressLow:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x1E
   300  00001F                     	ds	1
   301  000020                     writeReg@wr_AddressLow:
   302                           	opt stack 0
   303  000020                     readCoil@rc_Address:
   304                           	opt stack 0
   305  000020                     readInputCoil@rc_Address:
   306                           	opt stack 0
   307  000020                     writeMultipleCoils@wmc_numBytes:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x1F
   311  000020                     	ds	1
   312  000021                     writeCoil@wc_AddressHigh:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x20
   316  000021                     	ds	1
   317  000022                     writeMultipleCoils@lsb:
   318                           	opt stack 0
   319  000022                     readReg@crc:
   320                           	opt stack 0
   321  000022                     readInputReg@crc:
   322                           	opt stack 0
   323  000022                     writeReg@wr_AddressHigh:
   324                           	opt stack 0
   325  000022                     writeMultipleRegs@valToWriteHigh:
   326                           	opt stack 0
   327  000022                     readCoil@crc:
   328                           	opt stack 0
   329  000022                     readInputCoil@crc:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x21
   333  000022                     	ds	1
   334  000023                     writeMultipleCoils@k:
   335                           	opt stack 0
   336  000023                     writeCoil@wc_valToWriteLow:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x22
   340  000023                     	ds	1
   341  000024                     readCoil@remainder:
   342                           	opt stack 0
   343  000024                     readInputCoil@remainder:
   344                           	opt stack 0
   345  000024                     readReg@rr_Address:
   346                           	opt stack 0
   347  000024                     readInputReg@rr_Address:
   348                           	opt stack 0
   349  000024                     writeReg@wr_valToWriteLow:
   350                           	opt stack 0
   351  000024                     writeMultipleRegs@valToWriteLow:
   352                           	opt stack 0
   353  000024                     writeMultipleCoils@wmc_AddressHigh:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x23
   357  000024                     	ds	1
   358  000025                     readCoil@rc_numCoils:
   359                           	opt stack 0
   360  000025                     readInputCoil@rc_numCoils:
   361                           	opt stack 0
   362  000025                     writeCoil@wc_valToWriteHigh:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x24
   366  000025                     	ds	1
   367  000026                     readReg@rr_numRegs:
   368                           	opt stack 0
   369  000026                     readInputReg@rr_numRegs:
   370                           	opt stack 0
   371  000026                     writeReg@wr_valToWriteHigh:
   372                           	opt stack 0
   373  000026                     writeMultipleRegs@wmr_numRegs:
   374                           	opt stack 0
   375  000026                     writeMultipleCoils@wmc_AddressLow:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x25
   379  000026                     	ds	1
   380  000027                     readCoil@howManyBytes:
   381                           	opt stack 0
   382  000027                     readInputCoil@howManyBytes:
   383                           	opt stack 0
   384  000027                     writeCoil@wc_valToWrite:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x26
   388  000027                     	ds	1
   389  000028                     readCoil@l:
   390                           	opt stack 0
   391  000028                     readInputCoil@l:
   392                           	opt stack 0
   393  000028                     readReg@i:
   394                           	opt stack 0
   395  000028                     readInputReg@i:
   396                           	opt stack 0
   397  000028                     writeReg@wr_Address:
   398                           	opt stack 0
   399  000028                     writeMultipleRegs@wmr_AddressHigh:
   400                           	opt stack 0
   401  000028                     writeMultipleCoils@wmc_numCoilsHigh:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x27
   405  000028                     	ds	1
   406  000029                     readCoil@lsb:
   407                           	opt stack 0
   408  000029                     readInputCoil@lsb:
   409                           	opt stack 0
   410  000029                     writeCoil@crc:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x28
   414  000029                     	ds	1
   415  00002A                     readReg@j:
   416                           	opt stack 0
   417  00002A                     readInputReg@j:
   418                           	opt stack 0
   419  00002A                     readCoil@i:
   420                           	opt stack 0
   421  00002A                     readInputCoil@i:
   422                           	opt stack 0
   423  00002A                     writeReg@wr_valToWrite:
   424                           	opt stack 0
   425  00002A                     writeMultipleRegs@wmr_AddressLow:
   426                           	opt stack 0
   427  00002A                     writeMultipleCoils@wmc_numCoilsLow:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x29
   431  00002A                     	ds	1
   432  00002B                     readCoil@j:
   433                           	opt stack 0
   434  00002B                     readInputCoil@j:
   435                           	opt stack 0
   436  00002B                     writeCoil@wc_Address:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x2A
   440  00002B                     	ds	1
   441  00002C                     readCoil@k:
   442                           	opt stack 0
   443  00002C                     readInputCoil@k:
   444                           	opt stack 0
   445  00002C                     writeMultipleCoils@q:
   446                           	opt stack 0
   447  00002C                     writeReg@crc:
   448                           	opt stack 0
   449  00002C                     writeMultipleRegs@wmr_numRegsHigh:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x2B
   453  00002C                     	ds	1
   454  00002D                     writeCoil@i:
   455                           	opt stack 0
   456  00002D                     writeMultipleCoils@wmc_Address:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x2C
   460  00002D                     	ds	1
   461  00002E                     writeReg@i:
   462                           	opt stack 0
   463  00002E                     writeMultipleRegs@wmr_numRegsLow:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x2D
   467  00002E                     	ds	1
   468  00002F                     writeMultipleCoils@howManyBytes:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x2E
   472  00002F                     	ds	1
   473  000030                     writeMultipleRegs@wmr_numBytes:
   474                           	opt stack 0
   475  000030                     writeMultipleCoils@crc:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x2F
   479  000030                     	ds	2
   480  000032                     writeMultipleCoils@valToWrite:
   481                           	opt stack 0
   482  000032                     writeMultipleRegs@wmr_numBytesTST:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x31
   486  000032                     	ds	1
   487  000033                     writeMultipleCoils@remainder:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x32
   491  000033                     	ds	1
   492  000034                     writeMultipleRegs@wmr_Address:
   493                           	opt stack 0
   494  000034                     writeMultipleCoils@wmc_numCoils:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x33
   498  000034                     	ds	2
   499  000036                     writeMultipleCoils@l:
   500                           	opt stack 0
   501  000036                     writeMultipleRegs@valToWrite:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x35
   505  000036                     	ds	1
   506  000037                     writeMultipleCoils@j:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x36
   510  000037                     	ds	1
   511  000038                     writeMultipleCoils@i:
   512                           	opt stack 0
   513  000038                     writeMultipleRegs@crc:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x37
   517  000038                     	ds	2
   518  00003A                     writeMultipleRegs@j:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x39
   522  00003A                     	ds	1
   523  00003B                     writeMultipleRegs@i:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x3A
   527  00003B                     	ds	2
   528  00003D                     tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           
   535                           ; 0 bytes @ 0x3C
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   538 ;;
   539 ;; *************** function _main *****************
   540 ;; Defined at:
   541 ;;		line 38 in file "main.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;		None               void
   548 ;; Registers used:
   549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   559 ;;Total ram usage:        0 bytes
   560 ;; Hardware stack levels required when called:    5
   561 ;; This function calls:
   562 ;;		_OpnUSART
   563 ;;		_ConfigInterrupts
   564 ;;		_decodeIt
   565 ;; This function is called by:
   566 ;;		Startup code after reset
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570                           	psect	text0
   571  0013A6                     __ptext0:
   572                           	opt stack 0
   573  0013A6                     _main:
   574                           	opt stack 26
   575                           
   576                           ;main.c: 39: OpnUSART();
   577                           
   578                           ;incstack = 0
   579                           ;incstack = 0
   580  0013A6  EC64  F009         	call	_OpnUSART	;wreg free
   581                           
   582                           ;main.c: 40: ConfigInterrupts();
   583  0013AA  ECF7  F009         	call	_ConfigInterrupts	;wreg free
   584                           
   585                           ;main.c: 42: TRISF = 0;
   586  0013AE  0E00               	movlw	0
   587  0013B0  6E97               	movwf	3991,c	;volatile
   588  0013B2                     l1825:
   589                           
   590                           ;main.c: 45: if(modbusMessage){
   591  0013B2  503F               	movf	_modbusMessage,w,c	;volatile
   592  0013B4  A4D8               	btfss	status,2,c
   593                           
   594                           ;main.c: 46: decodeIt();}
   595  0013B6  EC0B  F009         	call	_decodeIt	;wreg free
   596                           
   597                           ;main.c: 49: LATF = holdingReg[0];
   598  0013BA  C200  FF8E         	movff	_holdingReg,3982	;volatile
   599  0013BE  D7F9               	goto	l1825
   600  0013C0                     __end_of_main:
   601                           	opt stack 0
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           status	equ	0xFD8
   609                           
   610 ;; *************** function _decodeIt *****************
   611 ;; Defined at:
   612 ;;		line 52 in file "modbus.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;		None
   617 ;; Return value:  Size  Location     Type
   618 ;;		None               void
   619 ;; Registers used:
   620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;Total ram usage:        0 bytes
   631 ;; Hardware stack levels used:    1
   632 ;; Hardware stack levels required when called:    4
   633 ;; This function calls:
   634 ;;		_checkCRC
   635 ;;		_readCoil
   636 ;;		_readInputCoil
   637 ;;		_readReg
   638 ;;		_readInputReg
   639 ;;		_writeCoil
   640 ;;		_writeReg
   641 ;;		_writeMultipleRegs
   642 ;;		_writeMultipleCoils
   643 ;; This function is called by:
   644 ;;		_main
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text1
   649  001216                     __ptext1:
   650                           	opt stack 0
   651  001216                     _decodeIt:
   652                           	opt stack 26
   653                           
   654                           ;modbus.c: 53: if(received[0] == 2){
   655                           
   656                           ;incstack = 0
   657                           ;incstack = 0
   658  001216  0100               	movlb	0	; () banked
   659  001218  0100               	movlb	0	; () banked
   660  00121A  5160               	movf	_received& (0+255),w,b	;volatile
   661  00121C  0A02               	xorlw	2
   662  00121E  A4D8               	btfss	status,2,c
   663  001220  D050               	goto	l162
   664                           
   665                           ; BSR set to: 0
   666                           ;modbus.c: 54: if(checkCRC()){
   667  001222  EC22  F008         	call	_checkCRC	;wreg free
   668  001226  0900               	iorlw	0
   669  001228  B4D8               	btfsc	status,2,c
   670  00122A  D04B               	goto	l162
   671                           
   672                           ;modbus.c: 55: if(received[1] == 0x01){
   673  00122C  0100               	movlb	0	; () banked
   674  00122E  0100               	movlb	0	; () banked
   675  001230  0561               	decf	(_received+1)& (0+255),w,b	;volatile
   676  001232  A4D8               	btfss	status,2,c
   677  001234  D003               	goto	l1885
   678                           
   679                           ; BSR set to: 0
   680                           ;modbus.c: 56: readCoil();
   681  001236  EC50  F002         	call	_readCoil	;wreg free
   682                           
   683                           ;modbus.c: 57: }
   684  00123A  D043               	goto	l162
   685  00123C                     l1885:
   686                           
   687                           ;modbus.c: 58: else if(received[1] == 0x02){
   688  00123C  0100               	movlb	0	; () banked
   689  00123E  0100               	movlb	0	; () banked
   690  001240  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   691  001242  0A02               	xorlw	2
   692  001244  A4D8               	btfss	status,2,c
   693  001246  D003               	goto	l1889
   694                           
   695                           ; BSR set to: 0
   696                           ;modbus.c: 59: readInputCoil();
   697  001248  EC3B  F001         	call	_readInputCoil	;wreg free
   698                           
   699                           ;modbus.c: 60: }
   700  00124C  D03A               	goto	l162
   701  00124E                     l1889:
   702                           
   703                           ;modbus.c: 61: else if(received[1] == 0x03){
   704  00124E  0100               	movlb	0	; () banked
   705  001250  0100               	movlb	0	; () banked
   706  001252  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   707  001254  0A03               	xorlw	3
   708  001256  A4D8               	btfss	status,2,c
   709  001258  D003               	goto	l1893
   710                           
   711                           ; BSR set to: 0
   712                           ;modbus.c: 62: readReg();
   713  00125A  EC4D  F005         	call	_readReg	;wreg free
   714                           
   715                           ;modbus.c: 63: }
   716  00125E  D031               	goto	l162
   717  001260                     l1893:
   718                           
   719                           ;modbus.c: 64: else if(received[1] == 0x04){
   720  001260  0100               	movlb	0	; () banked
   721  001262  0100               	movlb	0	; () banked
   722  001264  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   723  001266  0A04               	xorlw	4
   724  001268  A4D8               	btfss	status,2,c
   725  00126A  D003               	goto	l1897
   726                           
   727                           ; BSR set to: 0
   728                           ;modbus.c: 65: readInputReg();
   729  00126C  EC59  F004         	call	_readInputReg	;wreg free
   730                           
   731                           ;modbus.c: 66: }
   732  001270  D028               	goto	l162
   733  001272                     l1897:
   734                           
   735                           ;modbus.c: 67: else if(received[1] == 0x05){
   736  001272  0100               	movlb	0	; () banked
   737  001274  0100               	movlb	0	; () banked
   738  001276  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   739  001278  0A05               	xorlw	5
   740  00127A  A4D8               	btfss	status,2,c
   741  00127C  D003               	goto	l1901
   742                           
   743                           ; BSR set to: 0
   744                           ;modbus.c: 68: writeCoil();
   745  00127E  ECF3  F006         	call	_writeCoil	;wreg free
   746                           
   747                           ;modbus.c: 69: }
   748  001282  D01F               	goto	l162
   749  001284                     l1901:
   750                           
   751                           ;modbus.c: 70: else if(received[1] == 0x06){
   752  001284  0100               	movlb	0	; () banked
   753  001286  0100               	movlb	0	; () banked
   754  001288  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   755  00128A  0A06               	xorlw	6
   756  00128C  A4D8               	btfss	status,2,c
   757  00128E  D003               	goto	l1905
   758                           
   759                           ; BSR set to: 0
   760                           ;modbus.c: 71: writeReg();
   761  001290  EC8E  F007         	call	_writeReg	;wreg free
   762                           
   763                           ;modbus.c: 72: }
   764  001294  D016               	goto	l162
   765  001296                     l1905:
   766                           
   767                           ;modbus.c: 73: else if(received[1] == 0x10){
   768  001296  0100               	movlb	0	; () banked
   769  001298  0100               	movlb	0	; () banked
   770  00129A  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   771  00129C  0A10               	xorlw	16
   772  00129E  A4D8               	btfss	status,2,c
   773  0012A0  D003               	goto	l1909
   774                           
   775                           ; BSR set to: 0
   776                           ;modbus.c: 74: writeMultipleRegs();
   777  0012A2  EC65  F003         	call	_writeMultipleRegs	;wreg free
   778                           
   779                           ;modbus.c: 75: }
   780  0012A6  D00D               	goto	l162
   781  0012A8                     l1909:
   782                           
   783                           ;modbus.c: 76: else if(received[1] == 0x0F){
   784  0012A8  0100               	movlb	0	; () banked
   785  0012AA  0100               	movlb	0	; () banked
   786  0012AC  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   787  0012AE  0A0F               	xorlw	15
   788  0012B0  A4D8               	btfss	status,2,c
   789  0012B2  D003               	goto	l1913
   790                           
   791                           ; BSR set to: 0
   792                           ;modbus.c: 77: writeMultipleCoils();
   793  0012B4  EC0C  F000         	call	_writeMultipleCoils	;wreg free
   794                           
   795                           ;modbus.c: 78: }
   796  0012B8  D004               	goto	l162
   797  0012BA                     l1913:
   798                           
   799                           ;modbus.c: 79: else{
   800                           ;modbus.c: 80: response[0] = 0;
   801  0012BA  0E00               	movlw	0
   802  0012BC  0101               	movlb	1	; () banked
   803  0012BE  0101               	movlb	1	; () banked
   804  0012C0  6F00               	movwf	_response& (0+255),b	;volatile
   805  0012C2                     l162:
   806                           
   807                           ;modbus.c: 81: }
   808                           ;modbus.c: 82: }
   809                           ;modbus.c: 83: }
   810                           ;modbus.c: 84: modbusMessage = 0;
   811  0012C2  0E00               	movlw	0
   812  0012C4  6E3F               	movwf	_modbusMessage,c	;volatile
   813  0012C6  0012               	return	
   814  0012C8                     __end_of_decodeIt:
   815                           	opt stack 0
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           status	equ	0xFD8
   823                           
   824 ;; *************** function _writeMultipleCoils *****************
   825 ;; Defined at:
   826 ;;		line 569 in file "modbus.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  wmc_numCoils    2   51[COMRAM] unsigned int 
   831 ;;  crc             2   47[COMRAM] unsigned int 
   832 ;;  wmc_Address     2   44[COMRAM] unsigned int 
   833 ;;  wmc_numCoils    2   41[COMRAM] unsigned int 
   834 ;;  wmc_numCoils    2   39[COMRAM] unsigned int 
   835 ;;  wmc_AddressL    2   37[COMRAM] unsigned int 
   836 ;;  wmc_AddressH    2   35[COMRAM] unsigned int 
   837 ;;  wmc_numBytes    2   31[COMRAM] unsigned int 
   838 ;;  i               1   55[COMRAM] unsigned char 
   839 ;;  j               1   54[COMRAM] unsigned char 
   840 ;;  l               1   53[COMRAM] unsigned char 
   841 ;;  remainder       1   50[COMRAM] unsigned char 
   842 ;;  valToWrite      1   49[COMRAM] unsigned char 
   843 ;;  howManyBytes    1   46[COMRAM] unsigned char 
   844 ;;  q               1   43[COMRAM] unsigned char 
   845 ;;  k               1   34[COMRAM] unsigned char 
   846 ;;  lsb             1   33[COMRAM] unsigned char 
   847 ;;  bitSet          1    0        unsigned char 
   848 ;; Return value:  Size  Location     Type
   849 ;;		None               void
   850 ;; Registers used:
   851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   858 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   860 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   861 ;;Total ram usage:       27 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    3
   864 ;; This function calls:
   865 ;;		_clearResponse
   866 ;;		_generateCRC
   867 ;; This function is called by:
   868 ;;		_decodeIt
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text2
   873  000018                     __ptext2:
   874                           	opt stack 0
   875  000018                     _writeMultipleCoils:
   876                           	opt stack 26
   877                           
   878                           ;modbus.c: 573: unsigned int wmc_Address = 0;
   879                           
   880                           ;incstack = 0
   881                           ;incstack = 0
   882  000018  0E00               	movlw	0
   883  00001A  6E2E               	movwf	writeMultipleCoils@wmc_Address+1,c
   884  00001C  0E00               	movlw	0
   885  00001E  6E2D               	movwf	writeMultipleCoils@wmc_Address,c
   886                           
   887                           ;modbus.c: 574: unsigned int wmc_AddressHigh = 0;
   888  000020  0E00               	movlw	0
   889  000022  6E25               	movwf	writeMultipleCoils@wmc_AddressHigh+1,c
   890  000024  0E00               	movlw	0
   891  000026  6E24               	movwf	writeMultipleCoils@wmc_AddressHigh,c
   892                           
   893                           ;modbus.c: 575: unsigned int wmc_AddressLow = 0;
   894  000028  0E00               	movlw	0
   895  00002A  6E27               	movwf	writeMultipleCoils@wmc_AddressLow+1,c
   896  00002C  0E00               	movlw	0
   897  00002E  6E26               	movwf	writeMultipleCoils@wmc_AddressLow,c
   898                           
   899                           ;modbus.c: 576: unsigned int wmc_numCoils = 0;
   900  000030  0E00               	movlw	0
   901  000032  6E35               	movwf	writeMultipleCoils@wmc_numCoils+1,c
   902  000034  0E00               	movlw	0
   903  000036  6E34               	movwf	writeMultipleCoils@wmc_numCoils,c
   904                           
   905                           ;modbus.c: 577: unsigned int wmc_numCoilsHigh = 0;
   906  000038  0E00               	movlw	0
   907  00003A  6E29               	movwf	writeMultipleCoils@wmc_numCoilsHigh+1,c
   908  00003C  0E00               	movlw	0
   909  00003E  6E28               	movwf	writeMultipleCoils@wmc_numCoilsHigh,c
   910                           
   911                           ;modbus.c: 578: unsigned int wmc_numCoilsLow = 0;
   912  000040  0E00               	movlw	0
   913  000042  6E2B               	movwf	writeMultipleCoils@wmc_numCoilsLow+1,c
   914  000044  0E00               	movlw	0
   915  000046  6E2A               	movwf	writeMultipleCoils@wmc_numCoilsLow,c
   916                           
   917                           ;modbus.c: 579: unsigned int wmc_numBytes = 0;
   918  000048  0E00               	movlw	0
   919  00004A  6E21               	movwf	writeMultipleCoils@wmc_numBytes+1,c
   920  00004C  0E00               	movlw	0
   921  00004E  6E20               	movwf	writeMultipleCoils@wmc_numBytes,c
   922                           
   923                           ;modbus.c: 580: unsigned int crc = 0;
   924  000050  0E00               	movlw	0
   925  000052  6E31               	movwf	writeMultipleCoils@crc+1,c
   926  000054  0E00               	movlw	0
   927  000056  6E30               	movwf	writeMultipleCoils@crc,c
   928                           
   929                           ;modbus.c: 582: unsigned char howManyBytes = 0;
   930  000058  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   931  00005A  0E00               	movlw	0
   932  00005C  6E2F               	movwf	writeMultipleCoils@howManyBytes,c
   933  00005E  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   934                           
   935                           ;modbus.c: 583: unsigned char remainder = 0;
   936  000060  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   937  000062  0E00               	movlw	0
   938  000064  6E33               	movwf	writeMultipleCoils@remainder,c
   939  000066  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   940                           
   941                           ;modbus.c: 584: unsigned char lsb = 0;
   942  000068  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   943  00006A  0E00               	movlw	0
   944  00006C  6E22               	movwf	writeMultipleCoils@lsb,c
   945  00006E  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   946                           
   947                           ;modbus.c: 585: unsigned char i,j,k,l = 0;
   948  000070  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   949  000072  0E00               	movlw	0
   950  000074  6E36               	movwf	writeMultipleCoils@l,c
   951  000076  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   952                           
   953                           ;modbus.c: 588: wmc_Address = received[2];
   954  000078  0100               	movlb	0	; () banked
   955  00007A  C062  F02D         	movff	_received+2,writeMultipleCoils@wmc_Address	;volatile
   956  00007E  6A2E               	clrf	writeMultipleCoils@wmc_Address+1,c
   957                           
   958                           ; BSR set to: 0
   959                           ;modbus.c: 589: wmc_AddressHigh = received[2];
   960  000080  0100               	movlb	0	; () banked
   961  000082  C062  F024         	movff	_received+2,writeMultipleCoils@wmc_AddressHigh	;volatile
   962  000086  6A25               	clrf	writeMultipleCoils@wmc_AddressHigh+1,c
   963                           
   964                           ;modbus.c: 590: wmc_Address <<=8;
   965  000088  502D               	movf	writeMultipleCoils@wmc_Address,w,c
   966  00008A  6E2E               	movwf	writeMultipleCoils@wmc_Address+1,c
   967  00008C  6A2D               	clrf	writeMultipleCoils@wmc_Address,c
   968                           
   969                           ; BSR set to: 0
   970                           ;modbus.c: 591: wmc_Address |= received[3];
   971  00008E  0100               	movlb	0	; () banked
   972  000090  0100               	movlb	0	; () banked
   973  000092  5163               	movf	(_received+3)& (0+255),w,b	;volatile
   974  000094  122D               	iorwf	writeMultipleCoils@wmc_Address,f,c
   975                           
   976                           ; BSR set to: 0
   977                           ;modbus.c: 592: wmc_AddressLow = received[3];
   978  000096  0100               	movlb	0	; () banked
   979  000098  C063  F026         	movff	_received+3,writeMultipleCoils@wmc_AddressLow	;volatile
   980  00009C  6A27               	clrf	writeMultipleCoils@wmc_AddressLow+1,c
   981                           
   982                           ; BSR set to: 0
   983                           ;modbus.c: 595: wmc_numCoils = received[4];
   984  00009E  0100               	movlb	0	; () banked
   985  0000A0  C064  F034         	movff	_received+4,writeMultipleCoils@wmc_numCoils	;volatile
   986  0000A4  6A35               	clrf	writeMultipleCoils@wmc_numCoils+1,c
   987                           
   988                           ; BSR set to: 0
   989                           ;modbus.c: 596: wmc_numCoilsHigh = received[4];
   990  0000A6  0100               	movlb	0	; () banked
   991  0000A8  C064  F028         	movff	_received+4,writeMultipleCoils@wmc_numCoilsHigh	;volatile
   992  0000AC  6A29               	clrf	writeMultipleCoils@wmc_numCoilsHigh+1,c
   993                           
   994                           ; BSR set to: 0
   995                           ;modbus.c: 597: wmc_numCoils <<= 8;
   996  0000AE  5034               	movf	writeMultipleCoils@wmc_numCoils,w,c
   997  0000B0  6E35               	movwf	writeMultipleCoils@wmc_numCoils+1,c
   998  0000B2  6A34               	clrf	writeMultipleCoils@wmc_numCoils,c
   999                           
  1000                           ;modbus.c: 598: wmc_numCoils |= received[5];
  1001  0000B4  0100               	movlb	0	; () banked
  1002  0000B6  0100               	movlb	0	; () banked
  1003  0000B8  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  1004  0000BA  1234               	iorwf	writeMultipleCoils@wmc_numCoils,f,c
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;modbus.c: 599: wmc_numCoilsLow = received[5];
  1008  0000BC  0100               	movlb	0	; () banked
  1009  0000BE  C065  F02A         	movff	_received+5,writeMultipleCoils@wmc_numCoilsLow	;volatile
  1010  0000C2  6A2B               	clrf	writeMultipleCoils@wmc_numCoilsLow+1,c
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;modbus.c: 601: wmc_numBytes = received[6];
  1014  0000C4  0100               	movlb	0	; () banked
  1015  0000C6  C066  F020         	movff	_received+6,writeMultipleCoils@wmc_numBytes	;volatile
  1016  0000CA  6A21               	clrf	writeMultipleCoils@wmc_numBytes+1,c
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;modbus.c: 603: response[0] = 2;
  1020  0000CC  0E02               	movlw	2
  1021  0000CE  0101               	movlb	1	; () banked
  1022  0000D0  0101               	movlb	1	; () banked
  1023  0000D2  6F00               	movwf	_response& (0+255),b	;volatile
  1024                           
  1025                           ; BSR set to: 1
  1026                           ;modbus.c: 604: response[1] = 0x0F;
  1027  0000D4  0E0F               	movlw	15
  1028  0000D6  0101               	movlb	1	; () banked
  1029  0000D8  0101               	movlb	1	; () banked
  1030  0000DA  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  1031                           
  1032                           ;modbus.c: 606: howManyBytes = wmc_numCoils/8;
  1033  0000DC  C034  F01E         	movff	writeMultipleCoils@wmc_numCoils,??_writeMultipleCoils
  1034  0000E0  C035  F01F         	movff	writeMultipleCoils@wmc_numCoils+1,??_writeMultipleCoils+1
  1035  0000E4  90D8               	bcf	status,0,c
  1036  0000E6  321F               	rrcf	??_writeMultipleCoils+1,f,c
  1037  0000E8  321E               	rrcf	??_writeMultipleCoils,f,c
  1038  0000EA  90D8               	bcf	status,0,c
  1039  0000EC  321F               	rrcf	??_writeMultipleCoils+1,f,c
  1040  0000EE  321E               	rrcf	??_writeMultipleCoils,f,c
  1041  0000F0  90D8               	bcf	status,0,c
  1042  0000F2  321F               	rrcf	??_writeMultipleCoils+1,f,c
  1043  0000F4  321E               	rrcf	??_writeMultipleCoils,f,c
  1044  0000F6  501E               	movf	??_writeMultipleCoils,w,c
  1045  0000F8  6E2F               	movwf	writeMultipleCoils@howManyBytes,c
  1046                           
  1047                           ;modbus.c: 607: remainder = wmc_numCoils % 8;
  1048  0000FA  5034               	movf	writeMultipleCoils@wmc_numCoils,w,c
  1049  0000FC  0B07               	andlw	7
  1050  0000FE  6E33               	movwf	writeMultipleCoils@remainder,c
  1051                           
  1052                           ; BSR set to: 1
  1053                           ;modbus.c: 609: if(remainder){
  1054  000100  5033               	movf	writeMultipleCoils@remainder,w,c
  1055  000102  A4D8               	btfss	status,2,c
  1056                           
  1057                           ; BSR set to: 1
  1058                           ;modbus.c: 610: howManyBytes += 1;
  1059  000104  2A2F               	incf	writeMultipleCoils@howManyBytes,f,c
  1060                           
  1061                           ; BSR set to: 1
  1062                           ;modbus.c: 611: }
  1063                           ;modbus.c: 612: response[2] = wmc_AddressHigh;
  1064                           
  1065                           ; BSR set to: 1
  1066  000106  C024  F102         	movff	writeMultipleCoils@wmc_AddressHigh,_response+2	;volatile
  1067                           
  1068                           ; BSR set to: 1
  1069                           ;modbus.c: 613: response[3] = wmc_AddressLow;
  1070  00010A  C026  F103         	movff	writeMultipleCoils@wmc_AddressLow,_response+3	;volatile
  1071                           
  1072                           ; BSR set to: 1
  1073                           ;modbus.c: 615: response[4] = wmc_numCoilsHigh;
  1074  00010E  C028  F104         	movff	writeMultipleCoils@wmc_numCoilsHigh,_response+4	;volatile
  1075                           
  1076                           ; BSR set to: 1
  1077                           ;modbus.c: 616: response[5] = wmc_numCoilsLow;
  1078  000112  C02A  F105         	movff	writeMultipleCoils@wmc_numCoilsLow,_response+5	;volatile
  1079                           
  1080                           ; BSR set to: 1
  1081                           ;modbus.c: 618: l = wmc_Address;
  1082  000116  C02D  F036         	movff	writeMultipleCoils@wmc_Address,writeMultipleCoils@l
  1083                           
  1084                           ; BSR set to: 1
  1085                           ;modbus.c: 619: k = 3;
  1086  00011A  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1087  00011C  0E03               	movlw	3
  1088  00011E  6E23               	movwf	writeMultipleCoils@k,c
  1089  000120  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1090                           
  1091                           ; BSR set to: 1
  1092                           ;modbus.c: 621: unsigned char bitSet;
  1093                           ;modbus.c: 622: unsigned char valToWrite;
  1094                           ;modbus.c: 623: unsigned char q = 7;
  1095  000122  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1096  000124  0E07               	movlw	7
  1097  000126  6E2C               	movwf	writeMultipleCoils@q,c
  1098  000128  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1099                           
  1100                           ; BSR set to: 1
  1101                           ;modbus.c: 626: for(i=howManyBytes; i!=0; i--){
  1102  00012A  C02F  F038         	movff	writeMultipleCoils@howManyBytes,writeMultipleCoils@i
  1103  00012E  D074               	goto	L5
  1104  000130                     l2567:
  1105                           
  1106                           ;modbus.c: 627: valToWrite = received[q];
  1107  000130  502C               	movf	writeMultipleCoils@q,w,c
  1108  000132  0D01               	mullw	1
  1109  000134  0100               	movlb	0	; () banked
  1110  000136  0E60               	movlw	low _received	;volatile
  1111  000138  24F3               	addwf	prodl,w,c
  1112  00013A  6ED9               	movwf	fsr2l,c
  1113  00013C  0100               	movlb	0	; () banked
  1114  00013E  0E00               	movlw	high _received	;volatile
  1115  000140  20F4               	addwfc	prodh,w,c
  1116  000142  6EDA               	movwf	fsr2h,c
  1117  000144  50DF               	movf	indf2,w,c
  1118  000146  6E32               	movwf	writeMultipleCoils@valToWrite,c
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;modbus.c: 628: q++;
  1122  000148  2A2C               	incf	writeMultipleCoils@q,f,c
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;modbus.c: 629: if(i>1){
  1126  00014A  0E01               	movlw	1
  1127  00014C  6438               	cpfsgt	writeMultipleCoils@i,c
  1128  00014E  D032               	goto	l2591
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;modbus.c: 630: for(j=0;j!=8;j++){
  1132  000150  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1133  000152  0E00               	movlw	0
  1134  000154  6E37               	movwf	writeMultipleCoils@j,c
  1135  000156  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1136  000158                     
  1137                           ; BSR set to: 0
  1138  000158  5037               	movf	writeMultipleCoils@j,w,c
  1139  00015A  0A08               	xorlw	8
  1140  00015C  B4D8               	btfsc	status,2,c
  1141  00015E  D05B               	goto	l2605
  1142                           
  1143                           ;modbus.c: 631: if(!!((valToWrite) & (1 << (j)))){
  1144                           
  1145                           ; BSR set to: 0
  1146                           
  1147                           ; BSR set to: 0
  1148  000160  C037  F01E         	movff	writeMultipleCoils@j,??_writeMultipleCoils
  1149  000164  0E01               	movlw	1
  1150  000166  6E1F               	movwf	(??_writeMultipleCoils+1)& (0+255),c
  1151  000168  2A1E               	incf	??_writeMultipleCoils,f,c
  1152  00016A  D002               	goto	u1624
  1153  00016C                     u1625:
  1154  00016C  90D8               	bcf	status,0,c
  1155  00016E  361F               	rlcf	??_writeMultipleCoils+1,f,c
  1156  000170                     u1624:
  1157  000170  2E1E               	decfsz	??_writeMultipleCoils,f,c
  1158  000172  D7FC               	goto	u1625
  1159  000174  501F               	movf	??_writeMultipleCoils+1,w,c
  1160  000176  1432               	andwf	writeMultipleCoils@valToWrite,w,c
  1161  000178  0900               	iorlw	0
  1162  00017A  B4D8               	btfsc	status,2,c
  1163  00017C  D00C               	goto	l2583
  1164                           
  1165                           ;modbus.c: 632: coils[l] = 1;
  1166  00017E  5036               	movf	writeMultipleCoils@l,w,c
  1167  000180  0D01               	mullw	1
  1168  000182  0101               	movlb	1	; () banked
  1169  000184  0E7D               	movlw	low _coils	;volatile
  1170  000186  24F3               	addwf	prodl,w,c
  1171  000188  6ED9               	movwf	fsr2l,c
  1172  00018A  0101               	movlb	1	; () banked
  1173  00018C  0E01               	movlw	high _coils	;volatile
  1174  00018E  20F4               	addwfc	prodh,w,c
  1175  000190  6EDA               	movwf	fsr2h,c
  1176  000192  0E01               	movlw	1
  1177  000194  D00B               	goto	L1
  1178  000196                     l2583:
  1179                           
  1180                           ;modbus.c: 634: else{
  1181                           ;modbus.c: 635: coils[l] = 0;
  1182  000196  5036               	movf	writeMultipleCoils@l,w,c
  1183  000198  0D01               	mullw	1
  1184  00019A  0101               	movlb	1	; () banked
  1185  00019C  0E7D               	movlw	low _coils	;volatile
  1186  00019E  24F3               	addwf	prodl,w,c
  1187  0001A0  6ED9               	movwf	fsr2l,c
  1188  0001A2  0101               	movlb	1	; () banked
  1189  0001A4  0E01               	movlw	high _coils	;volatile
  1190  0001A6  20F4               	addwfc	prodh,w,c
  1191  0001A8  6EDA               	movwf	fsr2h,c
  1192  0001AA  0E00               	movlw	0
  1193  0001AC                     L1:
  1194  0001AC  6EDF               	movwf	indf2,c
  1195                           
  1196                           ; BSR set to: 1
  1197                           ;modbus.c: 637: }
  1198                           ;modbus.c: 638: l++;
  1199                           
  1200                           ; BSR set to: 1
  1201  0001AE  2A36               	incf	writeMultipleCoils@l,f,c
  1202                           
  1203                           ; BSR set to: 1
  1204  0001B0  2A37               	incf	writeMultipleCoils@j,f,c
  1205  0001B2  D7D2               	goto	L2
  1206  0001B4                     l2591:
  1207                           
  1208                           ;modbus.c: 641: else{
  1209                           ;modbus.c: 642: for(j=0;j!=remainder;j++){
  1210  0001B4  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1211  0001B6  0E00               	movlw	0
  1212  0001B8  6E37               	movwf	writeMultipleCoils@j,c
  1213  0001BA  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1214  0001BC  D029               	goto	l2603
  1215  0001BE                     l2593:
  1216                           
  1217                           ;modbus.c: 643: if(!!((valToWrite) & (1 << (j)))){
  1218  0001BE  C037  F01E         	movff	writeMultipleCoils@j,??_writeMultipleCoils
  1219  0001C2  0E01               	movlw	1
  1220  0001C4  6E1F               	movwf	(??_writeMultipleCoils+1)& (0+255),c
  1221  0001C6  2A1E               	incf	??_writeMultipleCoils,f,c
  1222  0001C8  D002               	goto	u1654
  1223  0001CA                     u1655:
  1224  0001CA  90D8               	bcf	status,0,c
  1225  0001CC  361F               	rlcf	??_writeMultipleCoils+1,f,c
  1226  0001CE                     u1654:
  1227  0001CE  2E1E               	decfsz	??_writeMultipleCoils,f,c
  1228  0001D0  D7FC               	goto	u1655
  1229  0001D2  501F               	movf	??_writeMultipleCoils+1,w,c
  1230  0001D4  1432               	andwf	writeMultipleCoils@valToWrite,w,c
  1231  0001D6  0900               	iorlw	0
  1232  0001D8  B4D8               	btfsc	status,2,c
  1233  0001DA  D00C               	goto	l2597
  1234                           
  1235                           ;modbus.c: 644: coils[l] = 1;
  1236  0001DC  5036               	movf	writeMultipleCoils@l,w,c
  1237  0001DE  0D01               	mullw	1
  1238  0001E0  0101               	movlb	1	; () banked
  1239  0001E2  0E7D               	movlw	low _coils	;volatile
  1240  0001E4  24F3               	addwf	prodl,w,c
  1241  0001E6  6ED9               	movwf	fsr2l,c
  1242  0001E8  0101               	movlb	1	; () banked
  1243  0001EA  0E01               	movlw	high _coils	;volatile
  1244  0001EC  20F4               	addwfc	prodh,w,c
  1245  0001EE  6EDA               	movwf	fsr2h,c
  1246  0001F0  0E01               	movlw	1
  1247  0001F2  D00B               	goto	L3
  1248  0001F4                     l2597:
  1249                           
  1250                           ;modbus.c: 646: else{
  1251                           ;modbus.c: 647: coils[l] = 0;
  1252  0001F4  5036               	movf	writeMultipleCoils@l,w,c
  1253  0001F6  0D01               	mullw	1
  1254  0001F8  0101               	movlb	1	; () banked
  1255  0001FA  0E7D               	movlw	low _coils	;volatile
  1256  0001FC  24F3               	addwf	prodl,w,c
  1257  0001FE  6ED9               	movwf	fsr2l,c
  1258  000200  0101               	movlb	1	; () banked
  1259  000202  0E01               	movlw	high _coils	;volatile
  1260  000204  20F4               	addwfc	prodh,w,c
  1261  000206  6EDA               	movwf	fsr2h,c
  1262  000208  0E00               	movlw	0
  1263  00020A                     L3:
  1264  00020A  6EDF               	movwf	indf2,c
  1265                           
  1266                           ; BSR set to: 1
  1267                           ;modbus.c: 648: }
  1268                           ;modbus.c: 649: l++;
  1269                           
  1270                           ; BSR set to: 1
  1271  00020C  2A36               	incf	writeMultipleCoils@l,f,c
  1272                           
  1273                           ; BSR set to: 1
  1274  00020E  2A37               	incf	writeMultipleCoils@j,f,c
  1275  000210                     l2603:
  1276  000210  5033               	movf	writeMultipleCoils@remainder,w,c
  1277  000212  6237               	cpfseq	writeMultipleCoils@j,c
  1278  000214  D7D4               	goto	l2593
  1279  000216                     l2605:
  1280  000216  0638               	decf	writeMultipleCoils@i,f,c
  1281  000218                     L5:
  1282  000218  6638               	tstfsz	writeMultipleCoils@i,c
  1283  00021A  D78A               	goto	l2567
  1284                           
  1285                           ;modbus.c: 650: }
  1286                           ;modbus.c: 651: }
  1287                           ;modbus.c: 652: }
  1288                           ;modbus.c: 653: crc = generateCRC(8);
  1289  00021C  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1290  00021E  0E08               	movlw	8
  1291  000220  6E0F               	movwf	?_generateCRC,c
  1292  000222  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1293  000224  ECA5  F008         	call	_generateCRC	;wreg free
  1294  000228  C00F  F030         	movff	?_generateCRC,writeMultipleCoils@crc
  1295  00022C  C010  F031         	movff	?_generateCRC+1,writeMultipleCoils@crc+1
  1296                           
  1297                           ;modbus.c: 655: response[6] = crc >> 8;
  1298  000230  5031               	movf	writeMultipleCoils@crc+1,w,c
  1299  000232  0101               	movlb	1	; () banked
  1300  000234  0101               	movlb	1	; () banked
  1301  000236  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  1302                           
  1303                           ; BSR set to: 1
  1304                           ;modbus.c: 656: response[7] = crc;
  1305  000238  C030  F107         	movff	writeMultipleCoils@crc,_response+7	;volatile
  1306                           
  1307                           ; BSR set to: 1
  1308                           ;modbus.c: 658: LATCbits.LATC1 = 1;
  1309  00023C  828B               	bsf	3979,1,c	;volatile
  1310                           
  1311                           ; BSR set to: 1
  1312                           ;modbus.c: 659: for(i=0;i!=9;i++){
  1313  00023E  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1314  000240  0E00               	movlw	0
  1315  000242  6E38               	movwf	writeMultipleCoils@i,c
  1316  000244  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1317  000246                     
  1318                           ; BSR set to: 1
  1319  000246  5038               	movf	writeMultipleCoils@i,w,c
  1320  000248  0A09               	xorlw	9
  1321  00024A  B4D8               	btfsc	status,2,c
  1322  00024C  D010               	goto	l301
  1323  00024E                     l302:
  1324  00024E  A2AC               	btfss	4012,1,c	;volatile
  1325  000250  D7FE               	goto	l302
  1326                           
  1327                           ;modbus.c: 661: TXREG1 = response[i];
  1328  000252  5038               	movf	writeMultipleCoils@i,w,c
  1329  000254  0D01               	mullw	1
  1330  000256  0101               	movlb	1	; () banked
  1331  000258  0E00               	movlw	low _response	;volatile
  1332  00025A  24F3               	addwf	prodl,w,c
  1333  00025C  6ED9               	movwf	fsr2l,c
  1334  00025E  0101               	movlb	1	; () banked
  1335  000260  0E01               	movlw	high _response	;volatile
  1336  000262  20F4               	addwfc	prodh,w,c
  1337  000264  6EDA               	movwf	fsr2h,c
  1338  000266  50DF               	movf	indf2,w,c
  1339  000268  6EAD               	movwf	4013,c	;volatile
  1340                           
  1341                           ; BSR set to: 1
  1342  00026A  2A38               	incf	writeMultipleCoils@i,f,c
  1343  00026C  D7EC               	goto	L4
  1344  00026E                     l301:
  1345                           
  1346                           ; BSR set to: 1
  1347                           ;modbus.c: 662: }
  1348                           ;modbus.c: 663: LATCbits.LATC1 = 0;
  1349  00026E  928B               	bcf	3979,1,c	;volatile
  1350                           
  1351                           ; BSR set to: 1
  1352                           ;modbus.c: 664: clearResponse();
  1353  000270  ECBD  F009         	call	_clearResponse	;wreg free
  1354  000274  0012               	return	
  1355  000276                     __end_of_writeMultipleCoils:
  1356                           	opt stack 0
  1357                           tblptru	equ	0xFF8
  1358                           tblptrh	equ	0xFF7
  1359                           tblptrl	equ	0xFF6
  1360                           tablat	equ	0xFF5
  1361                           prodh	equ	0xFF4
  1362                           prodl	equ	0xFF3
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           indf2	equ	0xFDF
  1366                           fsr2h	equ	0xFDA
  1367                           fsr2l	equ	0xFD9
  1368                           status	equ	0xFD8
  1369                           
  1370 ;; *************** function _writeMultipleRegs *****************
  1371 ;; Defined at:
  1372 ;;		line 253 in file "modbus.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  i               2   58[COMRAM] unsigned int 
  1377 ;;  crc             2   55[COMRAM] unsigned int 
  1378 ;;  valToWrite      2   53[COMRAM] unsigned int 
  1379 ;;  wmr_Address     2   51[COMRAM] unsigned int 
  1380 ;;  wmr_numBytes    2   49[COMRAM] unsigned int 
  1381 ;;  wmr_numBytes    2   47[COMRAM] unsigned int 
  1382 ;;  wmr_numRegsL    2   45[COMRAM] unsigned int 
  1383 ;;  wmr_numRegsH    2   43[COMRAM] unsigned int 
  1384 ;;  wmr_AddressL    2   41[COMRAM] unsigned int 
  1385 ;;  wmr_AddressH    2   39[COMRAM] unsigned int 
  1386 ;;  wmr_numRegs     2   37[COMRAM] unsigned int 
  1387 ;;  valToWriteLo    2   35[COMRAM] unsigned int 
  1388 ;;  valToWriteHi    2   33[COMRAM] unsigned int 
  1389 ;;  j               1   57[COMRAM] unsigned char 
  1390 ;; Return value:  Size  Location     Type
  1391 ;;		None               void
  1392 ;; Registers used:
  1393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Locals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;Total ram usage:       31 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    3
  1406 ;; This function calls:
  1407 ;;		_clearResponse
  1408 ;;		_generateCRC
  1409 ;; This function is called by:
  1410 ;;		_decodeIt
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text3
  1415  0006CA                     __ptext3:
  1416                           	opt stack 0
  1417  0006CA                     _writeMultipleRegs:
  1418                           	opt stack 26
  1419                           
  1420                           ;modbus.c: 257: unsigned int wmr_Address = 0;
  1421                           
  1422                           ;incstack = 0
  1423                           ;incstack = 0
  1424  0006CA  0E00               	movlw	0
  1425  0006CC  6E35               	movwf	writeMultipleRegs@wmr_Address+1,c
  1426  0006CE  0E00               	movlw	0
  1427  0006D0  6E34               	movwf	writeMultipleRegs@wmr_Address,c
  1428                           
  1429                           ;modbus.c: 258: unsigned int wmr_AddressHigh = 0;
  1430  0006D2  0E00               	movlw	0
  1431  0006D4  6E29               	movwf	writeMultipleRegs@wmr_AddressHigh+1,c
  1432  0006D6  0E00               	movlw	0
  1433  0006D8  6E28               	movwf	writeMultipleRegs@wmr_AddressHigh,c
  1434                           
  1435                           ;modbus.c: 259: unsigned int wmr_AddressLow = 0;
  1436  0006DA  0E00               	movlw	0
  1437  0006DC  6E2B               	movwf	writeMultipleRegs@wmr_AddressLow+1,c
  1438  0006DE  0E00               	movlw	0
  1439  0006E0  6E2A               	movwf	writeMultipleRegs@wmr_AddressLow,c
  1440                           
  1441                           ;modbus.c: 260: unsigned int wmr_numRegs = 0;
  1442  0006E2  0E00               	movlw	0
  1443  0006E4  6E27               	movwf	writeMultipleRegs@wmr_numRegs+1,c
  1444  0006E6  0E00               	movlw	0
  1445  0006E8  6E26               	movwf	writeMultipleRegs@wmr_numRegs,c
  1446                           
  1447                           ;modbus.c: 261: unsigned int wmr_numRegsHigh = 0;
  1448  0006EA  0E00               	movlw	0
  1449  0006EC  6E2D               	movwf	writeMultipleRegs@wmr_numRegsHigh+1,c
  1450  0006EE  0E00               	movlw	0
  1451  0006F0  6E2C               	movwf	writeMultipleRegs@wmr_numRegsHigh,c
  1452                           
  1453                           ;modbus.c: 262: unsigned int wmr_numRegsLow = 0;
  1454  0006F2  0E00               	movlw	0
  1455  0006F4  6E2F               	movwf	writeMultipleRegs@wmr_numRegsLow+1,c
  1456  0006F6  0E00               	movlw	0
  1457  0006F8  6E2E               	movwf	writeMultipleRegs@wmr_numRegsLow,c
  1458                           
  1459                           ;modbus.c: 263: unsigned int wmr_numBytes = 0;
  1460  0006FA  0E00               	movlw	0
  1461  0006FC  6E31               	movwf	writeMultipleRegs@wmr_numBytes+1,c
  1462  0006FE  0E00               	movlw	0
  1463  000700  6E30               	movwf	writeMultipleRegs@wmr_numBytes,c
  1464                           
  1465                           ;modbus.c: 264: unsigned int wmr_numBytesTST = 0;
  1466  000702  0E00               	movlw	0
  1467  000704  6E33               	movwf	writeMultipleRegs@wmr_numBytesTST+1,c
  1468  000706  0E00               	movlw	0
  1469  000708  6E32               	movwf	writeMultipleRegs@wmr_numBytesTST,c
  1470                           
  1471                           ;modbus.c: 265: unsigned int valToWrite = 0;
  1472  00070A  0E00               	movlw	0
  1473  00070C  6E37               	movwf	writeMultipleRegs@valToWrite+1,c
  1474  00070E  0E00               	movlw	0
  1475  000710  6E36               	movwf	writeMultipleRegs@valToWrite,c
  1476                           
  1477                           ;modbus.c: 266: unsigned int valToWriteHigh = 0;
  1478  000712  0E00               	movlw	0
  1479  000714  6E23               	movwf	writeMultipleRegs@valToWriteHigh+1,c
  1480  000716  0E00               	movlw	0
  1481  000718  6E22               	movwf	writeMultipleRegs@valToWriteHigh,c
  1482                           
  1483                           ;modbus.c: 267: unsigned int valToWriteLow = 0;
  1484  00071A  0E00               	movlw	0
  1485  00071C  6E25               	movwf	writeMultipleRegs@valToWriteLow+1,c
  1486  00071E  0E00               	movlw	0
  1487  000720  6E24               	movwf	writeMultipleRegs@valToWriteLow,c
  1488                           
  1489                           ;modbus.c: 269: unsigned char j = 0;
  1490  000722  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1491  000724  0E00               	movlw	0
  1492  000726  6E3A               	movwf	writeMultipleRegs@j,c
  1493  000728  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1494                           
  1495                           ;modbus.c: 270: unsigned int crc = 0;
  1496  00072A  0E00               	movlw	0
  1497  00072C  6E39               	movwf	writeMultipleRegs@crc+1,c
  1498  00072E  0E00               	movlw	0
  1499  000730  6E38               	movwf	writeMultipleRegs@crc,c
  1500                           
  1501                           ;modbus.c: 271: unsigned int i = 0;
  1502  000732  0E00               	movlw	0
  1503  000734  6E3C               	movwf	writeMultipleRegs@i+1,c
  1504  000736  0E00               	movlw	0
  1505  000738  6E3B               	movwf	writeMultipleRegs@i,c
  1506                           
  1507                           ;modbus.c: 274: wmr_Address = received[2];
  1508  00073A  0100               	movlb	0	; () banked
  1509  00073C  C062  F034         	movff	_received+2,writeMultipleRegs@wmr_Address	;volatile
  1510  000740  6A35               	clrf	writeMultipleRegs@wmr_Address+1,c
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;modbus.c: 275: wmr_Address <<= 8;
  1514  000742  5034               	movf	writeMultipleRegs@wmr_Address,w,c
  1515  000744  6E35               	movwf	writeMultipleRegs@wmr_Address+1,c
  1516  000746  6A34               	clrf	writeMultipleRegs@wmr_Address,c
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;modbus.c: 277: wmr_Address |= received[3];
  1520  000748  0100               	movlb	0	; () banked
  1521  00074A  0100               	movlb	0	; () banked
  1522  00074C  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  1523  00074E  1234               	iorwf	writeMultipleRegs@wmr_Address,f,c
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;modbus.c: 278: wmr_AddressHigh = received[2];
  1527  000750  0100               	movlb	0	; () banked
  1528  000752  C062  F028         	movff	_received+2,writeMultipleRegs@wmr_AddressHigh	;volatile
  1529  000756  6A29               	clrf	writeMultipleRegs@wmr_AddressHigh+1,c
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;modbus.c: 279: wmr_AddressLow = received[3];
  1533  000758  0100               	movlb	0	; () banked
  1534  00075A  C063  F02A         	movff	_received+3,writeMultipleRegs@wmr_AddressLow	;volatile
  1535  00075E  6A2B               	clrf	writeMultipleRegs@wmr_AddressLow+1,c
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;modbus.c: 283: wmr_numRegs = received[4];
  1539  000760  0100               	movlb	0	; () banked
  1540  000762  C064  F026         	movff	_received+4,writeMultipleRegs@wmr_numRegs	;volatile
  1541  000766  6A27               	clrf	writeMultipleRegs@wmr_numRegs+1,c
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;modbus.c: 284: wmr_numRegs <<= 8;
  1545  000768  5026               	movf	writeMultipleRegs@wmr_numRegs,w,c
  1546  00076A  6E27               	movwf	writeMultipleRegs@wmr_numRegs+1,c
  1547  00076C  6A26               	clrf	writeMultipleRegs@wmr_numRegs,c
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;modbus.c: 285: wmr_numRegs |= received[5];
  1551  00076E  0100               	movlb	0	; () banked
  1552  000770  0100               	movlb	0	; () banked
  1553  000772  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  1554  000774  1226               	iorwf	writeMultipleRegs@wmr_numRegs,f,c
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;modbus.c: 286: wmr_numRegsHigh = received[4];
  1558  000776  0100               	movlb	0	; () banked
  1559  000778  C064  F02C         	movff	_received+4,writeMultipleRegs@wmr_numRegsHigh	;volatile
  1560  00077C  6A2D               	clrf	writeMultipleRegs@wmr_numRegsHigh+1,c
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;modbus.c: 287: wmr_numRegsLow = received[5];
  1564  00077E  0100               	movlb	0	; () banked
  1565  000780  C065  F02E         	movff	_received+5,writeMultipleRegs@wmr_numRegsLow	;volatile
  1566  000784  6A2F               	clrf	writeMultipleRegs@wmr_numRegsLow+1,c
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;modbus.c: 289: wmr_numBytes = received[6];
  1570  000786  0100               	movlb	0	; () banked
  1571  000788  C066  F030         	movff	_received+6,writeMultipleRegs@wmr_numBytes	;volatile
  1572  00078C  6A31               	clrf	writeMultipleRegs@wmr_numBytes+1,c
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;modbus.c: 291: j = 7;
  1576  00078E  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1577  000790  0E07               	movlw	7
  1578  000792  6E3A               	movwf	writeMultipleRegs@j,c
  1579  000794  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;modbus.c: 297: wmr_numBytesTST = wmr_numBytes /2;
  1583  000796  90D8               	bcf	status,0,c
  1584  000798  3031               	rrcf	writeMultipleRegs@wmr_numBytes+1,w,c
  1585  00079A  6E33               	movwf	writeMultipleRegs@wmr_numBytesTST+1,c
  1586  00079C  3030               	rrcf	writeMultipleRegs@wmr_numBytes,w,c
  1587  00079E  6E32               	movwf	writeMultipleRegs@wmr_numBytesTST,c
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;modbus.c: 299: for(i=0;i<wmr_numBytesTST;i++)
  1591  0007A0  0E00               	movlw	0
  1592  0007A2  6E3C               	movwf	writeMultipleRegs@i+1,c
  1593  0007A4  0E00               	movlw	0
  1594  0007A6  6E3B               	movwf	writeMultipleRegs@i,c
  1595  0007A8  D03D               	goto	l2475
  1596  0007AA                     l2461:
  1597                           
  1598                           ;modbus.c: 300: {
  1599                           ;modbus.c: 301: valToWrite = received[j];
  1600  0007AA  503A               	movf	writeMultipleRegs@j,w,c
  1601  0007AC  0D01               	mullw	1
  1602  0007AE  0100               	movlb	0	; () banked
  1603  0007B0  0E60               	movlw	low _received	;volatile
  1604  0007B2  24F3               	addwf	prodl,w,c
  1605  0007B4  6ED9               	movwf	fsr2l,c
  1606  0007B6  0100               	movlb	0	; () banked
  1607  0007B8  0E00               	movlw	high _received	;volatile
  1608  0007BA  20F4               	addwfc	prodh,w,c
  1609  0007BC  6EDA               	movwf	fsr2h,c
  1610  0007BE  50DF               	movf	indf2,w,c
  1611  0007C0  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1612  0007C2  501E               	movf	??_writeMultipleRegs,w,c
  1613  0007C4  6E36               	movwf	writeMultipleRegs@valToWrite,c
  1614  0007C6  6A37               	clrf	writeMultipleRegs@valToWrite+1,c
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;modbus.c: 302: valToWrite <<= 8;
  1618  0007C8  5036               	movf	writeMultipleRegs@valToWrite,w,c
  1619  0007CA  6E37               	movwf	writeMultipleRegs@valToWrite+1,c
  1620  0007CC  6A36               	clrf	writeMultipleRegs@valToWrite,c
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;modbus.c: 303: j++;
  1624  0007CE  2A3A               	incf	writeMultipleRegs@j,f,c
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;modbus.c: 304: valToWrite |= received[j];
  1628  0007D0  503A               	movf	writeMultipleRegs@j,w,c
  1629  0007D2  0D01               	mullw	1
  1630  0007D4  0100               	movlb	0	; () banked
  1631  0007D6  0E60               	movlw	low _received	;volatile
  1632  0007D8  24F3               	addwf	prodl,w,c
  1633  0007DA  6ED9               	movwf	fsr2l,c
  1634  0007DC  0100               	movlb	0	; () banked
  1635  0007DE  0E00               	movlw	high _received	;volatile
  1636  0007E0  20F4               	addwfc	prodh,w,c
  1637  0007E2  6EDA               	movwf	fsr2h,c
  1638  0007E4  50DF               	movf	indf2,w,c
  1639  0007E6  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1640  0007E8  501E               	movf	??_writeMultipleRegs,w,c
  1641  0007EA  1236               	iorwf	writeMultipleRegs@valToWrite,f,c
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;modbus.c: 305: j++;
  1645  0007EC  2A3A               	incf	writeMultipleRegs@j,f,c
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;modbus.c: 307: holdingReg[wmr_Address + i] = valToWrite;
  1649  0007EE  C034  F01E         	movff	writeMultipleRegs@wmr_Address,??_writeMultipleRegs
  1650  0007F2  C035  F01F         	movff	writeMultipleRegs@wmr_Address+1,??_writeMultipleRegs+1
  1651  0007F6  503B               	movf	writeMultipleRegs@i,w,c
  1652  0007F8  261E               	addwf	??_writeMultipleRegs,f,c
  1653  0007FA  503C               	movf	writeMultipleRegs@i+1,w,c
  1654  0007FC  221F               	addwfc	??_writeMultipleRegs+1,f,c
  1655  0007FE  90D8               	bcf	status,0,c
  1656  000800  341E               	rlcf	??_writeMultipleRegs,w,c
  1657  000802  6E20               	movwf	(??_writeMultipleRegs+2)& (0+255),c
  1658  000804  341F               	rlcf	??_writeMultipleRegs+1,w,c
  1659  000806  6E21               	movwf	(??_writeMultipleRegs+3)& (0+255),c
  1660  000808  0102               	movlb	2	; () banked
  1661  00080A  0E00               	movlw	low _holdingReg	;volatile
  1662  00080C  2420               	addwf	??_writeMultipleRegs+2,w,c
  1663  00080E  6ED9               	movwf	fsr2l,c
  1664  000810  0102               	movlb	2	; () banked
  1665  000812  0E02               	movlw	high _holdingReg	;volatile
  1666  000814  2021               	addwfc	??_writeMultipleRegs+3,w,c
  1667  000816  6EDA               	movwf	fsr2h,c
  1668  000818  C036  FFDE         	movff	writeMultipleRegs@valToWrite,postinc2
  1669  00081C  C037  FFDD         	movff	writeMultipleRegs@valToWrite+1,postdec2
  1670                           
  1671                           ; BSR set to: 2
  1672  000820  4A3B               	infsnz	writeMultipleRegs@i,f,c
  1673  000822  2A3C               	incf	writeMultipleRegs@i+1,f,c
  1674  000824                     l2475:
  1675  000824  5032               	movf	writeMultipleRegs@wmr_numBytesTST,w,c
  1676  000826  5C3B               	subwf	writeMultipleRegs@i,w,c
  1677  000828  5033               	movf	writeMultipleRegs@wmr_numBytesTST+1,w,c
  1678  00082A  583C               	subwfb	writeMultipleRegs@i+1,w,c
  1679  00082C  A0D8               	btfss	status,0,c
  1680  00082E  D7BD               	goto	l2461
  1681                           
  1682                           ;modbus.c: 308: }
  1683                           ;modbus.c: 322: response[0] = 2;
  1684  000830  0E02               	movlw	2
  1685  000832  0101               	movlb	1	; () banked
  1686  000834  0101               	movlb	1	; () banked
  1687  000836  6F00               	movwf	_response& (0+255),b	;volatile
  1688                           
  1689                           ;modbus.c: 323: response[1] = 0x10;
  1690  000838  0E10               	movlw	16
  1691  00083A  0101               	movlb	1	; () banked
  1692  00083C  0101               	movlb	1	; () banked
  1693  00083E  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;modbus.c: 324: response[2] = wmr_AddressHigh;
  1697  000840  C028  F102         	movff	writeMultipleRegs@wmr_AddressHigh,_response+2	;volatile
  1698                           
  1699                           ; BSR set to: 1
  1700                           ;modbus.c: 325: response[3] = wmr_AddressLow;
  1701  000844  C02A  F103         	movff	writeMultipleRegs@wmr_AddressLow,_response+3	;volatile
  1702                           
  1703                           ; BSR set to: 1
  1704                           ;modbus.c: 326: response[4] = wmr_numRegsHigh;
  1705  000848  C02C  F104         	movff	writeMultipleRegs@wmr_numRegsHigh,_response+4	;volatile
  1706                           
  1707                           ; BSR set to: 1
  1708                           ;modbus.c: 327: response[5] = wmr_numRegsLow;
  1709  00084C  C02E  F105         	movff	writeMultipleRegs@wmr_numRegsLow,_response+5	;volatile
  1710                           
  1711                           ; BSR set to: 1
  1712                           ;modbus.c: 329: crc = generateCRC(8);
  1713  000850  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1714  000852  0E08               	movlw	8
  1715  000854  6E0F               	movwf	?_generateCRC,c
  1716  000856  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1717  000858  ECA5  F008         	call	_generateCRC	;wreg free
  1718  00085C  C00F  F038         	movff	?_generateCRC,writeMultipleRegs@crc
  1719  000860  C010  F039         	movff	?_generateCRC+1,writeMultipleRegs@crc+1
  1720                           
  1721                           ;modbus.c: 331: response[6] = crc >> 8;
  1722  000864  5039               	movf	writeMultipleRegs@crc+1,w,c
  1723  000866  0101               	movlb	1	; () banked
  1724  000868  0101               	movlb	1	; () banked
  1725  00086A  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  1726                           
  1727                           ; BSR set to: 1
  1728                           ;modbus.c: 332: response[7] = crc;
  1729  00086C  C038  F107         	movff	writeMultipleRegs@crc,_response+7	;volatile
  1730                           
  1731                           ; BSR set to: 1
  1732                           ;modbus.c: 334: LATCbits.LATC1 = 1;
  1733  000870  828B               	bsf	3979,1,c	;volatile
  1734                           
  1735                           ; BSR set to: 1
  1736                           ;modbus.c: 335: for(i=0;i!=9;i++){
  1737  000872  0E00               	movlw	0
  1738  000874  6E3C               	movwf	writeMultipleRegs@i+1,c
  1739  000876  0E00               	movlw	0
  1740  000878  6E3B               	movwf	writeMultipleRegs@i,c
  1741  00087A                     
  1742                           ; BSR set to: 1
  1743  00087A  503B               	movf	writeMultipleRegs@i,w,c
  1744  00087C  0A09               	xorlw	9
  1745  00087E  103C               	iorwf	writeMultipleRegs@i+1,w,c
  1746  000880  B4D8               	btfsc	status,2,c
  1747  000882  D00F               	goto	l223
  1748  000884                     l224:
  1749  000884  A2AC               	btfss	4012,1,c	;volatile
  1750  000886  D7FE               	goto	l224
  1751                           
  1752                           ;modbus.c: 337: TXREG1 = response[i];
  1753  000888  0101               	movlb	1	; () banked
  1754  00088A  0E00               	movlw	low _response	;volatile
  1755  00088C  243B               	addwf	writeMultipleRegs@i,w,c
  1756  00088E  6ED9               	movwf	fsr2l,c
  1757  000890  0101               	movlb	1	; () banked
  1758  000892  0E01               	movlw	high _response	;volatile
  1759  000894  203C               	addwfc	writeMultipleRegs@i+1,w,c
  1760  000896  6EDA               	movwf	fsr2h,c
  1761  000898  50DF               	movf	indf2,w,c
  1762  00089A  6EAD               	movwf	4013,c	;volatile
  1763                           
  1764                           ; BSR set to: 1
  1765  00089C  4A3B               	infsnz	writeMultipleRegs@i,f,c
  1766  00089E  2A3C               	incf	writeMultipleRegs@i+1,f,c
  1767  0008A0  D7EC               	goto	L6
  1768  0008A2                     l223:
  1769                           
  1770                           ; BSR set to: 1
  1771                           ;modbus.c: 338: }
  1772                           ;modbus.c: 339: LATCbits.LATC1 = 0;
  1773  0008A2  928B               	bcf	3979,1,c	;volatile
  1774                           
  1775                           ; BSR set to: 1
  1776                           ;modbus.c: 340: j=0;
  1777  0008A4  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1778  0008A6  0E00               	movlw	0
  1779  0008A8  6E3A               	movwf	writeMultipleRegs@j,c
  1780  0008AA  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1781                           
  1782                           ; BSR set to: 1
  1783                           ;modbus.c: 342: clearResponse();
  1784  0008AC  ECBD  F009         	call	_clearResponse	;wreg free
  1785  0008B0  0012               	return	
  1786  0008B2                     __end_of_writeMultipleRegs:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           prodh	equ	0xFF4
  1793                           prodl	equ	0xFF3
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           indf2	equ	0xFDF
  1797                           postinc2	equ	0xFDE
  1798                           postdec2	equ	0xFDD
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           
  1803 ;; *************** function _writeReg *****************
  1804 ;; Defined at:
  1805 ;;		line 196 in file "modbus.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  i               2   45[COMRAM] unsigned int 
  1810 ;;  crc             2   43[COMRAM] unsigned int 
  1811 ;;  wr_valToWrit    2   41[COMRAM] unsigned int 
  1812 ;;  wr_Address      2   39[COMRAM] unsigned int 
  1813 ;;  wr_valToWrit    2   37[COMRAM] unsigned int 
  1814 ;;  wr_valToWrit    2   35[COMRAM] unsigned int 
  1815 ;;  wr_AddressHi    2   33[COMRAM] unsigned int 
  1816 ;;  wr_AddressLo    2   31[COMRAM] unsigned int 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;		None               void
  1819 ;; Registers used:
  1820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;Total ram usage:       18 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    3
  1833 ;; This function calls:
  1834 ;;		_clearResponse
  1835 ;;		_generateCRC
  1836 ;; This function is called by:
  1837 ;;		_decodeIt
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text4
  1842  000F1C                     __ptext4:
  1843                           	opt stack 0
  1844  000F1C                     _writeReg:
  1845                           	opt stack 26
  1846                           
  1847                           ;modbus.c: 200: unsigned int wr_AddressLow = 0;
  1848                           
  1849                           ;incstack = 0
  1850                           ;incstack = 0
  1851  000F1C  0E00               	movlw	0
  1852  000F1E  6E21               	movwf	writeReg@wr_AddressLow+1,c
  1853  000F20  0E00               	movlw	0
  1854  000F22  6E20               	movwf	writeReg@wr_AddressLow,c
  1855                           
  1856                           ;modbus.c: 201: unsigned int wr_AddressHigh = 0;
  1857  000F24  0E00               	movlw	0
  1858  000F26  6E23               	movwf	writeReg@wr_AddressHigh+1,c
  1859  000F28  0E00               	movlw	0
  1860  000F2A  6E22               	movwf	writeReg@wr_AddressHigh,c
  1861                           
  1862                           ;modbus.c: 202: unsigned int wr_Address = 0;
  1863  000F2C  0E00               	movlw	0
  1864  000F2E  6E29               	movwf	writeReg@wr_Address+1,c
  1865  000F30  0E00               	movlw	0
  1866  000F32  6E28               	movwf	writeReg@wr_Address,c
  1867                           
  1868                           ;modbus.c: 204: unsigned int wr_valToWrite = 0;
  1869  000F34  0E00               	movlw	0
  1870  000F36  6E2B               	movwf	writeReg@wr_valToWrite+1,c
  1871  000F38  0E00               	movlw	0
  1872  000F3A  6E2A               	movwf	writeReg@wr_valToWrite,c
  1873                           
  1874                           ;modbus.c: 205: unsigned int wr_valToWriteLow = 0;
  1875  000F3C  0E00               	movlw	0
  1876  000F3E  6E25               	movwf	writeReg@wr_valToWriteLow+1,c
  1877  000F40  0E00               	movlw	0
  1878  000F42  6E24               	movwf	writeReg@wr_valToWriteLow,c
  1879                           
  1880                           ;modbus.c: 206: unsigned int wr_valToWriteHigh = 0;
  1881  000F44  0E00               	movlw	0
  1882  000F46  6E27               	movwf	writeReg@wr_valToWriteHigh+1,c
  1883  000F48  0E00               	movlw	0
  1884  000F4A  6E26               	movwf	writeReg@wr_valToWriteHigh,c
  1885                           
  1886                           ;modbus.c: 208: unsigned int crc = 0;
  1887  000F4C  0E00               	movlw	0
  1888  000F4E  6E2D               	movwf	writeReg@crc+1,c
  1889  000F50  0E00               	movlw	0
  1890  000F52  6E2C               	movwf	writeReg@crc,c
  1891                           
  1892                           ;modbus.c: 209: unsigned int i = 0;
  1893  000F54  0E00               	movlw	0
  1894  000F56  6E2F               	movwf	writeReg@i+1,c
  1895  000F58  0E00               	movlw	0
  1896  000F5A  6E2E               	movwf	writeReg@i,c
  1897                           
  1898                           ;modbus.c: 212: wr_Address = received[2];
  1899  000F5C  0100               	movlb	0	; () banked
  1900  000F5E  C062  F028         	movff	_received+2,writeReg@wr_Address	;volatile
  1901  000F62  6A29               	clrf	writeReg@wr_Address+1,c
  1902                           
  1903                           ;modbus.c: 213: wr_Address <<= 8;
  1904  000F64  5028               	movf	writeReg@wr_Address,w,c
  1905  000F66  6E29               	movwf	writeReg@wr_Address+1,c
  1906  000F68  6A28               	clrf	writeReg@wr_Address,c
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;modbus.c: 214: wr_Address |= received[3];
  1910  000F6A  0100               	movlb	0	; () banked
  1911  000F6C  0100               	movlb	0	; () banked
  1912  000F6E  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  1913  000F70  1228               	iorwf	writeReg@wr_Address,f,c
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;modbus.c: 216: wr_AddressLow = received[3];
  1917  000F72  0100               	movlb	0	; () banked
  1918  000F74  C063  F020         	movff	_received+3,writeReg@wr_AddressLow	;volatile
  1919  000F78  6A21               	clrf	writeReg@wr_AddressLow+1,c
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;modbus.c: 217: wr_AddressHigh = received[2];
  1923  000F7A  0100               	movlb	0	; () banked
  1924  000F7C  C062  F022         	movff	_received+2,writeReg@wr_AddressHigh	;volatile
  1925  000F80  6A23               	clrf	writeReg@wr_AddressHigh+1,c
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;modbus.c: 220: wr_valToWrite = received[4];
  1929  000F82  0100               	movlb	0	; () banked
  1930  000F84  C064  F02A         	movff	_received+4,writeReg@wr_valToWrite	;volatile
  1931  000F88  6A2B               	clrf	writeReg@wr_valToWrite+1,c
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;modbus.c: 221: wr_valToWrite <<= 8;
  1935  000F8A  502A               	movf	writeReg@wr_valToWrite,w,c
  1936  000F8C  6E2B               	movwf	writeReg@wr_valToWrite+1,c
  1937  000F8E  6A2A               	clrf	writeReg@wr_valToWrite,c
  1938                           
  1939                           ;modbus.c: 222: wr_valToWrite |= received[5];
  1940  000F90  0100               	movlb	0	; () banked
  1941  000F92  0100               	movlb	0	; () banked
  1942  000F94  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  1943  000F96  122A               	iorwf	writeReg@wr_valToWrite,f,c
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;modbus.c: 224: wr_valToWriteLow = received[5];
  1947  000F98  0100               	movlb	0	; () banked
  1948  000F9A  C065  F024         	movff	_received+5,writeReg@wr_valToWriteLow	;volatile
  1949  000F9E  6A25               	clrf	writeReg@wr_valToWriteLow+1,c
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;modbus.c: 225: wr_valToWriteHigh = received[4];
  1953  000FA0  0100               	movlb	0	; () banked
  1954  000FA2  C064  F026         	movff	_received+4,writeReg@wr_valToWriteHigh	;volatile
  1955  000FA6  6A27               	clrf	writeReg@wr_valToWriteHigh+1,c
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;modbus.c: 227: holdingReg[wr_Address] = wr_valToWrite;
  1959  000FA8  90D8               	bcf	status,0,c
  1960  000FAA  3428               	rlcf	writeReg@wr_Address,w,c
  1961  000FAC  6E1E               	movwf	??_writeReg& (0+255),c
  1962  000FAE  3429               	rlcf	writeReg@wr_Address+1,w,c
  1963  000FB0  6E1F               	movwf	(??_writeReg+1)& (0+255),c
  1964  000FB2  0102               	movlb	2	; () banked
  1965  000FB4  0E00               	movlw	low _holdingReg	;volatile
  1966  000FB6  241E               	addwf	??_writeReg,w,c
  1967  000FB8  6ED9               	movwf	fsr2l,c
  1968  000FBA  0102               	movlb	2	; () banked
  1969  000FBC  0E02               	movlw	high _holdingReg	;volatile
  1970  000FBE  201F               	addwfc	??_writeReg+1,w,c
  1971  000FC0  6EDA               	movwf	fsr2h,c
  1972  000FC2  C02A  FFDE         	movff	writeReg@wr_valToWrite,postinc2
  1973  000FC6  C02B  FFDD         	movff	writeReg@wr_valToWrite+1,postdec2
  1974                           
  1975                           ; BSR set to: 2
  1976                           ;modbus.c: 229: response[0] = 2;
  1977  000FCA  0E02               	movlw	2
  1978  000FCC  0101               	movlb	1	; () banked
  1979  000FCE  0101               	movlb	1	; () banked
  1980  000FD0  6F00               	movwf	_response& (0+255),b	;volatile
  1981                           
  1982                           ; BSR set to: 1
  1983                           ;modbus.c: 230: response[1] = 0x06;
  1984  000FD2  0E06               	movlw	6
  1985  000FD4  0101               	movlb	1	; () banked
  1986  000FD6  0101               	movlb	1	; () banked
  1987  000FD8  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  1988                           
  1989                           ; BSR set to: 1
  1990                           ;modbus.c: 231: response[3] = wr_AddressLow;
  1991  000FDA  C020  F103         	movff	writeReg@wr_AddressLow,_response+3	;volatile
  1992                           
  1993                           ; BSR set to: 1
  1994                           ;modbus.c: 232: response[2] = wr_AddressHigh;
  1995  000FDE  C022  F102         	movff	writeReg@wr_AddressHigh,_response+2	;volatile
  1996                           
  1997                           ; BSR set to: 1
  1998                           ;modbus.c: 235: response[4] = wr_valToWriteHigh;
  1999  000FE2  C026  F104         	movff	writeReg@wr_valToWriteHigh,_response+4	;volatile
  2000                           
  2001                           ; BSR set to: 1
  2002                           ;modbus.c: 236: response[5] = wr_valToWriteLow;
  2003  000FE6  C024  F105         	movff	writeReg@wr_valToWriteLow,_response+5	;volatile
  2004                           
  2005                           ; BSR set to: 1
  2006                           ;modbus.c: 238: crc = generateCRC(8);
  2007  000FEA  6E1E               	movwf	??_writeReg& (0+255),c
  2008  000FEC  0E08               	movlw	8
  2009  000FEE  6E0F               	movwf	?_generateCRC,c
  2010  000FF0  501E               	movf	??_writeReg& (0+255),w,c
  2011  000FF2  ECA5  F008         	call	_generateCRC	;wreg free
  2012  000FF6  C00F  F02C         	movff	?_generateCRC,writeReg@crc
  2013  000FFA  C010  F02D         	movff	?_generateCRC+1,writeReg@crc+1
  2014                           
  2015                           ;modbus.c: 240: response[6] = crc >> 8;
  2016  000FFE  502D               	movf	writeReg@crc+1,w,c
  2017  001000  0101               	movlb	1	; () banked
  2018  001002  0101               	movlb	1	; () banked
  2019  001004  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  2020                           
  2021                           ; BSR set to: 1
  2022                           ;modbus.c: 241: response[7] = crc;
  2023  001006  C02C  F107         	movff	writeReg@crc,_response+7	;volatile
  2024                           
  2025                           ; BSR set to: 1
  2026                           ;modbus.c: 243: LATCbits.LATC1 = 1;
  2027  00100A  828B               	bsf	3979,1,c	;volatile
  2028                           
  2029                           ; BSR set to: 1
  2030                           ;modbus.c: 244: for(i=0;i!=9;i++){
  2031  00100C  0E00               	movlw	0
  2032  00100E  6E2F               	movwf	writeReg@i+1,c
  2033  001010  0E00               	movlw	0
  2034  001012  6E2E               	movwf	writeReg@i,c
  2035  001014                     
  2036                           ; BSR set to: 1
  2037  001014  502E               	movf	writeReg@i,w,c
  2038  001016  0A09               	xorlw	9
  2039  001018  102F               	iorwf	writeReg@i+1,w,c
  2040  00101A  B4D8               	btfsc	status,2,c
  2041  00101C  D00F               	goto	l212
  2042  00101E                     l213:
  2043  00101E  A2AC               	btfss	4012,1,c	;volatile
  2044  001020  D7FE               	goto	l213
  2045                           
  2046                           ;modbus.c: 246: TXREG1 = response[i];
  2047  001022  0101               	movlb	1	; () banked
  2048  001024  0E00               	movlw	low _response	;volatile
  2049  001026  242E               	addwf	writeReg@i,w,c
  2050  001028  6ED9               	movwf	fsr2l,c
  2051  00102A  0101               	movlb	1	; () banked
  2052  00102C  0E01               	movlw	high _response	;volatile
  2053  00102E  202F               	addwfc	writeReg@i+1,w,c
  2054  001030  6EDA               	movwf	fsr2h,c
  2055  001032  50DF               	movf	indf2,w,c
  2056  001034  6EAD               	movwf	4013,c	;volatile
  2057                           
  2058                           ; BSR set to: 1
  2059  001036  4A2E               	infsnz	writeReg@i,f,c
  2060  001038  2A2F               	incf	writeReg@i+1,f,c
  2061  00103A  D7EC               	goto	L7
  2062  00103C                     l212:
  2063                           
  2064                           ; BSR set to: 1
  2065                           ;modbus.c: 247: }
  2066                           ;modbus.c: 248: LATCbits.LATC1 = 0;
  2067  00103C  928B               	bcf	3979,1,c	;volatile
  2068                           
  2069                           ; BSR set to: 1
  2070                           ;modbus.c: 249: clearResponse();
  2071  00103E  ECBD  F009         	call	_clearResponse	;wreg free
  2072  001042  0012               	return	
  2073  001044                     __end_of_writeReg:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           postinc0	equ	0xFEE
  2082                           wreg	equ	0xFE8
  2083                           indf2	equ	0xFDF
  2084                           postinc2	equ	0xFDE
  2085                           postdec2	equ	0xFDD
  2086                           fsr2h	equ	0xFDA
  2087                           fsr2l	equ	0xFD9
  2088                           status	equ	0xFD8
  2089                           
  2090 ;; *************** function _writeCoil *****************
  2091 ;; Defined at:
  2092 ;;		line 508 in file "modbus.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  i               2   44[COMRAM] int 
  2097 ;;  wc_Address      2   42[COMRAM] unsigned int 
  2098 ;;  crc             2   40[COMRAM] unsigned int 
  2099 ;;  wc_valToWrit    2   38[COMRAM] unsigned int 
  2100 ;;  wc_valToWrit    2   36[COMRAM] unsigned int 
  2101 ;;  wc_valToWrit    2   34[COMRAM] unsigned int 
  2102 ;;  wc_AddressHi    2   32[COMRAM] unsigned int 
  2103 ;;  wc_AddressLo    2   30[COMRAM] unsigned int 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;		None               void
  2106 ;; Registers used:
  2107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;Total ram usage:       17 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    3
  2120 ;; This function calls:
  2121 ;;		_clearResponse
  2122 ;;		_generateCRC
  2123 ;; This function is called by:
  2124 ;;		_decodeIt
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text5
  2129  000DE6                     __ptext5:
  2130                           	opt stack 0
  2131  000DE6                     _writeCoil:
  2132                           	opt stack 26
  2133                           
  2134                           ;modbus.c: 512: unsigned int wc_AddressLow = 0;
  2135                           
  2136                           ;incstack = 0
  2137                           ;incstack = 0
  2138  000DE6  0E00               	movlw	0
  2139  000DE8  6E20               	movwf	writeCoil@wc_AddressLow+1,c
  2140  000DEA  0E00               	movlw	0
  2141  000DEC  6E1F               	movwf	writeCoil@wc_AddressLow,c
  2142                           
  2143                           ;modbus.c: 513: unsigned int wc_AddressHigh = 0;
  2144  000DEE  0E00               	movlw	0
  2145  000DF0  6E22               	movwf	writeCoil@wc_AddressHigh+1,c
  2146  000DF2  0E00               	movlw	0
  2147  000DF4  6E21               	movwf	writeCoil@wc_AddressHigh,c
  2148                           
  2149                           ;modbus.c: 514: unsigned int wc_Address = 0;
  2150  000DF6  0E00               	movlw	0
  2151  000DF8  6E2C               	movwf	writeCoil@wc_Address+1,c
  2152  000DFA  0E00               	movlw	0
  2153  000DFC  6E2B               	movwf	writeCoil@wc_Address,c
  2154                           
  2155                           ;modbus.c: 516: unsigned int wc_valToWrite = 0;
  2156  000DFE  0E00               	movlw	0
  2157  000E00  6E28               	movwf	writeCoil@wc_valToWrite+1,c
  2158  000E02  0E00               	movlw	0
  2159  000E04  6E27               	movwf	writeCoil@wc_valToWrite,c
  2160                           
  2161                           ;modbus.c: 517: unsigned int wc_valToWriteLow = 0;
  2162  000E06  0E00               	movlw	0
  2163  000E08  6E24               	movwf	writeCoil@wc_valToWriteLow+1,c
  2164  000E0A  0E00               	movlw	0
  2165  000E0C  6E23               	movwf	writeCoil@wc_valToWriteLow,c
  2166                           
  2167                           ;modbus.c: 518: unsigned int wc_valToWriteHigh = 0;
  2168  000E0E  0E00               	movlw	0
  2169  000E10  6E26               	movwf	writeCoil@wc_valToWriteHigh+1,c
  2170  000E12  0E00               	movlw	0
  2171  000E14  6E25               	movwf	writeCoil@wc_valToWriteHigh,c
  2172                           
  2173                           ;modbus.c: 519: int i = 0;
  2174  000E16  0E00               	movlw	0
  2175  000E18  6E2E               	movwf	writeCoil@i+1,c
  2176  000E1A  0E00               	movlw	0
  2177  000E1C  6E2D               	movwf	writeCoil@i,c
  2178                           
  2179                           ;modbus.c: 520: unsigned int crc = 0;
  2180  000E1E  0E00               	movlw	0
  2181  000E20  6E2A               	movwf	writeCoil@crc+1,c
  2182  000E22  0E00               	movlw	0
  2183  000E24  6E29               	movwf	writeCoil@crc,c
  2184                           
  2185                           ;modbus.c: 523: wc_Address = received[2];
  2186  000E26  0100               	movlb	0	; () banked
  2187  000E28  C062  F02B         	movff	_received+2,writeCoil@wc_Address	;volatile
  2188  000E2C  6A2C               	clrf	writeCoil@wc_Address+1,c
  2189                           
  2190                           ;modbus.c: 524: wc_Address <<= 8;
  2191  000E2E  502B               	movf	writeCoil@wc_Address,w,c
  2192  000E30  6E2C               	movwf	writeCoil@wc_Address+1,c
  2193  000E32  6A2B               	clrf	writeCoil@wc_Address,c
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;modbus.c: 525: wc_Address |= received[3];
  2197  000E34  0100               	movlb	0	; () banked
  2198  000E36  0100               	movlb	0	; () banked
  2199  000E38  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  2200  000E3A  122B               	iorwf	writeCoil@wc_Address,f,c
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;modbus.c: 527: wc_AddressLow = received[3];
  2204  000E3C  0100               	movlb	0	; () banked
  2205  000E3E  C063  F01F         	movff	_received+3,writeCoil@wc_AddressLow	;volatile
  2206  000E42  6A20               	clrf	writeCoil@wc_AddressLow+1,c
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;modbus.c: 528: wc_AddressHigh = received[2];
  2210  000E44  0100               	movlb	0	; () banked
  2211  000E46  C062  F021         	movff	_received+2,writeCoil@wc_AddressHigh	;volatile
  2212  000E4A  6A22               	clrf	writeCoil@wc_AddressHigh+1,c
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;modbus.c: 531: wc_valToWrite = received[4];
  2216  000E4C  0100               	movlb	0	; () banked
  2217  000E4E  C064  F027         	movff	_received+4,writeCoil@wc_valToWrite	;volatile
  2218  000E52  6A28               	clrf	writeCoil@wc_valToWrite+1,c
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;modbus.c: 532: wc_valToWrite <<= 8;
  2222  000E54  5027               	movf	writeCoil@wc_valToWrite,w,c
  2223  000E56  6E28               	movwf	writeCoil@wc_valToWrite+1,c
  2224  000E58  6A27               	clrf	writeCoil@wc_valToWrite,c
  2225                           
  2226                           ;modbus.c: 533: wc_valToWrite |= received[5];
  2227  000E5A  0100               	movlb	0	; () banked
  2228  000E5C  0100               	movlb	0	; () banked
  2229  000E5E  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  2230  000E60  1227               	iorwf	writeCoil@wc_valToWrite,f,c
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;modbus.c: 535: wc_valToWriteLow = received[5];
  2234  000E62  0100               	movlb	0	; () banked
  2235  000E64  C065  F023         	movff	_received+5,writeCoil@wc_valToWriteLow	;volatile
  2236  000E68  6A24               	clrf	writeCoil@wc_valToWriteLow+1,c
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;modbus.c: 536: wc_valToWriteHigh = received[4];
  2240  000E6A  0100               	movlb	0	; () banked
  2241  000E6C  C064  F025         	movff	_received+4,writeCoil@wc_valToWriteHigh	;volatile
  2242  000E70  6A26               	clrf	writeCoil@wc_valToWriteHigh+1,c
  2243                           
  2244                           ;modbus.c: 538: if(wc_valToWrite){
  2245  000E72  5028               	movf	writeCoil@wc_valToWrite+1,w,c
  2246  000E74  1027               	iorwf	writeCoil@wc_valToWrite,w,c
  2247  000E76  B4D8               	btfsc	status,2,c
  2248  000E78  D00A               	goto	l2335
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;modbus.c: 539: coils[wc_Address] = 0xFF;
  2252  000E7A  0101               	movlb	1	; () banked
  2253  000E7C  0E7D               	movlw	low _coils	;volatile
  2254  000E7E  242B               	addwf	writeCoil@wc_Address,w,c
  2255  000E80  6ED9               	movwf	fsr2l,c
  2256  000E82  0101               	movlb	1	; () banked
  2257  000E84  0E01               	movlw	high _coils	;volatile
  2258  000E86  202C               	addwfc	writeCoil@wc_Address+1,w,c
  2259  000E88  6EDA               	movwf	fsr2h,c
  2260  000E8A  0EFF               	movlw	255
  2261  000E8C  D009               	goto	L8
  2262  000E8E                     l2335:
  2263                           
  2264                           ;modbus.c: 541: else{
  2265                           ;modbus.c: 542: coils[wc_Address] = 0x00;
  2266  000E8E  0101               	movlb	1	; () banked
  2267  000E90  0E7D               	movlw	low _coils	;volatile
  2268  000E92  242B               	addwf	writeCoil@wc_Address,w,c
  2269  000E94  6ED9               	movwf	fsr2l,c
  2270  000E96  0101               	movlb	1	; () banked
  2271  000E98  0E01               	movlw	high _coils	;volatile
  2272  000E9A  202C               	addwfc	writeCoil@wc_Address+1,w,c
  2273  000E9C  6EDA               	movwf	fsr2h,c
  2274  000E9E  0E00               	movlw	0
  2275  000EA0                     L8:
  2276  000EA0  6EDF               	movwf	indf2,c
  2277                           
  2278                           ; BSR set to: 1
  2279                           ;modbus.c: 543: }
  2280                           ;modbus.c: 545: response[0] = 2;
  2281                           
  2282                           ; BSR set to: 1
  2283  000EA2  0E02               	movlw	2
  2284  000EA4  0101               	movlb	1	; () banked
  2285  000EA6  0101               	movlb	1	; () banked
  2286  000EA8  6F00               	movwf	_response& (0+255),b	;volatile
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;modbus.c: 546: response[1] = 0x02;
  2290  000EAA  0E02               	movlw	2
  2291  000EAC  0101               	movlb	1	; () banked
  2292  000EAE  0101               	movlb	1	; () banked
  2293  000EB0  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  2294                           
  2295                           ; BSR set to: 1
  2296                           ;modbus.c: 547: response[3] = wc_AddressLow;
  2297  000EB2  C01F  F103         	movff	writeCoil@wc_AddressLow,_response+3	;volatile
  2298                           
  2299                           ; BSR set to: 1
  2300                           ;modbus.c: 548: response[2] = wc_AddressHigh;
  2301  000EB6  C021  F102         	movff	writeCoil@wc_AddressHigh,_response+2	;volatile
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;modbus.c: 551: response[4] = wc_valToWriteHigh;
  2305  000EBA  C025  F104         	movff	writeCoil@wc_valToWriteHigh,_response+4	;volatile
  2306                           
  2307                           ; BSR set to: 1
  2308                           ;modbus.c: 552: response[5] = wc_valToWriteLow;
  2309  000EBE  C023  F105         	movff	writeCoil@wc_valToWriteLow,_response+5	;volatile
  2310                           
  2311                           ; BSR set to: 1
  2312                           ;modbus.c: 554: crc = generateCRC(8);
  2313  000EC2  6E1E               	movwf	??_writeCoil& (0+255),c
  2314  000EC4  0E08               	movlw	8
  2315  000EC6  6E0F               	movwf	?_generateCRC,c
  2316  000EC8  501E               	movf	??_writeCoil& (0+255),w,c
  2317  000ECA  ECA5  F008         	call	_generateCRC	;wreg free
  2318  000ECE  C00F  F029         	movff	?_generateCRC,writeCoil@crc
  2319  000ED2  C010  F02A         	movff	?_generateCRC+1,writeCoil@crc+1
  2320                           
  2321                           ;modbus.c: 556: response[6] = crc >> 8;
  2322  000ED6  502A               	movf	writeCoil@crc+1,w,c
  2323  000ED8  0101               	movlb	1	; () banked
  2324  000EDA  0101               	movlb	1	; () banked
  2325  000EDC  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  2326                           
  2327                           ; BSR set to: 1
  2328                           ;modbus.c: 557: response[7] = crc;
  2329  000EDE  C029  F107         	movff	writeCoil@crc,_response+7	;volatile
  2330                           
  2331                           ; BSR set to: 1
  2332                           ;modbus.c: 559: LATCbits.LATC1 = 1;
  2333  000EE2  828B               	bsf	3979,1,c	;volatile
  2334                           
  2335                           ; BSR set to: 1
  2336                           ;modbus.c: 560: for(i=0;i!=9;i++){
  2337  000EE4  0E00               	movlw	0
  2338  000EE6  6E2E               	movwf	writeCoil@i+1,c
  2339  000EE8  0E00               	movlw	0
  2340  000EEA  6E2D               	movwf	writeCoil@i,c
  2341  000EEC                     
  2342                           ; BSR set to: 1
  2343  000EEC  502D               	movf	writeCoil@i,w,c
  2344  000EEE  0A09               	xorlw	9
  2345  000EF0  102E               	iorwf	writeCoil@i+1,w,c
  2346  000EF2  B4D8               	btfsc	status,2,c
  2347  000EF4  D00F               	goto	l279
  2348  000EF6                     l280:
  2349  000EF6  A2AC               	btfss	4012,1,c	;volatile
  2350  000EF8  D7FE               	goto	l280
  2351                           
  2352                           ;modbus.c: 562: TXREG1 = response[i];
  2353  000EFA  0101               	movlb	1	; () banked
  2354  000EFC  0E00               	movlw	low _response	;volatile
  2355  000EFE  242D               	addwf	writeCoil@i,w,c
  2356  000F00  6ED9               	movwf	fsr2l,c
  2357  000F02  0101               	movlb	1	; () banked
  2358  000F04  0E01               	movlw	high _response	;volatile
  2359  000F06  202E               	addwfc	writeCoil@i+1,w,c
  2360  000F08  6EDA               	movwf	fsr2h,c
  2361  000F0A  50DF               	movf	indf2,w,c
  2362  000F0C  6EAD               	movwf	4013,c	;volatile
  2363                           
  2364                           ; BSR set to: 1
  2365  000F0E  4A2D               	infsnz	writeCoil@i,f,c
  2366  000F10  2A2E               	incf	writeCoil@i+1,f,c
  2367  000F12  D7EC               	goto	L9
  2368  000F14                     l279:
  2369                           
  2370                           ; BSR set to: 1
  2371                           ;modbus.c: 563: }
  2372                           ;modbus.c: 564: LATCbits.LATC1 = 0;
  2373  000F14  928B               	bcf	3979,1,c	;volatile
  2374                           
  2375                           ; BSR set to: 1
  2376                           ;modbus.c: 565: clearResponse();
  2377  000F16  ECBD  F009         	call	_clearResponse	;wreg free
  2378  000F1A  0012               	return	
  2379  000F1C                     __end_of_writeCoil:
  2380                           	opt stack 0
  2381                           tblptru	equ	0xFF8
  2382                           tblptrh	equ	0xFF7
  2383                           tblptrl	equ	0xFF6
  2384                           tablat	equ	0xFF5
  2385                           prodh	equ	0xFF4
  2386                           prodl	equ	0xFF3
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           indf2	equ	0xFDF
  2390                           postinc2	equ	0xFDE
  2391                           postdec2	equ	0xFDD
  2392                           fsr2h	equ	0xFDA
  2393                           fsr2l	equ	0xFD9
  2394                           status	equ	0xFD8
  2395                           
  2396 ;; *************** function _readInputReg *****************
  2397 ;; Defined at:
  2398 ;;		line 142 in file "modbus.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  i               2   39[COMRAM] unsigned int 
  2403 ;;  rr_numRegs      2   37[COMRAM] unsigned int 
  2404 ;;  rr_Address      2   35[COMRAM] unsigned int 
  2405 ;;  crc             2   33[COMRAM] unsigned int 
  2406 ;;  j               1   41[COMRAM] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;		None               void
  2409 ;; Registers used:
  2410 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;Total ram usage:       13 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    3
  2423 ;; This function calls:
  2424 ;;		_clearResponse
  2425 ;;		_generateCRC
  2426 ;; This function is called by:
  2427 ;;		_decodeIt
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text6
  2432  0008B2                     __ptext6:
  2433                           	opt stack 0
  2434  0008B2                     _readInputReg:
  2435                           	opt stack 26
  2436                           
  2437                           ;modbus.c: 143: unsigned int rr_Address = 0;
  2438                           
  2439                           ;incstack = 0
  2440                           ;incstack = 0
  2441  0008B2  0E00               	movlw	0
  2442  0008B4  6E25               	movwf	readInputReg@rr_Address+1,c
  2443  0008B6  0E00               	movlw	0
  2444  0008B8  6E24               	movwf	readInputReg@rr_Address,c
  2445                           
  2446                           ;modbus.c: 144: unsigned int rr_numRegs = 0;
  2447  0008BA  0E00               	movlw	0
  2448  0008BC  6E27               	movwf	readInputReg@rr_numRegs+1,c
  2449  0008BE  0E00               	movlw	0
  2450  0008C0  6E26               	movwf	readInputReg@rr_numRegs,c
  2451                           
  2452                           ;modbus.c: 145: unsigned char j = 3;
  2453  0008C2  6E1E               	movwf	??_readInputReg& (0+255),c
  2454  0008C4  0E03               	movlw	3
  2455  0008C6  6E2A               	movwf	readInputReg@j,c
  2456  0008C8  501E               	movf	??_readInputReg& (0+255),w,c
  2457                           
  2458                           ;modbus.c: 146: unsigned int crc = 0;
  2459  0008CA  0E00               	movlw	0
  2460  0008CC  6E23               	movwf	readInputReg@crc+1,c
  2461  0008CE  0E00               	movlw	0
  2462  0008D0  6E22               	movwf	readInputReg@crc,c
  2463                           
  2464                           ;modbus.c: 147: unsigned int i = 0;
  2465  0008D2  0E00               	movlw	0
  2466  0008D4  6E29               	movwf	readInputReg@i+1,c
  2467  0008D6  0E00               	movlw	0
  2468  0008D8  6E28               	movwf	readInputReg@i,c
  2469                           
  2470                           ;modbus.c: 150: rr_Address = received[2];
  2471  0008DA  0100               	movlb	0	; () banked
  2472  0008DC  C062  F024         	movff	_received+2,readInputReg@rr_Address	;volatile
  2473  0008E0  6A25               	clrf	readInputReg@rr_Address+1,c
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;modbus.c: 151: rr_Address <<= 8;
  2477  0008E2  5024               	movf	readInputReg@rr_Address,w,c
  2478  0008E4  6E25               	movwf	readInputReg@rr_Address+1,c
  2479  0008E6  6A24               	clrf	readInputReg@rr_Address,c
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;modbus.c: 152: rr_Address |= received[3];
  2483  0008E8  0100               	movlb	0	; () banked
  2484  0008EA  0100               	movlb	0	; () banked
  2485  0008EC  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  2486  0008EE  1224               	iorwf	readInputReg@rr_Address,f,c
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;modbus.c: 155: rr_numRegs = received[4];
  2490  0008F0  0100               	movlb	0	; () banked
  2491  0008F2  C064  F026         	movff	_received+4,readInputReg@rr_numRegs	;volatile
  2492  0008F6  6A27               	clrf	readInputReg@rr_numRegs+1,c
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;modbus.c: 156: rr_numRegs <<= 8;
  2496  0008F8  5026               	movf	readInputReg@rr_numRegs,w,c
  2497  0008FA  6E27               	movwf	readInputReg@rr_numRegs+1,c
  2498  0008FC  6A26               	clrf	readInputReg@rr_numRegs,c
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;modbus.c: 157: rr_numRegs |= received[5];
  2502  0008FE  0100               	movlb	0	; () banked
  2503  000900  0100               	movlb	0	; () banked
  2504  000902  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  2505  000904  1226               	iorwf	readInputReg@rr_numRegs,f,c
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;modbus.c: 159: response[0] = 2;
  2509  000906  0E02               	movlw	2
  2510  000908  0101               	movlb	1	; () banked
  2511  00090A  0101               	movlb	1	; () banked
  2512  00090C  6F00               	movwf	_response& (0+255),b	;volatile
  2513                           
  2514                           ; BSR set to: 1
  2515                           ;modbus.c: 160: response[1] = 0x04;
  2516  00090E  0E04               	movlw	4
  2517  000910  0101               	movlb	1	; () banked
  2518  000912  0101               	movlb	1	; () banked
  2519  000914  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  2520                           
  2521                           ; BSR set to: 1
  2522                           ;modbus.c: 161: response[2] = rr_numRegs*2;
  2523  000916  5026               	movf	readInputReg@rr_numRegs,w,c
  2524  000918  2426               	addwf	readInputReg@rr_numRegs,w,c
  2525  00091A  0101               	movlb	1	; () banked
  2526  00091C  0101               	movlb	1	; () banked
  2527  00091E  6F02               	movwf	(_response+2)& (0+255),b	;volatile
  2528                           
  2529                           ; BSR set to: 1
  2530                           ;modbus.c: 163: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2531  000920  C024  F028         	movff	readInputReg@rr_Address,readInputReg@i
  2532  000924  C025  F029         	movff	readInputReg@rr_Address+1,readInputReg@i+1
  2533  000928  D060               	goto	l2289
  2534  00092A                     l2271:
  2535                           
  2536                           ; BSR set to: 1
  2537                           ;modbus.c: 164: if(holdingReg[i] > 255){
  2538  00092A  90D8               	bcf	status,0,c
  2539  00092C  3428               	rlcf	readInputReg@i,w,c
  2540  00092E  6E1E               	movwf	??_readInputReg& (0+255),c
  2541  000930  3429               	rlcf	readInputReg@i+1,w,c
  2542  000932  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  2543  000934  0102               	movlb	2	; () banked
  2544  000936  0E00               	movlw	low _holdingReg	;volatile
  2545  000938  241E               	addwf	??_readInputReg,w,c
  2546  00093A  6ED9               	movwf	fsr2l,c
  2547  00093C  0102               	movlb	2	; () banked
  2548  00093E  0E02               	movlw	high _holdingReg	;volatile
  2549  000940  201F               	addwfc	??_readInputReg+1,w,c
  2550  000942  6EDA               	movwf	fsr2h,c
  2551  000944  CFDE F020          	movff	postinc2,??_readInputReg+2
  2552  000948  CFDD F021          	movff	postdec2,??_readInputReg+3
  2553  00094C  0E00               	movlw	0
  2554  00094E  5C20               	subwf	??_readInputReg+2,w,c
  2555  000950  0E01               	movlw	1
  2556  000952  5821               	subwfb	??_readInputReg+3,w,c
  2557  000954  A0D8               	btfss	status,0,c
  2558  000956  D020               	goto	l2279
  2559                           
  2560                           ; BSR set to: 2
  2561                           ;modbus.c: 166: response[j] = holdingReg[i] >> 8;
  2562  000958  502A               	movf	readInputReg@j,w,c
  2563  00095A  0D01               	mullw	1
  2564  00095C  0101               	movlb	1	; () banked
  2565  00095E  0E00               	movlw	low _response	;volatile
  2566  000960  24F3               	addwf	prodl,w,c
  2567  000962  6ED9               	movwf	fsr2l,c
  2568  000964  0101               	movlb	1	; () banked
  2569  000966  0E01               	movlw	high _response	;volatile
  2570  000968  20F4               	addwfc	prodh,w,c
  2571  00096A  6EDA               	movwf	fsr2h,c
  2572  00096C  90D8               	bcf	status,0,c
  2573  00096E  3428               	rlcf	readInputReg@i,w,c
  2574  000970  6E1E               	movwf	??_readInputReg& (0+255),c
  2575  000972  3429               	rlcf	readInputReg@i+1,w,c
  2576  000974  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  2577  000976  0102               	movlb	2	; () banked
  2578  000978  0E00               	movlw	low _holdingReg	;volatile
  2579  00097A  241E               	addwf	??_readInputReg,w,c
  2580  00097C  6EE1               	movwf	fsr1l,c
  2581  00097E  0102               	movlb	2	; () banked
  2582  000980  0E02               	movlw	high _holdingReg	;volatile
  2583  000982  201F               	addwfc	??_readInputReg+1,w,c
  2584  000984  6EE2               	movwf	fsr1h,c
  2585  000986  CFE6 F020          	movff	postinc1,??_readInputReg+2
  2586  00098A  CFE5 F021          	movff	postdec1,??_readInputReg+3
  2587  00098E  C021  F020         	movff	??_readInputReg+3,??_readInputReg+2
  2588  000992  6A21               	clrf	??_readInputReg+3,c
  2589  000994  5020               	movf	??_readInputReg+2,w,c
  2590  000996  D00B               	goto	L10
  2591  000998                     l2279:
  2592                           
  2593                           ;modbus.c: 171: else{
  2594                           ;modbus.c: 172: response[j] = 0x00;
  2595  000998  502A               	movf	readInputReg@j,w,c
  2596  00099A  0D01               	mullw	1
  2597  00099C  0101               	movlb	1	; () banked
  2598  00099E  0E00               	movlw	low _response	;volatile
  2599  0009A0  24F3               	addwf	prodl,w,c
  2600  0009A2  6ED9               	movwf	fsr2l,c
  2601  0009A4  0101               	movlb	1	; () banked
  2602  0009A6  0E01               	movlw	high _response	;volatile
  2603  0009A8  20F4               	addwfc	prodh,w,c
  2604  0009AA  6EDA               	movwf	fsr2h,c
  2605  0009AC  0E00               	movlw	0
  2606  0009AE                     L10:
  2607  0009AE  6EDF               	movwf	indf2,c
  2608                           
  2609                           ; BSR set to: 1
  2610                           ;modbus.c: 173: j++;
  2611  0009B0  2A2A               	incf	readInputReg@j,f,c
  2612                           
  2613                           ; BSR set to: 1
  2614                           ;modbus.c: 174: response[j] = holdingReg[i];
  2615  0009B2  90D8               	bcf	status,0,c
  2616  0009B4  3428               	rlcf	readInputReg@i,w,c
  2617  0009B6  6E1E               	movwf	??_readInputReg& (0+255),c
  2618  0009B8  3429               	rlcf	readInputReg@i+1,w,c
  2619  0009BA  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  2620  0009BC  0102               	movlb	2	; () banked
  2621  0009BE  0E00               	movlw	low _holdingReg	;volatile
  2622  0009C0  241E               	addwf	??_readInputReg,w,c
  2623  0009C2  6ED9               	movwf	fsr2l,c
  2624  0009C4  0102               	movlb	2	; () banked
  2625  0009C6  0E02               	movlw	high _holdingReg	;volatile
  2626  0009C8  201F               	addwfc	??_readInputReg+1,w,c
  2627  0009CA  6EDA               	movwf	fsr2h,c
  2628  0009CC  502A               	movf	readInputReg@j,w,c
  2629  0009CE  0D01               	mullw	1
  2630  0009D0  0101               	movlb	1	; () banked
  2631  0009D2  0E00               	movlw	low _response	;volatile
  2632  0009D4  24F3               	addwf	prodl,w,c
  2633  0009D6  6EE1               	movwf	fsr1l,c
  2634  0009D8  0101               	movlb	1	; () banked
  2635  0009DA  0E01               	movlw	high _response	;volatile
  2636  0009DC  20F4               	addwfc	prodh,w,c
  2637  0009DE  6EE2               	movwf	fsr1h,c
  2638  0009E0  CFDF FFE7          	movff	indf2,indf1
  2639                           
  2640                           ; BSR set to: 1
  2641                           ;modbus.c: 175: j++;
  2642  0009E4  2A2A               	incf	readInputReg@j,f,c
  2643                           
  2644                           ; BSR set to: 1
  2645                           
  2646                           ; BSR set to: 1
  2647  0009E6  4A28               	infsnz	readInputReg@i,f,c
  2648  0009E8  2A29               	incf	readInputReg@i+1,f,c
  2649  0009EA                     l2289:
  2650                           
  2651                           ; BSR set to: 1
  2652  0009EA  C024  F01E         	movff	readInputReg@rr_Address,??_readInputReg
  2653  0009EE  C025  F01F         	movff	readInputReg@rr_Address+1,??_readInputReg+1
  2654  0009F2  5026               	movf	readInputReg@rr_numRegs,w,c
  2655  0009F4  261E               	addwf	??_readInputReg,f,c
  2656  0009F6  5027               	movf	readInputReg@rr_numRegs+1,w,c
  2657  0009F8  221F               	addwfc	??_readInputReg+1,f,c
  2658  0009FA  501E               	movf	??_readInputReg,w,c
  2659  0009FC  5C28               	subwf	readInputReg@i,w,c
  2660  0009FE  501F               	movf	??_readInputReg+1,w,c
  2661  000A00  5829               	subwfb	readInputReg@i+1,w,c
  2662  000A02  A0D8               	btfss	status,0,c
  2663  000A04  D792               	goto	l2271
  2664                           
  2665                           ; BSR set to: 1
  2666                           ;modbus.c: 176: }
  2667                           ;modbus.c: 177: }
  2668                           ;modbus.c: 178: crc = generateCRC(j+2);
  2669                           
  2670                           ; BSR set to: 1
  2671  000A06  502A               	movf	readInputReg@j,w,c
  2672  000A08  0F02               	addlw	2
  2673  000A0A  6E0F               	movwf	?_generateCRC,c
  2674  000A0C  ECA5  F008         	call	_generateCRC	;wreg free
  2675  000A10  C00F  F022         	movff	?_generateCRC,readInputReg@crc
  2676  000A14  C010  F023         	movff	?_generateCRC+1,readInputReg@crc+1
  2677                           
  2678                           ;modbus.c: 179: response[j] = crc >> 8;
  2679  000A18  502A               	movf	readInputReg@j,w,c
  2680  000A1A  0D01               	mullw	1
  2681  000A1C  0101               	movlb	1	; () banked
  2682  000A1E  0E00               	movlw	low _response	;volatile
  2683  000A20  24F3               	addwf	prodl,w,c
  2684  000A22  6ED9               	movwf	fsr2l,c
  2685  000A24  0101               	movlb	1	; () banked
  2686  000A26  0E01               	movlw	high _response	;volatile
  2687  000A28  20F4               	addwfc	prodh,w,c
  2688  000A2A  6EDA               	movwf	fsr2h,c
  2689  000A2C  5023               	movf	readInputReg@crc+1,w,c
  2690  000A2E  6EDF               	movwf	indf2,c
  2691                           
  2692                           ; BSR set to: 1
  2693                           ;modbus.c: 180: j++;
  2694  000A30  2A2A               	incf	readInputReg@j,f,c
  2695                           
  2696                           ; BSR set to: 1
  2697                           ;modbus.c: 181: response[j] = crc;
  2698  000A32  502A               	movf	readInputReg@j,w,c
  2699  000A34  0D01               	mullw	1
  2700  000A36  0101               	movlb	1	; () banked
  2701  000A38  0E00               	movlw	low _response	;volatile
  2702  000A3A  24F3               	addwf	prodl,w,c
  2703  000A3C  6ED9               	movwf	fsr2l,c
  2704  000A3E  0101               	movlb	1	; () banked
  2705  000A40  0E01               	movlw	high _response	;volatile
  2706  000A42  20F4               	addwfc	prodh,w,c
  2707  000A44  6EDA               	movwf	fsr2h,c
  2708  000A46  C022  FFDF         	movff	readInputReg@crc,indf2
  2709                           
  2710                           ; BSR set to: 1
  2711                           ;modbus.c: 182: j+=2;
  2712  000A4A  0E02               	movlw	2
  2713  000A4C  262A               	addwf	readInputReg@j,f,c
  2714                           
  2715                           ; BSR set to: 1
  2716                           ;modbus.c: 184: LATCbits.LATC1 = 1;
  2717  000A4E  828B               	bsf	3979,1,c	;volatile
  2718                           
  2719                           ; BSR set to: 1
  2720                           ;modbus.c: 185: for(i=0;i!=j;i++){
  2721  000A50  0E00               	movlw	0
  2722  000A52  6E29               	movwf	readInputReg@i+1,c
  2723  000A54  0E00               	movlw	0
  2724  000A56  6E28               	movwf	readInputReg@i,c
  2725  000A58  D00E               	goto	l2309
  2726  000A5A                     l204:
  2727  000A5A  A2AC               	btfss	4012,1,c	;volatile
  2728  000A5C  D7FE               	goto	l204
  2729                           
  2730                           ;modbus.c: 187: TXREG1 = response[i];
  2731  000A5E  0101               	movlb	1	; () banked
  2732  000A60  0E00               	movlw	low _response	;volatile
  2733  000A62  2428               	addwf	readInputReg@i,w,c
  2734  000A64  6ED9               	movwf	fsr2l,c
  2735  000A66  0101               	movlb	1	; () banked
  2736  000A68  0E01               	movlw	high _response	;volatile
  2737  000A6A  2029               	addwfc	readInputReg@i+1,w,c
  2738  000A6C  6EDA               	movwf	fsr2h,c
  2739  000A6E  50DF               	movf	indf2,w,c
  2740  000A70  6EAD               	movwf	4013,c	;volatile
  2741                           
  2742                           ; BSR set to: 1
  2743  000A72  4A28               	infsnz	readInputReg@i,f,c
  2744  000A74  2A29               	incf	readInputReg@i+1,f,c
  2745  000A76                     l2309:
  2746                           
  2747                           ; BSR set to: 1
  2748  000A76  502A               	movf	readInputReg@j,w,c
  2749  000A78  6E1E               	movwf	??_readInputReg& (0+255),c
  2750  000A7A  6A1F               	clrf	(??_readInputReg+1)& (0+255),c
  2751  000A7C  5029               	movf	readInputReg@i+1,w,c
  2752  000A7E  181F               	xorwf	??_readInputReg+1,w,c
  2753  000A80  E102               	bnz	u1465
  2754  000A82  5028               	movf	readInputReg@i,w,c
  2755  000A84  181E               	xorwf	??_readInputReg,w,c
  2756  000A86                     u1465:
  2757  000A86  A4D8               	btfss	status,2,c
  2758  000A88  D7E8               	goto	l204
  2759                           
  2760                           ; BSR set to: 1
  2761                           ;modbus.c: 188: }
  2762                           ;modbus.c: 189: LATCbits.LATC1 = 0;
  2763  000A8A  928B               	bcf	3979,1,c	;volatile
  2764                           
  2765                           ; BSR set to: 1
  2766                           ;modbus.c: 190: j=0;
  2767  000A8C  6E1E               	movwf	??_readInputReg& (0+255),c
  2768  000A8E  0E00               	movlw	0
  2769  000A90  6E2A               	movwf	readInputReg@j,c
  2770  000A92  501E               	movf	??_readInputReg& (0+255),w,c
  2771                           
  2772                           ; BSR set to: 1
  2773                           ;modbus.c: 192: clearResponse();
  2774  000A94  ECBD  F009         	call	_clearResponse	;wreg free
  2775  000A98  0012               	return	
  2776  000A9A                     __end_of_readInputReg:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           prodh	equ	0xFF4
  2783                           prodl	equ	0xFF3
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           indf1	equ	0xFE7
  2787                           postinc1	equ	0xFE6
  2788                           postdec1	equ	0xFE5
  2789                           fsr1h	equ	0xFE2
  2790                           fsr1l	equ	0xFE1
  2791                           indf2	equ	0xFDF
  2792                           postinc2	equ	0xFDE
  2793                           postdec2	equ	0xFDD
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _readReg *****************
  2799 ;; Defined at:
  2800 ;;		line 88 in file "modbus.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  i               2   39[COMRAM] unsigned int 
  2805 ;;  rr_numRegs      2   37[COMRAM] unsigned int 
  2806 ;;  rr_Address      2   35[COMRAM] unsigned int 
  2807 ;;  crc             2   33[COMRAM] unsigned int 
  2808 ;;  j               1   41[COMRAM] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;		None               void
  2811 ;; Registers used:
  2812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;Total ram usage:       13 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    3
  2825 ;; This function calls:
  2826 ;;		_clearResponse
  2827 ;;		_generateCRC
  2828 ;; This function is called by:
  2829 ;;		_decodeIt
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text7
  2834  000A9A                     __ptext7:
  2835                           	opt stack 0
  2836  000A9A                     _readReg:
  2837                           	opt stack 26
  2838                           
  2839                           ;modbus.c: 89: unsigned int rr_Address = 0;
  2840                           
  2841                           ;incstack = 0
  2842                           ;incstack = 0
  2843  000A9A  0E00               	movlw	0
  2844  000A9C  6E25               	movwf	readReg@rr_Address+1,c
  2845  000A9E  0E00               	movlw	0
  2846  000AA0  6E24               	movwf	readReg@rr_Address,c
  2847                           
  2848                           ;modbus.c: 90: unsigned int rr_numRegs = 0;
  2849  000AA2  0E00               	movlw	0
  2850  000AA4  6E27               	movwf	readReg@rr_numRegs+1,c
  2851  000AA6  0E00               	movlw	0
  2852  000AA8  6E26               	movwf	readReg@rr_numRegs,c
  2853                           
  2854                           ;modbus.c: 91: unsigned char j = 3;
  2855  000AAA  6E1E               	movwf	??_readReg& (0+255),c
  2856  000AAC  0E03               	movlw	3
  2857  000AAE  6E2A               	movwf	readReg@j,c
  2858  000AB0  501E               	movf	??_readReg& (0+255),w,c
  2859                           
  2860                           ;modbus.c: 92: unsigned int crc = 0;
  2861  000AB2  0E00               	movlw	0
  2862  000AB4  6E23               	movwf	readReg@crc+1,c
  2863  000AB6  0E00               	movlw	0
  2864  000AB8  6E22               	movwf	readReg@crc,c
  2865                           
  2866                           ;modbus.c: 93: unsigned int i = 0;
  2867  000ABA  0E00               	movlw	0
  2868  000ABC  6E29               	movwf	readReg@i+1,c
  2869  000ABE  0E00               	movlw	0
  2870  000AC0  6E28               	movwf	readReg@i,c
  2871                           
  2872                           ;modbus.c: 96: rr_Address = received[2];
  2873  000AC2  0100               	movlb	0	; () banked
  2874  000AC4  C062  F024         	movff	_received+2,readReg@rr_Address	;volatile
  2875  000AC8  6A25               	clrf	readReg@rr_Address+1,c
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;modbus.c: 97: rr_Address <<= 8;
  2879  000ACA  5024               	movf	readReg@rr_Address,w,c
  2880  000ACC  6E25               	movwf	readReg@rr_Address+1,c
  2881  000ACE  6A24               	clrf	readReg@rr_Address,c
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;modbus.c: 98: rr_Address |= received[3];
  2885  000AD0  0100               	movlb	0	; () banked
  2886  000AD2  0100               	movlb	0	; () banked
  2887  000AD4  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  2888  000AD6  1224               	iorwf	readReg@rr_Address,f,c
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;modbus.c: 101: rr_numRegs = received[4];
  2892  000AD8  0100               	movlb	0	; () banked
  2893  000ADA  C064  F026         	movff	_received+4,readReg@rr_numRegs	;volatile
  2894  000ADE  6A27               	clrf	readReg@rr_numRegs+1,c
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;modbus.c: 102: rr_numRegs <<= 8;
  2898  000AE0  5026               	movf	readReg@rr_numRegs,w,c
  2899  000AE2  6E27               	movwf	readReg@rr_numRegs+1,c
  2900  000AE4  6A26               	clrf	readReg@rr_numRegs,c
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;modbus.c: 103: rr_numRegs |= received[5];
  2904  000AE6  0100               	movlb	0	; () banked
  2905  000AE8  0100               	movlb	0	; () banked
  2906  000AEA  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  2907  000AEC  1226               	iorwf	readReg@rr_numRegs,f,c
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;modbus.c: 105: response[0] = 2;
  2911  000AEE  0E02               	movlw	2
  2912  000AF0  0101               	movlb	1	; () banked
  2913  000AF2  0101               	movlb	1	; () banked
  2914  000AF4  6F00               	movwf	_response& (0+255),b	;volatile
  2915                           
  2916                           ; BSR set to: 1
  2917                           ;modbus.c: 106: response[1] = 0x03;
  2918  000AF6  0E03               	movlw	3
  2919  000AF8  0101               	movlb	1	; () banked
  2920  000AFA  0101               	movlb	1	; () banked
  2921  000AFC  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  2922                           
  2923                           ; BSR set to: 1
  2924                           ;modbus.c: 107: response[2] = rr_numRegs*2;
  2925  000AFE  5026               	movf	readReg@rr_numRegs,w,c
  2926  000B00  2426               	addwf	readReg@rr_numRegs,w,c
  2927  000B02  0101               	movlb	1	; () banked
  2928  000B04  0101               	movlb	1	; () banked
  2929  000B06  6F02               	movwf	(_response+2)& (0+255),b	;volatile
  2930                           
  2931                           ; BSR set to: 1
  2932                           ;modbus.c: 109: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2933  000B08  C024  F028         	movff	readReg@rr_Address,readReg@i
  2934  000B0C  C025  F029         	movff	readReg@rr_Address+1,readReg@i+1
  2935  000B10  D060               	goto	l2217
  2936  000B12                     l2199:
  2937                           
  2938                           ; BSR set to: 1
  2939                           ;modbus.c: 110: if(holdingReg[i] > 255){
  2940  000B12  90D8               	bcf	status,0,c
  2941  000B14  3428               	rlcf	readReg@i,w,c
  2942  000B16  6E1E               	movwf	??_readReg& (0+255),c
  2943  000B18  3429               	rlcf	readReg@i+1,w,c
  2944  000B1A  6E1F               	movwf	(??_readReg+1)& (0+255),c
  2945  000B1C  0102               	movlb	2	; () banked
  2946  000B1E  0E00               	movlw	low _holdingReg	;volatile
  2947  000B20  241E               	addwf	??_readReg,w,c
  2948  000B22  6ED9               	movwf	fsr2l,c
  2949  000B24  0102               	movlb	2	; () banked
  2950  000B26  0E02               	movlw	high _holdingReg	;volatile
  2951  000B28  201F               	addwfc	??_readReg+1,w,c
  2952  000B2A  6EDA               	movwf	fsr2h,c
  2953  000B2C  CFDE F020          	movff	postinc2,??_readReg+2
  2954  000B30  CFDD F021          	movff	postdec2,??_readReg+3
  2955  000B34  0E00               	movlw	0
  2956  000B36  5C20               	subwf	??_readReg+2,w,c
  2957  000B38  0E01               	movlw	1
  2958  000B3A  5821               	subwfb	??_readReg+3,w,c
  2959  000B3C  A0D8               	btfss	status,0,c
  2960  000B3E  D020               	goto	l2207
  2961                           
  2962                           ; BSR set to: 2
  2963                           ;modbus.c: 112: response[j] = holdingReg[i] >> 8;
  2964  000B40  502A               	movf	readReg@j,w,c
  2965  000B42  0D01               	mullw	1
  2966  000B44  0101               	movlb	1	; () banked
  2967  000B46  0E00               	movlw	low _response	;volatile
  2968  000B48  24F3               	addwf	prodl,w,c
  2969  000B4A  6ED9               	movwf	fsr2l,c
  2970  000B4C  0101               	movlb	1	; () banked
  2971  000B4E  0E01               	movlw	high _response	;volatile
  2972  000B50  20F4               	addwfc	prodh,w,c
  2973  000B52  6EDA               	movwf	fsr2h,c
  2974  000B54  90D8               	bcf	status,0,c
  2975  000B56  3428               	rlcf	readReg@i,w,c
  2976  000B58  6E1E               	movwf	??_readReg& (0+255),c
  2977  000B5A  3429               	rlcf	readReg@i+1,w,c
  2978  000B5C  6E1F               	movwf	(??_readReg+1)& (0+255),c
  2979  000B5E  0102               	movlb	2	; () banked
  2980  000B60  0E00               	movlw	low _holdingReg	;volatile
  2981  000B62  241E               	addwf	??_readReg,w,c
  2982  000B64  6EE1               	movwf	fsr1l,c
  2983  000B66  0102               	movlb	2	; () banked
  2984  000B68  0E02               	movlw	high _holdingReg	;volatile
  2985  000B6A  201F               	addwfc	??_readReg+1,w,c
  2986  000B6C  6EE2               	movwf	fsr1h,c
  2987  000B6E  CFE6 F020          	movff	postinc1,??_readReg+2
  2988  000B72  CFE5 F021          	movff	postdec1,??_readReg+3
  2989  000B76  C021  F020         	movff	??_readReg+3,??_readReg+2
  2990  000B7A  6A21               	clrf	??_readReg+3,c
  2991  000B7C  5020               	movf	??_readReg+2,w,c
  2992  000B7E  D00B               	goto	L11
  2993  000B80                     l2207:
  2994                           
  2995                           ;modbus.c: 117: else{
  2996                           ;modbus.c: 118: response[j] = 0x00;
  2997  000B80  502A               	movf	readReg@j,w,c
  2998  000B82  0D01               	mullw	1
  2999  000B84  0101               	movlb	1	; () banked
  3000  000B86  0E00               	movlw	low _response	;volatile
  3001  000B88  24F3               	addwf	prodl,w,c
  3002  000B8A  6ED9               	movwf	fsr2l,c
  3003  000B8C  0101               	movlb	1	; () banked
  3004  000B8E  0E01               	movlw	high _response	;volatile
  3005  000B90  20F4               	addwfc	prodh,w,c
  3006  000B92  6EDA               	movwf	fsr2h,c
  3007  000B94  0E00               	movlw	0
  3008  000B96                     L11:
  3009  000B96  6EDF               	movwf	indf2,c
  3010                           
  3011                           ; BSR set to: 1
  3012                           ;modbus.c: 119: j++;
  3013  000B98  2A2A               	incf	readReg@j,f,c
  3014                           
  3015                           ; BSR set to: 1
  3016                           ;modbus.c: 120: response[j] = holdingReg[i];
  3017  000B9A  90D8               	bcf	status,0,c
  3018  000B9C  3428               	rlcf	readReg@i,w,c
  3019  000B9E  6E1E               	movwf	??_readReg& (0+255),c
  3020  000BA0  3429               	rlcf	readReg@i+1,w,c
  3021  000BA2  6E1F               	movwf	(??_readReg+1)& (0+255),c
  3022  000BA4  0102               	movlb	2	; () banked
  3023  000BA6  0E00               	movlw	low _holdingReg	;volatile
  3024  000BA8  241E               	addwf	??_readReg,w,c
  3025  000BAA  6ED9               	movwf	fsr2l,c
  3026  000BAC  0102               	movlb	2	; () banked
  3027  000BAE  0E02               	movlw	high _holdingReg	;volatile
  3028  000BB0  201F               	addwfc	??_readReg+1,w,c
  3029  000BB2  6EDA               	movwf	fsr2h,c
  3030  000BB4  502A               	movf	readReg@j,w,c
  3031  000BB6  0D01               	mullw	1
  3032  000BB8  0101               	movlb	1	; () banked
  3033  000BBA  0E00               	movlw	low _response	;volatile
  3034  000BBC  24F3               	addwf	prodl,w,c
  3035  000BBE  6EE1               	movwf	fsr1l,c
  3036  000BC0  0101               	movlb	1	; () banked
  3037  000BC2  0E01               	movlw	high _response	;volatile
  3038  000BC4  20F4               	addwfc	prodh,w,c
  3039  000BC6  6EE2               	movwf	fsr1h,c
  3040  000BC8  CFDF FFE7          	movff	indf2,indf1
  3041                           
  3042                           ; BSR set to: 1
  3043                           ;modbus.c: 121: j++;
  3044  000BCC  2A2A               	incf	readReg@j,f,c
  3045                           
  3046                           ; BSR set to: 1
  3047                           
  3048                           ; BSR set to: 1
  3049  000BCE  4A28               	infsnz	readReg@i,f,c
  3050  000BD0  2A29               	incf	readReg@i+1,f,c
  3051  000BD2                     l2217:
  3052                           
  3053                           ; BSR set to: 1
  3054  000BD2  C024  F01E         	movff	readReg@rr_Address,??_readReg
  3055  000BD6  C025  F01F         	movff	readReg@rr_Address+1,??_readReg+1
  3056  000BDA  5026               	movf	readReg@rr_numRegs,w,c
  3057  000BDC  261E               	addwf	??_readReg,f,c
  3058  000BDE  5027               	movf	readReg@rr_numRegs+1,w,c
  3059  000BE0  221F               	addwfc	??_readReg+1,f,c
  3060  000BE2  501E               	movf	??_readReg,w,c
  3061  000BE4  5C28               	subwf	readReg@i,w,c
  3062  000BE6  501F               	movf	??_readReg+1,w,c
  3063  000BE8  5829               	subwfb	readReg@i+1,w,c
  3064  000BEA  A0D8               	btfss	status,0,c
  3065  000BEC  D792               	goto	l2199
  3066                           
  3067                           ; BSR set to: 1
  3068                           ;modbus.c: 122: }
  3069                           ;modbus.c: 123: }
  3070                           ;modbus.c: 124: crc = generateCRC(j+2);
  3071                           
  3072                           ; BSR set to: 1
  3073  000BEE  502A               	movf	readReg@j,w,c
  3074  000BF0  0F02               	addlw	2
  3075  000BF2  6E0F               	movwf	?_generateCRC,c
  3076  000BF4  ECA5  F008         	call	_generateCRC	;wreg free
  3077  000BF8  C00F  F022         	movff	?_generateCRC,readReg@crc
  3078  000BFC  C010  F023         	movff	?_generateCRC+1,readReg@crc+1
  3079                           
  3080                           ;modbus.c: 125: response[j] = crc >> 8;
  3081  000C00  502A               	movf	readReg@j,w,c
  3082  000C02  0D01               	mullw	1
  3083  000C04  0101               	movlb	1	; () banked
  3084  000C06  0E00               	movlw	low _response	;volatile
  3085  000C08  24F3               	addwf	prodl,w,c
  3086  000C0A  6ED9               	movwf	fsr2l,c
  3087  000C0C  0101               	movlb	1	; () banked
  3088  000C0E  0E01               	movlw	high _response	;volatile
  3089  000C10  20F4               	addwfc	prodh,w,c
  3090  000C12  6EDA               	movwf	fsr2h,c
  3091  000C14  5023               	movf	readReg@crc+1,w,c
  3092  000C16  6EDF               	movwf	indf2,c
  3093                           
  3094                           ; BSR set to: 1
  3095                           ;modbus.c: 126: j++;
  3096  000C18  2A2A               	incf	readReg@j,f,c
  3097                           
  3098                           ; BSR set to: 1
  3099                           ;modbus.c: 127: response[j] = crc;
  3100  000C1A  502A               	movf	readReg@j,w,c
  3101  000C1C  0D01               	mullw	1
  3102  000C1E  0101               	movlb	1	; () banked
  3103  000C20  0E00               	movlw	low _response	;volatile
  3104  000C22  24F3               	addwf	prodl,w,c
  3105  000C24  6ED9               	movwf	fsr2l,c
  3106  000C26  0101               	movlb	1	; () banked
  3107  000C28  0E01               	movlw	high _response	;volatile
  3108  000C2A  20F4               	addwfc	prodh,w,c
  3109  000C2C  6EDA               	movwf	fsr2h,c
  3110  000C2E  C022  FFDF         	movff	readReg@crc,indf2
  3111                           
  3112                           ; BSR set to: 1
  3113                           ;modbus.c: 128: j+=2;
  3114  000C32  0E02               	movlw	2
  3115  000C34  262A               	addwf	readReg@j,f,c
  3116                           
  3117                           ; BSR set to: 1
  3118                           ;modbus.c: 130: LATCbits.LATC1 = 1;
  3119  000C36  828B               	bsf	3979,1,c	;volatile
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;modbus.c: 131: for(i=0;i!=j;i++){
  3123  000C38  0E00               	movlw	0
  3124  000C3A  6E29               	movwf	readReg@i+1,c
  3125  000C3C  0E00               	movlw	0
  3126  000C3E  6E28               	movwf	readReg@i,c
  3127  000C40  D00E               	goto	l2237
  3128  000C42                     l190:
  3129  000C42  A2AC               	btfss	4012,1,c	;volatile
  3130  000C44  D7FE               	goto	l190
  3131                           
  3132                           ;modbus.c: 133: TXREG1 = response[i];
  3133  000C46  0101               	movlb	1	; () banked
  3134  000C48  0E00               	movlw	low _response	;volatile
  3135  000C4A  2428               	addwf	readReg@i,w,c
  3136  000C4C  6ED9               	movwf	fsr2l,c
  3137  000C4E  0101               	movlb	1	; () banked
  3138  000C50  0E01               	movlw	high _response	;volatile
  3139  000C52  2029               	addwfc	readReg@i+1,w,c
  3140  000C54  6EDA               	movwf	fsr2h,c
  3141  000C56  50DF               	movf	indf2,w,c
  3142  000C58  6EAD               	movwf	4013,c	;volatile
  3143                           
  3144                           ; BSR set to: 1
  3145  000C5A  4A28               	infsnz	readReg@i,f,c
  3146  000C5C  2A29               	incf	readReg@i+1,f,c
  3147  000C5E                     l2237:
  3148                           
  3149                           ; BSR set to: 1
  3150  000C5E  502A               	movf	readReg@j,w,c
  3151  000C60  6E1E               	movwf	??_readReg& (0+255),c
  3152  000C62  6A1F               	clrf	(??_readReg+1)& (0+255),c
  3153  000C64  5029               	movf	readReg@i+1,w,c
  3154  000C66  181F               	xorwf	??_readReg+1,w,c
  3155  000C68  E102               	bnz	u1425
  3156  000C6A  5028               	movf	readReg@i,w,c
  3157  000C6C  181E               	xorwf	??_readReg,w,c
  3158  000C6E                     u1425:
  3159  000C6E  A4D8               	btfss	status,2,c
  3160  000C70  D7E8               	goto	l190
  3161                           
  3162                           ; BSR set to: 1
  3163                           ;modbus.c: 134: }
  3164                           ;modbus.c: 135: LATCbits.LATC1 = 0;
  3165  000C72  928B               	bcf	3979,1,c	;volatile
  3166                           
  3167                           ; BSR set to: 1
  3168                           ;modbus.c: 136: j=0;
  3169  000C74  6E1E               	movwf	??_readReg& (0+255),c
  3170  000C76  0E00               	movlw	0
  3171  000C78  6E2A               	movwf	readReg@j,c
  3172  000C7A  501E               	movf	??_readReg& (0+255),w,c
  3173                           
  3174                           ; BSR set to: 1
  3175                           ;modbus.c: 138: clearResponse();
  3176  000C7C  ECBD  F009         	call	_clearResponse	;wreg free
  3177  000C80  0012               	return	
  3178  000C82                     __end_of_readReg:
  3179                           	opt stack 0
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           prodh	equ	0xFF4
  3185                           prodl	equ	0xFF3
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           indf1	equ	0xFE7
  3189                           postinc1	equ	0xFE6
  3190                           postdec1	equ	0xFE5
  3191                           fsr1h	equ	0xFE2
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200 ;; *************** function _readInputCoil *****************
  3201 ;; Defined at:
  3202 ;;		line 428 in file "modbus.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  rc_numCoils     2   36[COMRAM] unsigned int 
  3207 ;;  crc             2   33[COMRAM] unsigned int 
  3208 ;;  rc_Address      2   31[COMRAM] unsigned int 
  3209 ;;  k               1   43[COMRAM] unsigned char 
  3210 ;;  j               1   42[COMRAM] unsigned char 
  3211 ;;  i               1   41[COMRAM] unsigned char 
  3212 ;;  lsb             1   40[COMRAM] unsigned char 
  3213 ;;  l               1   39[COMRAM] unsigned char 
  3214 ;;  howManyBytes    1   38[COMRAM] unsigned char 
  3215 ;;  remainder       1   35[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;Total ram usage:       15 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    3
  3232 ;; This function calls:
  3233 ;;		_clearResponse
  3234 ;;		_generateCRC
  3235 ;; This function is called by:
  3236 ;;		_decodeIt
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text8
  3241  000276                     __ptext8:
  3242                           	opt stack 0
  3243  000276                     _readInputCoil:
  3244                           	opt stack 26
  3245                           
  3246                           ;modbus.c: 432: unsigned int rc_Address = 0;
  3247                           
  3248                           ;incstack = 0
  3249                           ;incstack = 0
  3250  000276  0E00               	movlw	0
  3251  000278  6E21               	movwf	readInputCoil@rc_Address+1,c
  3252  00027A  0E00               	movlw	0
  3253  00027C  6E20               	movwf	readInputCoil@rc_Address,c
  3254                           
  3255                           ;modbus.c: 433: unsigned int rc_numCoils = 0;
  3256  00027E  0E00               	movlw	0
  3257  000280  6E26               	movwf	readInputCoil@rc_numCoils+1,c
  3258  000282  0E00               	movlw	0
  3259  000284  6E25               	movwf	readInputCoil@rc_numCoils,c
  3260                           
  3261                           ;modbus.c: 434: unsigned int crc = 0;
  3262  000286  0E00               	movlw	0
  3263  000288  6E23               	movwf	readInputCoil@crc+1,c
  3264  00028A  0E00               	movlw	0
  3265  00028C  6E22               	movwf	readInputCoil@crc,c
  3266                           
  3267                           ;modbus.c: 436: unsigned char howManyBytes = 0;
  3268  00028E  6E1E               	movwf	??_readInputCoil& (0+255),c
  3269  000290  0E00               	movlw	0
  3270  000292  6E27               	movwf	readInputCoil@howManyBytes,c
  3271  000294  501E               	movf	??_readInputCoil& (0+255),w,c
  3272                           
  3273                           ;modbus.c: 437: unsigned char remainder = 0;
  3274  000296  6E1E               	movwf	??_readInputCoil& (0+255),c
  3275  000298  0E00               	movlw	0
  3276  00029A  6E24               	movwf	readInputCoil@remainder,c
  3277  00029C  501E               	movf	??_readInputCoil& (0+255),w,c
  3278                           
  3279                           ;modbus.c: 438: unsigned char lsb = 0;
  3280  00029E  6E1E               	movwf	??_readInputCoil& (0+255),c
  3281  0002A0  0E00               	movlw	0
  3282  0002A2  6E29               	movwf	readInputCoil@lsb,c
  3283  0002A4  501E               	movf	??_readInputCoil& (0+255),w,c
  3284                           
  3285                           ;modbus.c: 439: unsigned char i,j,k,l = 0;
  3286  0002A6  6E1E               	movwf	??_readInputCoil& (0+255),c
  3287  0002A8  0E00               	movlw	0
  3288  0002AA  6E28               	movwf	readInputCoil@l,c
  3289  0002AC  501E               	movf	??_readInputCoil& (0+255),w,c
  3290                           
  3291                           ;modbus.c: 442: rc_Address = received[2];
  3292  0002AE  0100               	movlb	0	; () banked
  3293  0002B0  C062  F020         	movff	_received+2,readInputCoil@rc_Address	;volatile
  3294  0002B4  6A21               	clrf	readInputCoil@rc_Address+1,c
  3295                           
  3296                           ;modbus.c: 443: rc_Address <<=8;
  3297  0002B6  5020               	movf	readInputCoil@rc_Address,w,c
  3298  0002B8  6E21               	movwf	readInputCoil@rc_Address+1,c
  3299  0002BA  6A20               	clrf	readInputCoil@rc_Address,c
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;modbus.c: 444: rc_Address |= received[3];
  3303  0002BC  0100               	movlb	0	; () banked
  3304  0002BE  0100               	movlb	0	; () banked
  3305  0002C0  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  3306  0002C2  1220               	iorwf	readInputCoil@rc_Address,f,c
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;modbus.c: 447: rc_numCoils = received[4];
  3310  0002C4  0100               	movlb	0	; () banked
  3311  0002C6  C064  F025         	movff	_received+4,readInputCoil@rc_numCoils	;volatile
  3312  0002CA  6A26               	clrf	readInputCoil@rc_numCoils+1,c
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;modbus.c: 448: rc_numCoils <<= 8;
  3316  0002CC  5025               	movf	readInputCoil@rc_numCoils,w,c
  3317  0002CE  6E26               	movwf	readInputCoil@rc_numCoils+1,c
  3318  0002D0  6A25               	clrf	readInputCoil@rc_numCoils,c
  3319                           
  3320                           ;modbus.c: 449: rc_numCoils |= received[5];
  3321  0002D2  0100               	movlb	0	; () banked
  3322  0002D4  0100               	movlb	0	; () banked
  3323  0002D6  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  3324  0002D8  1225               	iorwf	readInputCoil@rc_numCoils,f,c
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;modbus.c: 451: response[0] = 2;
  3328  0002DA  0E02               	movlw	2
  3329  0002DC  0101               	movlb	1	; () banked
  3330  0002DE  0101               	movlb	1	; () banked
  3331  0002E0  6F00               	movwf	_response& (0+255),b	;volatile
  3332                           
  3333                           ; BSR set to: 1
  3334                           ;modbus.c: 452: response[1] = 0x02;
  3335  0002E2  0E02               	movlw	2
  3336  0002E4  0101               	movlb	1	; () banked
  3337  0002E6  0101               	movlb	1	; () banked
  3338  0002E8  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  3339                           
  3340                           ;modbus.c: 454: howManyBytes = rc_numCoils/8;
  3341  0002EA  C025  F01E         	movff	readInputCoil@rc_numCoils,??_readInputCoil
  3342  0002EE  C026  F01F         	movff	readInputCoil@rc_numCoils+1,??_readInputCoil+1
  3343  0002F2  90D8               	bcf	status,0,c
  3344  0002F4  321F               	rrcf	??_readInputCoil+1,f,c
  3345  0002F6  321E               	rrcf	??_readInputCoil,f,c
  3346  0002F8  90D8               	bcf	status,0,c
  3347  0002FA  321F               	rrcf	??_readInputCoil+1,f,c
  3348  0002FC  321E               	rrcf	??_readInputCoil,f,c
  3349  0002FE  90D8               	bcf	status,0,c
  3350  000300  321F               	rrcf	??_readInputCoil+1,f,c
  3351  000302  321E               	rrcf	??_readInputCoil,f,c
  3352  000304  501E               	movf	??_readInputCoil,w,c
  3353  000306  6E27               	movwf	readInputCoil@howManyBytes,c
  3354                           
  3355                           ;modbus.c: 455: remainder = rc_numCoils % 8;
  3356  000308  5025               	movf	readInputCoil@rc_numCoils,w,c
  3357  00030A  0B07               	andlw	7
  3358  00030C  6E24               	movwf	readInputCoil@remainder,c
  3359                           
  3360                           ; BSR set to: 1
  3361                           ;modbus.c: 457: if(remainder){
  3362  00030E  5024               	movf	readInputCoil@remainder,w,c
  3363  000310  A4D8               	btfss	status,2,c
  3364                           
  3365                           ; BSR set to: 1
  3366                           ;modbus.c: 458: howManyBytes += 1;
  3367  000312  2A27               	incf	readInputCoil@howManyBytes,f,c
  3368                           
  3369                           ; BSR set to: 1
  3370                           ;modbus.c: 459: }
  3371                           ;modbus.c: 460: response[2] = howManyBytes;
  3372                           
  3373                           ; BSR set to: 1
  3374  000314  C027  F102         	movff	readInputCoil@howManyBytes,_response+2	;volatile
  3375                           
  3376                           ; BSR set to: 1
  3377                           ;modbus.c: 462: l = rc_Address;
  3378  000318  C020  F028         	movff	readInputCoil@rc_Address,readInputCoil@l
  3379                           
  3380                           ; BSR set to: 1
  3381                           ;modbus.c: 463: k = 3;
  3382  00031C  6E1E               	movwf	??_readInputCoil& (0+255),c
  3383  00031E  0E03               	movlw	3
  3384  000320  6E2C               	movwf	readInputCoil@k,c
  3385  000322  501E               	movf	??_readInputCoil& (0+255),w,c
  3386                           
  3387                           ; BSR set to: 1
  3388                           ;modbus.c: 465: for(i=howManyBytes; i!=0; i--){
  3389  000324  C027  F02A         	movff	readInputCoil@howManyBytes,readInputCoil@i
  3390  000328  D06E               	goto	L15
  3391  00032A                     l2109:
  3392                           
  3393                           ;modbus.c: 466: if(i>1){
  3394  00032A  0E01               	movlw	1
  3395  00032C  642A               	cpfsgt	readInputCoil@i,c
  3396  00032E  D035               	goto	l2133
  3397                           
  3398                           ;modbus.c: 467: for(j=0;j!=8;j++){
  3399  000330  6E1E               	movwf	??_readInputCoil& (0+255),c
  3400  000332  0E00               	movlw	0
  3401  000334  6E2B               	movwf	readInputCoil@j,c
  3402  000336  501E               	movf	??_readInputCoil& (0+255),w,c
  3403  000338  502B               	movf	readInputCoil@j,w,c
  3404  00033A  0A08               	xorlw	8
  3405  00033C  B4D8               	btfsc	status,2,c
  3406  00033E  D061               	goto	l2149
  3407                           
  3408                           ;modbus.c: 468: if(coils[l]){
  3409  000340  5028               	movf	readInputCoil@l,w,c
  3410  000342  0D01               	mullw	1
  3411  000344  0101               	movlb	1	; () banked
  3412  000346  0E7D               	movlw	low _coils	;volatile
  3413  000348  24F3               	addwf	prodl,w,c
  3414  00034A  6ED9               	movwf	fsr2l,c
  3415  00034C  0101               	movlb	1	; () banked
  3416  00034E  0E01               	movlw	high _coils	;volatile
  3417  000350  20F4               	addwfc	prodh,w,c
  3418  000352  6EDA               	movwf	fsr2h,c
  3419  000354  50DF               	movf	indf2,w,c
  3420  000356  B4D8               	btfsc	status,2,c
  3421  000358  D003               	goto	l2121
  3422                           
  3423                           ; BSR set to: 1
  3424                           ;modbus.c: 469: lsb = 1;
  3425  00035A  6E1E               	movwf	??_readInputCoil& (0+255),c
  3426  00035C  0E01               	movlw	1
  3427  00035E  D002               	goto	L12
  3428  000360                     l2121:
  3429                           
  3430                           ; BSR set to: 1
  3431                           ;modbus.c: 471: else{
  3432                           ;modbus.c: 472: lsb = 0;
  3433  000360  6E1E               	movwf	??_readInputCoil& (0+255),c
  3434  000362  0E00               	movlw	0
  3435  000364                     L12:
  3436  000364  6E29               	movwf	readInputCoil@lsb,c
  3437  000366  501E               	movf	??_readInputCoil& (0+255),w,c
  3438                           
  3439                           ; BSR set to: 1
  3440                           ;modbus.c: 473: }
  3441                           ;modbus.c: 474: response[k] ^= (lsb << j);
  3442                           
  3443                           ; BSR set to: 1
  3444  000368  C02B  F01E         	movff	readInputCoil@j,??_readInputCoil
  3445  00036C  C029  F01F         	movff	readInputCoil@lsb,??_readInputCoil+1
  3446  000370  2A1E               	incf	??_readInputCoil,f,c
  3447  000372  D002               	goto	u1314
  3448  000374                     u1315:
  3449  000374  90D8               	bcf	status,0,c
  3450  000376  361F               	rlcf	??_readInputCoil+1,f,c
  3451  000378                     u1314:
  3452  000378  2E1E               	decfsz	??_readInputCoil,f,c
  3453  00037A  D7FC               	goto	u1315
  3454  00037C  502C               	movf	readInputCoil@k,w,c
  3455  00037E  0D01               	mullw	1
  3456  000380  0101               	movlb	1	; () banked
  3457  000382  0E00               	movlw	low _response	;volatile
  3458  000384  24F3               	addwf	prodl,w,c
  3459  000386  6ED9               	movwf	fsr2l,c
  3460  000388  0101               	movlb	1	; () banked
  3461  00038A  0E01               	movlw	high _response	;volatile
  3462  00038C  20F4               	addwfc	prodh,w,c
  3463  00038E  6EDA               	movwf	fsr2h,c
  3464  000390  501F               	movf	??_readInputCoil+1,w,c
  3465  000392  1ADF               	xorwf	indf2,f,c
  3466                           
  3467                           ; BSR set to: 1
  3468                           ;modbus.c: 475: l++;
  3469  000394  2A28               	incf	readInputCoil@l,f,c
  3470                           
  3471                           ; BSR set to: 1
  3472  000396  2A2B               	incf	readInputCoil@j,f,c
  3473  000398  D7CF               	goto	L13
  3474  00039A                     l2133:
  3475                           
  3476                           ;modbus.c: 479: else{
  3477                           ;modbus.c: 480: for(j=0;j!=remainder;j++){
  3478  00039A  6E1E               	movwf	??_readInputCoil& (0+255),c
  3479  00039C  0E00               	movlw	0
  3480  00039E  6E2B               	movwf	readInputCoil@j,c
  3481  0003A0  501E               	movf	??_readInputCoil& (0+255),w,c
  3482  0003A2  D02C               	goto	l2147
  3483  0003A4                     l2135:
  3484                           
  3485                           ;modbus.c: 481: if(coils[l]){
  3486  0003A4  5028               	movf	readInputCoil@l,w,c
  3487  0003A6  0D01               	mullw	1
  3488  0003A8  0101               	movlb	1	; () banked
  3489  0003AA  0E7D               	movlw	low _coils	;volatile
  3490  0003AC  24F3               	addwf	prodl,w,c
  3491  0003AE  6ED9               	movwf	fsr2l,c
  3492  0003B0  0101               	movlb	1	; () banked
  3493  0003B2  0E01               	movlw	high _coils	;volatile
  3494  0003B4  20F4               	addwfc	prodh,w,c
  3495  0003B6  6EDA               	movwf	fsr2h,c
  3496  0003B8  50DF               	movf	indf2,w,c
  3497  0003BA  B4D8               	btfsc	status,2,c
  3498  0003BC  D003               	goto	l2139
  3499                           
  3500                           ; BSR set to: 1
  3501                           ;modbus.c: 482: lsb = 1;
  3502  0003BE  6E1E               	movwf	??_readInputCoil& (0+255),c
  3503  0003C0  0E01               	movlw	1
  3504  0003C2  D002               	goto	L14
  3505  0003C4                     l2139:
  3506                           
  3507                           ; BSR set to: 1
  3508                           ;modbus.c: 484: else{
  3509                           ;modbus.c: 485: lsb = 0;
  3510  0003C4  6E1E               	movwf	??_readInputCoil& (0+255),c
  3511  0003C6  0E00               	movlw	0
  3512  0003C8                     L14:
  3513  0003C8  6E29               	movwf	readInputCoil@lsb,c
  3514  0003CA  501E               	movf	??_readInputCoil& (0+255),w,c
  3515                           
  3516                           ; BSR set to: 1
  3517                           ;modbus.c: 486: }
  3518                           ;modbus.c: 487: response[k] ^= (lsb << j);
  3519                           
  3520                           ; BSR set to: 1
  3521  0003CC  C02B  F01E         	movff	readInputCoil@j,??_readInputCoil
  3522  0003D0  C029  F01F         	movff	readInputCoil@lsb,??_readInputCoil+1
  3523  0003D4  2A1E               	incf	??_readInputCoil,f,c
  3524  0003D6  D002               	goto	u1344
  3525  0003D8                     u1345:
  3526  0003D8  90D8               	bcf	status,0,c
  3527  0003DA  361F               	rlcf	??_readInputCoil+1,f,c
  3528  0003DC                     u1344:
  3529  0003DC  2E1E               	decfsz	??_readInputCoil,f,c
  3530  0003DE  D7FC               	goto	u1345
  3531  0003E0  502C               	movf	readInputCoil@k,w,c
  3532  0003E2  0D01               	mullw	1
  3533  0003E4  0101               	movlb	1	; () banked
  3534  0003E6  0E00               	movlw	low _response	;volatile
  3535  0003E8  24F3               	addwf	prodl,w,c
  3536  0003EA  6ED9               	movwf	fsr2l,c
  3537  0003EC  0101               	movlb	1	; () banked
  3538  0003EE  0E01               	movlw	high _response	;volatile
  3539  0003F0  20F4               	addwfc	prodh,w,c
  3540  0003F2  6EDA               	movwf	fsr2h,c
  3541  0003F4  501F               	movf	??_readInputCoil+1,w,c
  3542  0003F6  1ADF               	xorwf	indf2,f,c
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;modbus.c: 488: l++;
  3546  0003F8  2A28               	incf	readInputCoil@l,f,c
  3547                           
  3548                           ; BSR set to: 1
  3549  0003FA  2A2B               	incf	readInputCoil@j,f,c
  3550  0003FC                     l2147:
  3551  0003FC  5024               	movf	readInputCoil@remainder,w,c
  3552  0003FE  622B               	cpfseq	readInputCoil@j,c
  3553  000400  D7D1               	goto	l2135
  3554  000402                     l2149:
  3555                           
  3556                           ;modbus.c: 489: }
  3557                           ;modbus.c: 490: k++;
  3558  000402  2A2C               	incf	readInputCoil@k,f,c
  3559  000404  062A               	decf	readInputCoil@i,f,c
  3560  000406                     L15:
  3561  000406  662A               	tstfsz	readInputCoil@i,c
  3562  000408  D790               	goto	l2109
  3563                           
  3564                           ;modbus.c: 491: }
  3565                           ;modbus.c: 492: }
  3566                           ;modbus.c: 493: crc = generateCRC(k+2);
  3567  00040A  502C               	movf	readInputCoil@k,w,c
  3568  00040C  0F02               	addlw	2
  3569  00040E  6E0F               	movwf	?_generateCRC,c
  3570  000410  ECA5  F008         	call	_generateCRC	;wreg free
  3571  000414  C00F  F022         	movff	?_generateCRC,readInputCoil@crc
  3572  000418  C010  F023         	movff	?_generateCRC+1,readInputCoil@crc+1
  3573                           
  3574                           ;modbus.c: 495: response[k] = crc >> 8;
  3575  00041C  502C               	movf	readInputCoil@k,w,c
  3576  00041E  0D01               	mullw	1
  3577  000420  0101               	movlb	1	; () banked
  3578  000422  0E00               	movlw	low _response	;volatile
  3579  000424  24F3               	addwf	prodl,w,c
  3580  000426  6ED9               	movwf	fsr2l,c
  3581  000428  0101               	movlb	1	; () banked
  3582  00042A  0E01               	movlw	high _response	;volatile
  3583  00042C  20F4               	addwfc	prodh,w,c
  3584  00042E  6EDA               	movwf	fsr2h,c
  3585  000430  5023               	movf	readInputCoil@crc+1,w,c
  3586  000432  6EDF               	movwf	indf2,c
  3587                           
  3588                           ; BSR set to: 1
  3589                           ;modbus.c: 496: response[k+1] = crc;
  3590  000434  502C               	movf	readInputCoil@k,w,c
  3591  000436  6E1E               	movwf	??_readInputCoil& (0+255),c
  3592  000438  6A1F               	clrf	(??_readInputCoil+1)& (0+255),c
  3593  00043A  0E01               	movlw	1
  3594  00043C  261E               	addwf	??_readInputCoil,f,c
  3595  00043E  0E00               	movlw	0
  3596  000440  221F               	addwfc	??_readInputCoil+1,f,c
  3597  000442  0101               	movlb	1	; () banked
  3598  000444  0E00               	movlw	low _response	;volatile
  3599  000446  241E               	addwf	??_readInputCoil,w,c
  3600  000448  6ED9               	movwf	fsr2l,c
  3601  00044A  0101               	movlb	1	; () banked
  3602  00044C  0E01               	movlw	high _response	;volatile
  3603  00044E  201F               	addwfc	??_readInputCoil+1,w,c
  3604  000450  6EDA               	movwf	fsr2h,c
  3605  000452  C022  FFDF         	movff	readInputCoil@crc,indf2
  3606                           
  3607                           ; BSR set to: 1
  3608                           ;modbus.c: 498: LATCbits.LATC1 = 1;
  3609  000456  828B               	bsf	3979,1,c	;volatile
  3610                           
  3611                           ; BSR set to: 1
  3612                           ;modbus.c: 499: for(i=0;i!=(k+3);i++){
  3613  000458  6E1E               	movwf	??_readInputCoil& (0+255),c
  3614  00045A  0E00               	movlw	0
  3615  00045C  6E2A               	movwf	readInputCoil@i,c
  3616  00045E  501E               	movf	??_readInputCoil& (0+255),w,c
  3617  000460  D00F               	goto	l2167
  3618  000462                     l269:
  3619  000462  A2AC               	btfss	4012,1,c	;volatile
  3620  000464  D7FE               	goto	l269
  3621                           
  3622                           ;modbus.c: 501: TXREG1 = response[i];
  3623  000466  502A               	movf	readInputCoil@i,w,c
  3624  000468  0D01               	mullw	1
  3625  00046A  0101               	movlb	1	; () banked
  3626  00046C  0E00               	movlw	low _response	;volatile
  3627  00046E  24F3               	addwf	prodl,w,c
  3628  000470  6ED9               	movwf	fsr2l,c
  3629  000472  0101               	movlb	1	; () banked
  3630  000474  0E01               	movlw	high _response	;volatile
  3631  000476  20F4               	addwfc	prodh,w,c
  3632  000478  6EDA               	movwf	fsr2h,c
  3633  00047A  50DF               	movf	indf2,w,c
  3634  00047C  6EAD               	movwf	4013,c	;volatile
  3635                           
  3636                           ; BSR set to: 1
  3637  00047E  2A2A               	incf	readInputCoil@i,f,c
  3638  000480                     l2167:
  3639                           
  3640                           ; BSR set to: 1
  3641  000480  502C               	movf	readInputCoil@k,w,c
  3642  000482  6E1E               	movwf	??_readInputCoil& (0+255),c
  3643  000484  6A1F               	clrf	(??_readInputCoil+1)& (0+255),c
  3644  000486  0E03               	movlw	3
  3645  000488  261E               	addwf	??_readInputCoil,f,c
  3646  00048A  0E00               	movlw	0
  3647  00048C  221F               	addwfc	??_readInputCoil+1,f,c
  3648  00048E  502A               	movf	readInputCoil@i,w,c
  3649  000490  181E               	xorwf	??_readInputCoil,w,c
  3650  000492  101F               	iorwf	??_readInputCoil+1,w,c
  3651  000494  A4D8               	btfss	status,2,c
  3652  000496  D7E5               	goto	l269
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;modbus.c: 502: }
  3656                           ;modbus.c: 503: LATCbits.LATC1 = 0;
  3657  000498  928B               	bcf	3979,1,c	;volatile
  3658                           
  3659                           ; BSR set to: 1
  3660                           ;modbus.c: 504: clearResponse();
  3661  00049A  ECBD  F009         	call	_clearResponse	;wreg free
  3662  00049E  0012               	return	
  3663  0004A0                     __end_of_readInputCoil:
  3664                           	opt stack 0
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           postinc0	equ	0xFEE
  3672                           wreg	equ	0xFE8
  3673                           indf1	equ	0xFE7
  3674                           postinc1	equ	0xFE6
  3675                           postdec1	equ	0xFE5
  3676                           fsr1h	equ	0xFE2
  3677                           fsr1l	equ	0xFE1
  3678                           indf2	equ	0xFDF
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _readCoil *****************
  3686 ;; Defined at:
  3687 ;;		line 348 in file "modbus.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  rc_numCoils     2   36[COMRAM] unsigned int 
  3692 ;;  crc             2   33[COMRAM] unsigned int 
  3693 ;;  rc_Address      2   31[COMRAM] unsigned int 
  3694 ;;  k               1   43[COMRAM] unsigned char 
  3695 ;;  j               1   42[COMRAM] unsigned char 
  3696 ;;  i               1   41[COMRAM] unsigned char 
  3697 ;;  lsb             1   40[COMRAM] unsigned char 
  3698 ;;  l               1   39[COMRAM] unsigned char 
  3699 ;;  howManyBytes    1   38[COMRAM] unsigned char 
  3700 ;;  remainder       1   35[COMRAM] unsigned char 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;Total ram usage:       15 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    3
  3717 ;; This function calls:
  3718 ;;		_clearResponse
  3719 ;;		_generateCRC
  3720 ;; This function is called by:
  3721 ;;		_decodeIt
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text9
  3726  0004A0                     __ptext9:
  3727                           	opt stack 0
  3728  0004A0                     _readCoil:
  3729                           	opt stack 26
  3730                           
  3731                           ;modbus.c: 352: unsigned int rc_Address = 0;
  3732                           
  3733                           ;incstack = 0
  3734                           ;incstack = 0
  3735  0004A0  0E00               	movlw	0
  3736  0004A2  6E21               	movwf	readCoil@rc_Address+1,c
  3737  0004A4  0E00               	movlw	0
  3738  0004A6  6E20               	movwf	readCoil@rc_Address,c
  3739                           
  3740                           ;modbus.c: 353: unsigned int rc_numCoils = 0;
  3741  0004A8  0E00               	movlw	0
  3742  0004AA  6E26               	movwf	readCoil@rc_numCoils+1,c
  3743  0004AC  0E00               	movlw	0
  3744  0004AE  6E25               	movwf	readCoil@rc_numCoils,c
  3745                           
  3746                           ;modbus.c: 354: unsigned int crc = 0;
  3747  0004B0  0E00               	movlw	0
  3748  0004B2  6E23               	movwf	readCoil@crc+1,c
  3749  0004B4  0E00               	movlw	0
  3750  0004B6  6E22               	movwf	readCoil@crc,c
  3751                           
  3752                           ;modbus.c: 356: unsigned char howManyBytes = 0;
  3753  0004B8  6E1E               	movwf	??_readCoil& (0+255),c
  3754  0004BA  0E00               	movlw	0
  3755  0004BC  6E27               	movwf	readCoil@howManyBytes,c
  3756  0004BE  501E               	movf	??_readCoil& (0+255),w,c
  3757                           
  3758                           ;modbus.c: 357: unsigned char remainder = 0;
  3759  0004C0  6E1E               	movwf	??_readCoil& (0+255),c
  3760  0004C2  0E00               	movlw	0
  3761  0004C4  6E24               	movwf	readCoil@remainder,c
  3762  0004C6  501E               	movf	??_readCoil& (0+255),w,c
  3763                           
  3764                           ;modbus.c: 358: unsigned char lsb = 0;
  3765  0004C8  6E1E               	movwf	??_readCoil& (0+255),c
  3766  0004CA  0E00               	movlw	0
  3767  0004CC  6E29               	movwf	readCoil@lsb,c
  3768  0004CE  501E               	movf	??_readCoil& (0+255),w,c
  3769                           
  3770                           ;modbus.c: 359: unsigned char i,j,k,l = 0;
  3771  0004D0  6E1E               	movwf	??_readCoil& (0+255),c
  3772  0004D2  0E00               	movlw	0
  3773  0004D4  6E28               	movwf	readCoil@l,c
  3774  0004D6  501E               	movf	??_readCoil& (0+255),w,c
  3775                           
  3776                           ;modbus.c: 362: rc_Address = received[2];
  3777  0004D8  0100               	movlb	0	; () banked
  3778  0004DA  C062  F020         	movff	_received+2,readCoil@rc_Address	;volatile
  3779  0004DE  6A21               	clrf	readCoil@rc_Address+1,c
  3780                           
  3781                           ;modbus.c: 363: rc_Address <<=8;
  3782  0004E0  5020               	movf	readCoil@rc_Address,w,c
  3783  0004E2  6E21               	movwf	readCoil@rc_Address+1,c
  3784  0004E4  6A20               	clrf	readCoil@rc_Address,c
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;modbus.c: 364: rc_Address |= received[3];
  3788  0004E6  0100               	movlb	0	; () banked
  3789  0004E8  0100               	movlb	0	; () banked
  3790  0004EA  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  3791  0004EC  1220               	iorwf	readCoil@rc_Address,f,c
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;modbus.c: 367: rc_numCoils = received[4];
  3795  0004EE  0100               	movlb	0	; () banked
  3796  0004F0  C064  F025         	movff	_received+4,readCoil@rc_numCoils	;volatile
  3797  0004F4  6A26               	clrf	readCoil@rc_numCoils+1,c
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;modbus.c: 368: rc_numCoils <<= 8;
  3801  0004F6  5025               	movf	readCoil@rc_numCoils,w,c
  3802  0004F8  6E26               	movwf	readCoil@rc_numCoils+1,c
  3803  0004FA  6A25               	clrf	readCoil@rc_numCoils,c
  3804                           
  3805                           ;modbus.c: 369: rc_numCoils |= received[5];
  3806  0004FC  0100               	movlb	0	; () banked
  3807  0004FE  0100               	movlb	0	; () banked
  3808  000500  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  3809  000502  1225               	iorwf	readCoil@rc_numCoils,f,c
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;modbus.c: 371: response[0] = 2;
  3813  000504  0E02               	movlw	2
  3814  000506  0101               	movlb	1	; () banked
  3815  000508  0101               	movlb	1	; () banked
  3816  00050A  6F00               	movwf	_response& (0+255),b	;volatile
  3817                           
  3818                           ; BSR set to: 1
  3819                           ;modbus.c: 372: response[1] = 0x01;
  3820  00050C  0E01               	movlw	1
  3821  00050E  0101               	movlb	1	; () banked
  3822  000510  0101               	movlb	1	; () banked
  3823  000512  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  3824                           
  3825                           ;modbus.c: 374: howManyBytes = rc_numCoils/8;
  3826  000514  C025  F01E         	movff	readCoil@rc_numCoils,??_readCoil
  3827  000518  C026  F01F         	movff	readCoil@rc_numCoils+1,??_readCoil+1
  3828  00051C  90D8               	bcf	status,0,c
  3829  00051E  321F               	rrcf	??_readCoil+1,f,c
  3830  000520  321E               	rrcf	??_readCoil,f,c
  3831  000522  90D8               	bcf	status,0,c
  3832  000524  321F               	rrcf	??_readCoil+1,f,c
  3833  000526  321E               	rrcf	??_readCoil,f,c
  3834  000528  90D8               	bcf	status,0,c
  3835  00052A  321F               	rrcf	??_readCoil+1,f,c
  3836  00052C  321E               	rrcf	??_readCoil,f,c
  3837  00052E  501E               	movf	??_readCoil,w,c
  3838  000530  6E27               	movwf	readCoil@howManyBytes,c
  3839                           
  3840                           ;modbus.c: 375: remainder = rc_numCoils % 8;
  3841  000532  5025               	movf	readCoil@rc_numCoils,w,c
  3842  000534  0B07               	andlw	7
  3843  000536  6E24               	movwf	readCoil@remainder,c
  3844                           
  3845                           ; BSR set to: 1
  3846                           ;modbus.c: 377: if(remainder){
  3847  000538  5024               	movf	readCoil@remainder,w,c
  3848  00053A  A4D8               	btfss	status,2,c
  3849                           
  3850                           ; BSR set to: 1
  3851                           ;modbus.c: 378: howManyBytes += 1;
  3852  00053C  2A27               	incf	readCoil@howManyBytes,f,c
  3853                           
  3854                           ; BSR set to: 1
  3855                           ;modbus.c: 379: }
  3856                           ;modbus.c: 380: response[2] = howManyBytes;
  3857                           
  3858                           ; BSR set to: 1
  3859  00053E  C027  F102         	movff	readCoil@howManyBytes,_response+2	;volatile
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;modbus.c: 382: l = rc_Address;
  3863  000542  C020  F028         	movff	readCoil@rc_Address,readCoil@l
  3864                           
  3865                           ; BSR set to: 1
  3866                           ;modbus.c: 383: k = 3;
  3867  000546  6E1E               	movwf	??_readCoil& (0+255),c
  3868  000548  0E03               	movlw	3
  3869  00054A  6E2C               	movwf	readCoil@k,c
  3870  00054C  501E               	movf	??_readCoil& (0+255),w,c
  3871                           
  3872                           ; BSR set to: 1
  3873                           ;modbus.c: 385: for(i=howManyBytes; i!=0; i--){
  3874  00054E  C027  F02A         	movff	readCoil@howManyBytes,readCoil@i
  3875  000552  D06E               	goto	L19
  3876  000554                     l2009:
  3877                           
  3878                           ;modbus.c: 386: if(i>1){
  3879  000554  0E01               	movlw	1
  3880  000556  642A               	cpfsgt	readCoil@i,c
  3881  000558  D035               	goto	l2033
  3882                           
  3883                           ;modbus.c: 387: for(j=0;j!=8;j++){
  3884  00055A  6E1E               	movwf	??_readCoil& (0+255),c
  3885  00055C  0E00               	movlw	0
  3886  00055E  6E2B               	movwf	readCoil@j,c
  3887  000560  501E               	movf	??_readCoil& (0+255),w,c
  3888  000562  502B               	movf	readCoil@j,w,c
  3889  000564  0A08               	xorlw	8
  3890  000566  B4D8               	btfsc	status,2,c
  3891  000568  D061               	goto	l2049
  3892                           
  3893                           ;modbus.c: 388: if(coils[l]){
  3894  00056A  5028               	movf	readCoil@l,w,c
  3895  00056C  0D01               	mullw	1
  3896  00056E  0101               	movlb	1	; () banked
  3897  000570  0E7D               	movlw	low _coils	;volatile
  3898  000572  24F3               	addwf	prodl,w,c
  3899  000574  6ED9               	movwf	fsr2l,c
  3900  000576  0101               	movlb	1	; () banked
  3901  000578  0E01               	movlw	high _coils	;volatile
  3902  00057A  20F4               	addwfc	prodh,w,c
  3903  00057C  6EDA               	movwf	fsr2h,c
  3904  00057E  50DF               	movf	indf2,w,c
  3905  000580  B4D8               	btfsc	status,2,c
  3906  000582  D003               	goto	l2021
  3907                           
  3908                           ; BSR set to: 1
  3909                           ;modbus.c: 389: lsb = 1;
  3910  000584  6E1E               	movwf	??_readCoil& (0+255),c
  3911  000586  0E01               	movlw	1
  3912  000588  D002               	goto	L16
  3913  00058A                     l2021:
  3914                           
  3915                           ; BSR set to: 1
  3916                           ;modbus.c: 391: else{
  3917                           ;modbus.c: 392: lsb = 0;
  3918  00058A  6E1E               	movwf	??_readCoil& (0+255),c
  3919  00058C  0E00               	movlw	0
  3920  00058E                     L16:
  3921  00058E  6E29               	movwf	readCoil@lsb,c
  3922  000590  501E               	movf	??_readCoil& (0+255),w,c
  3923                           
  3924                           ; BSR set to: 1
  3925                           ;modbus.c: 393: }
  3926                           ;modbus.c: 394: response[k] ^= (lsb << j);
  3927                           
  3928                           ; BSR set to: 1
  3929  000592  C02B  F01E         	movff	readCoil@j,??_readCoil
  3930  000596  C029  F01F         	movff	readCoil@lsb,??_readCoil+1
  3931  00059A  2A1E               	incf	??_readCoil,f,c
  3932  00059C  D002               	goto	u1184
  3933  00059E                     u1185:
  3934  00059E  90D8               	bcf	status,0,c
  3935  0005A0  361F               	rlcf	??_readCoil+1,f,c
  3936  0005A2                     u1184:
  3937  0005A2  2E1E               	decfsz	??_readCoil,f,c
  3938  0005A4  D7FC               	goto	u1185
  3939  0005A6  502C               	movf	readCoil@k,w,c
  3940  0005A8  0D01               	mullw	1
  3941  0005AA  0101               	movlb	1	; () banked
  3942  0005AC  0E00               	movlw	low _response	;volatile
  3943  0005AE  24F3               	addwf	prodl,w,c
  3944  0005B0  6ED9               	movwf	fsr2l,c
  3945  0005B2  0101               	movlb	1	; () banked
  3946  0005B4  0E01               	movlw	high _response	;volatile
  3947  0005B6  20F4               	addwfc	prodh,w,c
  3948  0005B8  6EDA               	movwf	fsr2h,c
  3949  0005BA  501F               	movf	??_readCoil+1,w,c
  3950  0005BC  1ADF               	xorwf	indf2,f,c
  3951                           
  3952                           ; BSR set to: 1
  3953                           ;modbus.c: 395: l++;
  3954  0005BE  2A28               	incf	readCoil@l,f,c
  3955                           
  3956                           ; BSR set to: 1
  3957  0005C0  2A2B               	incf	readCoil@j,f,c
  3958  0005C2  D7CF               	goto	L17
  3959  0005C4                     l2033:
  3960                           
  3961                           ;modbus.c: 399: else{
  3962                           ;modbus.c: 400: for(j=0;j!=remainder;j++){
  3963  0005C4  6E1E               	movwf	??_readCoil& (0+255),c
  3964  0005C6  0E00               	movlw	0
  3965  0005C8  6E2B               	movwf	readCoil@j,c
  3966  0005CA  501E               	movf	??_readCoil& (0+255),w,c
  3967  0005CC  D02C               	goto	l2047
  3968  0005CE                     l2035:
  3969                           
  3970                           ;modbus.c: 401: if(coils[l]){
  3971  0005CE  5028               	movf	readCoil@l,w,c
  3972  0005D0  0D01               	mullw	1
  3973  0005D2  0101               	movlb	1	; () banked
  3974  0005D4  0E7D               	movlw	low _coils	;volatile
  3975  0005D6  24F3               	addwf	prodl,w,c
  3976  0005D8  6ED9               	movwf	fsr2l,c
  3977  0005DA  0101               	movlb	1	; () banked
  3978  0005DC  0E01               	movlw	high _coils	;volatile
  3979  0005DE  20F4               	addwfc	prodh,w,c
  3980  0005E0  6EDA               	movwf	fsr2h,c
  3981  0005E2  50DF               	movf	indf2,w,c
  3982  0005E4  B4D8               	btfsc	status,2,c
  3983  0005E6  D003               	goto	l2039
  3984                           
  3985                           ; BSR set to: 1
  3986                           ;modbus.c: 402: lsb = 1;
  3987  0005E8  6E1E               	movwf	??_readCoil& (0+255),c
  3988  0005EA  0E01               	movlw	1
  3989  0005EC  D002               	goto	L18
  3990  0005EE                     l2039:
  3991                           
  3992                           ; BSR set to: 1
  3993                           ;modbus.c: 404: else{
  3994                           ;modbus.c: 405: lsb = 0;
  3995  0005EE  6E1E               	movwf	??_readCoil& (0+255),c
  3996  0005F0  0E00               	movlw	0
  3997  0005F2                     L18:
  3998  0005F2  6E29               	movwf	readCoil@lsb,c
  3999  0005F4  501E               	movf	??_readCoil& (0+255),w,c
  4000                           
  4001                           ; BSR set to: 1
  4002                           ;modbus.c: 406: }
  4003                           ;modbus.c: 407: response[k] ^= (lsb << j);
  4004                           
  4005                           ; BSR set to: 1
  4006  0005F6  C02B  F01E         	movff	readCoil@j,??_readCoil
  4007  0005FA  C029  F01F         	movff	readCoil@lsb,??_readCoil+1
  4008  0005FE  2A1E               	incf	??_readCoil,f,c
  4009  000600  D002               	goto	u1214
  4010  000602                     u1215:
  4011  000602  90D8               	bcf	status,0,c
  4012  000604  361F               	rlcf	??_readCoil+1,f,c
  4013  000606                     u1214:
  4014  000606  2E1E               	decfsz	??_readCoil,f,c
  4015  000608  D7FC               	goto	u1215
  4016  00060A  502C               	movf	readCoil@k,w,c
  4017  00060C  0D01               	mullw	1
  4018  00060E  0101               	movlb	1	; () banked
  4019  000610  0E00               	movlw	low _response	;volatile
  4020  000612  24F3               	addwf	prodl,w,c
  4021  000614  6ED9               	movwf	fsr2l,c
  4022  000616  0101               	movlb	1	; () banked
  4023  000618  0E01               	movlw	high _response	;volatile
  4024  00061A  20F4               	addwfc	prodh,w,c
  4025  00061C  6EDA               	movwf	fsr2h,c
  4026  00061E  501F               	movf	??_readCoil+1,w,c
  4027  000620  1ADF               	xorwf	indf2,f,c
  4028                           
  4029                           ; BSR set to: 1
  4030                           ;modbus.c: 408: l++;
  4031  000622  2A28               	incf	readCoil@l,f,c
  4032                           
  4033                           ; BSR set to: 1
  4034  000624  2A2B               	incf	readCoil@j,f,c
  4035  000626                     l2047:
  4036  000626  5024               	movf	readCoil@remainder,w,c
  4037  000628  622B               	cpfseq	readCoil@j,c
  4038  00062A  D7D1               	goto	l2035
  4039  00062C                     l2049:
  4040                           
  4041                           ;modbus.c: 409: }
  4042                           ;modbus.c: 410: k++;
  4043  00062C  2A2C               	incf	readCoil@k,f,c
  4044  00062E  062A               	decf	readCoil@i,f,c
  4045  000630                     L19:
  4046  000630  662A               	tstfsz	readCoil@i,c
  4047  000632  D790               	goto	l2009
  4048                           
  4049                           ;modbus.c: 411: }
  4050                           ;modbus.c: 412: }
  4051                           ;modbus.c: 413: crc = generateCRC(k+2);
  4052  000634  502C               	movf	readCoil@k,w,c
  4053  000636  0F02               	addlw	2
  4054  000638  6E0F               	movwf	?_generateCRC,c
  4055  00063A  ECA5  F008         	call	_generateCRC	;wreg free
  4056  00063E  C00F  F022         	movff	?_generateCRC,readCoil@crc
  4057  000642  C010  F023         	movff	?_generateCRC+1,readCoil@crc+1
  4058                           
  4059                           ;modbus.c: 415: response[k] = crc >> 8;
  4060  000646  502C               	movf	readCoil@k,w,c
  4061  000648  0D01               	mullw	1
  4062  00064A  0101               	movlb	1	; () banked
  4063  00064C  0E00               	movlw	low _response	;volatile
  4064  00064E  24F3               	addwf	prodl,w,c
  4065  000650  6ED9               	movwf	fsr2l,c
  4066  000652  0101               	movlb	1	; () banked
  4067  000654  0E01               	movlw	high _response	;volatile
  4068  000656  20F4               	addwfc	prodh,w,c
  4069  000658  6EDA               	movwf	fsr2h,c
  4070  00065A  5023               	movf	readCoil@crc+1,w,c
  4071  00065C  6EDF               	movwf	indf2,c
  4072                           
  4073                           ; BSR set to: 1
  4074                           ;modbus.c: 416: response[k+1] = crc;
  4075  00065E  502C               	movf	readCoil@k,w,c
  4076  000660  6E1E               	movwf	??_readCoil& (0+255),c
  4077  000662  6A1F               	clrf	(??_readCoil+1)& (0+255),c
  4078  000664  0E01               	movlw	1
  4079  000666  261E               	addwf	??_readCoil,f,c
  4080  000668  0E00               	movlw	0
  4081  00066A  221F               	addwfc	??_readCoil+1,f,c
  4082  00066C  0101               	movlb	1	; () banked
  4083  00066E  0E00               	movlw	low _response	;volatile
  4084  000670  241E               	addwf	??_readCoil,w,c
  4085  000672  6ED9               	movwf	fsr2l,c
  4086  000674  0101               	movlb	1	; () banked
  4087  000676  0E01               	movlw	high _response	;volatile
  4088  000678  201F               	addwfc	??_readCoil+1,w,c
  4089  00067A  6EDA               	movwf	fsr2h,c
  4090  00067C  C022  FFDF         	movff	readCoil@crc,indf2
  4091                           
  4092                           ; BSR set to: 1
  4093                           ;modbus.c: 418: LATCbits.LATC1 = 1;
  4094  000680  828B               	bsf	3979,1,c	;volatile
  4095                           
  4096                           ; BSR set to: 1
  4097                           ;modbus.c: 419: for(i=0;i!=(k+3);i++){
  4098  000682  6E1E               	movwf	??_readCoil& (0+255),c
  4099  000684  0E00               	movlw	0
  4100  000686  6E2A               	movwf	readCoil@i,c
  4101  000688  501E               	movf	??_readCoil& (0+255),w,c
  4102  00068A  D00F               	goto	l2067
  4103  00068C                     l246:
  4104  00068C  A2AC               	btfss	4012,1,c	;volatile
  4105  00068E  D7FE               	goto	l246
  4106                           
  4107                           ;modbus.c: 421: TXREG1 = response[i];
  4108  000690  502A               	movf	readCoil@i,w,c
  4109  000692  0D01               	mullw	1
  4110  000694  0101               	movlb	1	; () banked
  4111  000696  0E00               	movlw	low _response	;volatile
  4112  000698  24F3               	addwf	prodl,w,c
  4113  00069A  6ED9               	movwf	fsr2l,c
  4114  00069C  0101               	movlb	1	; () banked
  4115  00069E  0E01               	movlw	high _response	;volatile
  4116  0006A0  20F4               	addwfc	prodh,w,c
  4117  0006A2  6EDA               	movwf	fsr2h,c
  4118  0006A4  50DF               	movf	indf2,w,c
  4119  0006A6  6EAD               	movwf	4013,c	;volatile
  4120                           
  4121                           ; BSR set to: 1
  4122  0006A8  2A2A               	incf	readCoil@i,f,c
  4123  0006AA                     l2067:
  4124                           
  4125                           ; BSR set to: 1
  4126  0006AA  502C               	movf	readCoil@k,w,c
  4127  0006AC  6E1E               	movwf	??_readCoil& (0+255),c
  4128  0006AE  6A1F               	clrf	(??_readCoil+1)& (0+255),c
  4129  0006B0  0E03               	movlw	3
  4130  0006B2  261E               	addwf	??_readCoil,f,c
  4131  0006B4  0E00               	movlw	0
  4132  0006B6  221F               	addwfc	??_readCoil+1,f,c
  4133  0006B8  502A               	movf	readCoil@i,w,c
  4134  0006BA  181E               	xorwf	??_readCoil,w,c
  4135  0006BC  101F               	iorwf	??_readCoil+1,w,c
  4136  0006BE  A4D8               	btfss	status,2,c
  4137  0006C0  D7E5               	goto	l246
  4138                           
  4139                           ; BSR set to: 1
  4140                           ;modbus.c: 422: }
  4141                           ;modbus.c: 423: LATCbits.LATC1 = 0;
  4142  0006C2  928B               	bcf	3979,1,c	;volatile
  4143                           
  4144                           ; BSR set to: 1
  4145                           ;modbus.c: 424: clearResponse();
  4146  0006C4  ECBD  F009         	call	_clearResponse	;wreg free
  4147  0006C8  0012               	return	
  4148  0006CA                     __end_of_readCoil:
  4149                           	opt stack 0
  4150                           tblptru	equ	0xFF8
  4151                           tblptrh	equ	0xFF7
  4152                           tblptrl	equ	0xFF6
  4153                           tablat	equ	0xFF5
  4154                           prodh	equ	0xFF4
  4155                           prodl	equ	0xFF3
  4156                           postinc0	equ	0xFEE
  4157                           wreg	equ	0xFE8
  4158                           indf1	equ	0xFE7
  4159                           postinc1	equ	0xFE6
  4160                           postdec1	equ	0xFE5
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _generateCRC *****************
  4171 ;; Defined at:
  4172 ;;		line 669 in file "modbus.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;  messageLengt    1   14[COMRAM] unsigned char 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  crc             2   27[COMRAM] unsigned int 
  4177 ;;  j               2   25[COMRAM] int 
  4178 ;;  i               2   23[COMRAM] int 
  4179 ;;  crcHigh         2   21[COMRAM] unsigned int 
  4180 ;;  crcLow          2   19[COMRAM] unsigned int 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  2   14[COMRAM] unsigned int 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;Total ram usage:       15 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    2
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_readReg
  4201 ;;		_readInputReg
  4202 ;;		_writeReg
  4203 ;;		_writeMultipleRegs
  4204 ;;		_readCoil
  4205 ;;		_readInputCoil
  4206 ;;		_writeCoil
  4207 ;;		_writeMultipleCoils
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text10
  4212  00114A                     __ptext10:
  4213                           	opt stack 0
  4214  00114A                     _generateCRC:
  4215                           	opt stack 26
  4216                           
  4217                           ;modbus.c: 670: unsigned int crc = 0xFFFF;
  4218                           
  4219                           ;incstack = 0
  4220                           ;incstack = 0
  4221  00114A  681C               	setf	generateCRC@crc,c
  4222  00114C  681D               	setf	generateCRC@crc+1,c
  4223                           
  4224                           ;modbus.c: 671: unsigned int crcHigh = 0;
  4225  00114E  0E00               	movlw	0
  4226  001150  6E17               	movwf	generateCRC@crcHigh+1,c
  4227  001152  0E00               	movlw	0
  4228  001154  6E16               	movwf	generateCRC@crcHigh,c
  4229                           
  4230                           ;modbus.c: 672: unsigned int crcLow = 0;
  4231  001156  0E00               	movlw	0
  4232  001158  6E15               	movwf	generateCRC@crcLow+1,c
  4233  00115A  0E00               	movlw	0
  4234  00115C  6E14               	movwf	generateCRC@crcLow,c
  4235                           
  4236                           ;modbus.c: 673: int i,j = 0;
  4237  00115E  0E00               	movlw	0
  4238  001160  6E1B               	movwf	generateCRC@j+1,c
  4239  001162  0E00               	movlw	0
  4240  001164  6E1A               	movwf	generateCRC@j,c
  4241                           
  4242                           ;modbus.c: 675: for(i=0;i<messageLength-2;i++){
  4243  001166  0E00               	movlw	0
  4244  001168  6E19               	movwf	generateCRC@i+1,c
  4245  00116A  0E00               	movlw	0
  4246  00116C  6E18               	movwf	generateCRC@i,c
  4247  00116E  D027               	goto	l2653
  4248  001170                     l2635:
  4249                           
  4250                           ;modbus.c: 676: crc ^= response[i];
  4251  001170  0101               	movlb	1	; () banked
  4252  001172  0E00               	movlw	low _response	;volatile
  4253  001174  2418               	addwf	generateCRC@i,w,c
  4254  001176  6ED9               	movwf	fsr2l,c
  4255  001178  0101               	movlb	1	; () banked
  4256  00117A  0E01               	movlw	high _response	;volatile
  4257  00117C  2019               	addwfc	generateCRC@i+1,w,c
  4258  00117E  6EDA               	movwf	fsr2h,c
  4259  001180  50DF               	movf	indf2,w,c
  4260  001182  6E11               	movwf	??_generateCRC& (0+255),c
  4261  001184  5011               	movf	??_generateCRC,w,c
  4262  001186  1A1C               	xorwf	generateCRC@crc,f,c
  4263                           
  4264                           ; BSR set to: 1
  4265                           ;modbus.c: 677: for(j=8; j!=0; j--){
  4266  001188  0E00               	movlw	0
  4267  00118A  6E1B               	movwf	generateCRC@j+1,c
  4268  00118C  0E08               	movlw	8
  4269  00118E  6E1A               	movwf	generateCRC@j,c
  4270  001190                     
  4271                           ; BSR set to: 1
  4272  001190  501B               	movf	generateCRC@j+1,w,c
  4273  001192  101A               	iorwf	generateCRC@j,w,c
  4274  001194  B4D8               	btfsc	status,2,c
  4275  001196  D011               	goto	l2651
  4276                           
  4277                           ;modbus.c: 678: if((crc & 0x0001) != 0){
  4278                           
  4279                           ; BSR set to: 1
  4280  001198  A01C               	btfss	generateCRC@crc,0,c
  4281  00119A  D008               	goto	l2647
  4282                           
  4283                           ;modbus.c: 679: crc >>= 1;
  4284  00119C  90D8               	bcf	status,0,c
  4285  00119E  321D               	rrcf	generateCRC@crc+1,f,c
  4286  0011A0  321C               	rrcf	generateCRC@crc,f,c
  4287                           
  4288                           ;modbus.c: 680: crc ^= 0xA001;
  4289  0011A2  0E01               	movlw	1
  4290  0011A4  1A1C               	xorwf	generateCRC@crc,f,c
  4291  0011A6  0EA0               	movlw	160
  4292  0011A8  1A1D               	xorwf	generateCRC@crc+1,f,c
  4293                           
  4294                           ;modbus.c: 681: }
  4295  0011AA  D003               	goto	l313
  4296  0011AC                     l2647:
  4297                           
  4298                           ;modbus.c: 682: else{
  4299                           ;modbus.c: 683: crc >>= 1;
  4300  0011AC  90D8               	bcf	status,0,c
  4301  0011AE  321D               	rrcf	generateCRC@crc+1,f,c
  4302  0011B0  321C               	rrcf	generateCRC@crc,f,c
  4303  0011B2                     l313:
  4304  0011B2  061A               	decf	generateCRC@j,f,c
  4305  0011B4  A0D8               	btfss	status,0,c
  4306  0011B6  061B               	decf	generateCRC@j+1,f,c
  4307  0011B8  D7EB               	goto	L20
  4308  0011BA                     l2651:
  4309  0011BA  4A18               	infsnz	generateCRC@i,f,c
  4310  0011BC  2A19               	incf	generateCRC@i+1,f,c
  4311  0011BE                     l2653:
  4312  0011BE  0EFE               	movlw	254
  4313  0011C0  240F               	addwf	generateCRC@messageLength,w,c
  4314  0011C2  6E11               	movwf	??_generateCRC& (0+255),c
  4315  0011C4  6A12               	clrf	(??_generateCRC+1)& (0+255),c
  4316  0011C6  0EFF               	movlw	255
  4317  0011C8  2212               	addwfc	(??_generateCRC+1)& (0+255),f,c
  4318  0011CA  5019               	movf	generateCRC@i+1,w,c
  4319  0011CC  0A80               	xorlw	128
  4320  0011CE  6E13               	movwf	(??_generateCRC+2)& (0+255),c
  4321  0011D0  5011               	movf	??_generateCRC,w,c
  4322  0011D2  5C18               	subwf	generateCRC@i,w,c
  4323  0011D4  5012               	movf	??_generateCRC+1,w,c
  4324  0011D6  0A80               	xorlw	128
  4325  0011D8  5813               	subwfb	(??_generateCRC+2)& (0+255),w,c
  4326  0011DA  A0D8               	btfss	status,0,c
  4327  0011DC  D7C9               	goto	l2635
  4328                           
  4329                           ;modbus.c: 684: }
  4330                           ;modbus.c: 685: }
  4331                           ;modbus.c: 686: }
  4332                           ;modbus.c: 688: crcHigh = (crc & 0x00FF) <<8;
  4333  0011DE  501C               	movf	generateCRC@crc,w,c
  4334  0011E0  6E12               	movwf	(??_generateCRC+1)& (0+255),c
  4335  0011E2  6A11               	clrf	??_generateCRC& (0+255),c
  4336  0011E4  C011  F016         	movff	??_generateCRC,generateCRC@crcHigh
  4337  0011E8  C012  F017         	movff	??_generateCRC+1,generateCRC@crcHigh+1
  4338                           
  4339                           ;modbus.c: 689: crcLow = (crc & 0xFF00) >>8;
  4340  0011EC  C01D  F011         	movff	generateCRC@crc+1,??_generateCRC
  4341  0011F0  C011  F012         	movff	??_generateCRC,??_generateCRC+1
  4342  0011F4  6A13               	clrf	(??_generateCRC+2)& (0+255),c
  4343  0011F6  5012               	movf	??_generateCRC+1,w,c
  4344  0011F8  6E14               	movwf	generateCRC@crcLow,c
  4345  0011FA  6A15               	clrf	generateCRC@crcLow+1,c
  4346                           
  4347                           ;modbus.c: 690: crcHigh |= crcLow;
  4348  0011FC  5014               	movf	generateCRC@crcLow,w,c
  4349  0011FE  1216               	iorwf	generateCRC@crcHigh,f,c
  4350  001200  5015               	movf	generateCRC@crcLow+1,w,c
  4351  001202  1217               	iorwf	generateCRC@crcHigh+1,f,c
  4352                           
  4353                           ;modbus.c: 691: crc = crcHigh;
  4354  001204  C016  F01C         	movff	generateCRC@crcHigh,generateCRC@crc
  4355  001208  C017  F01D         	movff	generateCRC@crcHigh+1,generateCRC@crc+1
  4356                           
  4357                           ;modbus.c: 692: return crc;
  4358  00120C  C01C  F00F         	movff	generateCRC@crc,?_generateCRC
  4359  001210  C01D  F010         	movff	generateCRC@crc+1,?_generateCRC+1
  4360  001214  0012               	return	
  4361  001216                     __end_of_generateCRC:
  4362                           	opt stack 0
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           prodh	equ	0xFF4
  4368                           prodl	equ	0xFF3
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           indf1	equ	0xFE7
  4372                           postinc1	equ	0xFE6
  4373                           postdec1	equ	0xFE5
  4374                           fsr1h	equ	0xFE2
  4375                           fsr1l	equ	0xFE1
  4376                           indf2	equ	0xFDF
  4377                           postinc2	equ	0xFDE
  4378                           postdec2	equ	0xFDD
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function _clearResponse *****************
  4384 ;; Defined at:
  4385 ;;		line 44 in file "modbus.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  i               1   15[COMRAM] unsigned char 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;		None               void
  4392 ;; Registers used:
  4393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:        2 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    2
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_readReg
  4410 ;;		_readInputReg
  4411 ;;		_writeReg
  4412 ;;		_writeMultipleRegs
  4413 ;;		_readCoil
  4414 ;;		_readInputCoil
  4415 ;;		_writeCoil
  4416 ;;		_writeMultipleCoils
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           	psect	text11
  4421  00137A                     __ptext11:
  4422                           	opt stack 0
  4423  00137A                     _clearResponse:
  4424                           	opt stack 26
  4425                           
  4426                           ;modbus.c: 45: unsigned char i;
  4427                           ;modbus.c: 46: for(i=0;i<125;i++){
  4428                           
  4429                           ;incstack = 0
  4430                           ;incstack = 0
  4431  00137A  6E0F               	movwf	??_clearResponse& (0+255),c
  4432  00137C  0E00               	movlw	0
  4433  00137E  6E10               	movwf	clearResponse@i,c
  4434  001380  500F               	movf	??_clearResponse& (0+255),w,c
  4435  001382  D00D               	goto	L21
  4436  001384                     l1925:
  4437                           
  4438                           ;modbus.c: 47: response[i] = 0;
  4439  001384  5010               	movf	clearResponse@i,w,c
  4440  001386  0D01               	mullw	1
  4441  001388  0101               	movlb	1	; () banked
  4442  00138A  0E00               	movlw	low _response	;volatile
  4443  00138C  24F3               	addwf	prodl,w,c
  4444  00138E  6ED9               	movwf	fsr2l,c
  4445  001390  0101               	movlb	1	; () banked
  4446  001392  0E01               	movlw	high _response	;volatile
  4447  001394  20F4               	addwfc	prodh,w,c
  4448  001396  6EDA               	movwf	fsr2h,c
  4449  001398  0E00               	movlw	0
  4450  00139A  6EDF               	movwf	indf2,c
  4451                           
  4452                           ; BSR set to: 1
  4453  00139C  2A10               	incf	clearResponse@i,f,c
  4454  00139E                     L21:
  4455                           
  4456                           ; BSR set to: 1
  4457  00139E  0E7C               	movlw	124
  4458  0013A0  6410               	cpfsgt	clearResponse@i,c
  4459  0013A2  D7F0               	goto	l1925
  4460                           
  4461                           ; BSR set to: 1
  4462  0013A4  0012               	return	
  4463  0013A6                     __end_of_clearResponse:
  4464                           	opt stack 0
  4465                           tblptru	equ	0xFF8
  4466                           tblptrh	equ	0xFF7
  4467                           tblptrl	equ	0xFF6
  4468                           tablat	equ	0xFF5
  4469                           prodh	equ	0xFF4
  4470                           prodl	equ	0xFF3
  4471                           postinc0	equ	0xFEE
  4472                           wreg	equ	0xFE8
  4473                           indf1	equ	0xFE7
  4474                           postinc1	equ	0xFE6
  4475                           postdec1	equ	0xFE5
  4476                           fsr1h	equ	0xFE2
  4477                           fsr1l	equ	0xFE1
  4478                           indf2	equ	0xFDF
  4479                           postinc2	equ	0xFDE
  4480                           postdec2	equ	0xFDD
  4481                           fsr2h	equ	0xFDA
  4482                           fsr2l	equ	0xFD9
  4483                           status	equ	0xFD8
  4484                           
  4485 ;; *************** function _checkCRC *****************
  4486 ;; Defined at:
  4487 ;;		line 696 in file "modbus.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;  i               2   26[COMRAM] int 
  4492 ;;  crc             2   24[COMRAM] unsigned int 
  4493 ;;  j               2   22[COMRAM] int 
  4494 ;;  crcLow          2   20[COMRAM] unsigned int 
  4495 ;;  crcHigh         2   18[COMRAM] unsigned int 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      unsigned char 
  4498 ;; Registers used:
  4499 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;Total ram usage:       14 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    2
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_decodeIt
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text12
  4520  001044                     __ptext12:
  4521                           	opt stack 0
  4522  001044                     _checkCRC:
  4523                           	opt stack 27
  4524                           
  4525                           ;modbus.c: 697: unsigned int crc = 0xFFFF;
  4526                           
  4527                           ;incstack = 0
  4528                           ;incstack = 0
  4529  001044  6819               	setf	checkCRC@crc,c
  4530  001046  681A               	setf	checkCRC@crc+1,c
  4531                           
  4532                           ;modbus.c: 698: unsigned int crcHigh = 0;
  4533  001048  0E00               	movlw	0
  4534  00104A  6E14               	movwf	checkCRC@crcHigh+1,c
  4535  00104C  0E00               	movlw	0
  4536  00104E  6E13               	movwf	checkCRC@crcHigh,c
  4537                           
  4538                           ;modbus.c: 699: unsigned int crcLow = 0;
  4539  001050  0E00               	movlw	0
  4540  001052  6E16               	movwf	checkCRC@crcLow+1,c
  4541  001054  0E00               	movlw	0
  4542  001056  6E15               	movwf	checkCRC@crcLow,c
  4543                           
  4544                           ;modbus.c: 700: int i,j = 0;
  4545  001058  0E00               	movlw	0
  4546  00105A  6E18               	movwf	checkCRC@j+1,c
  4547  00105C  0E00               	movlw	0
  4548  00105E  6E17               	movwf	checkCRC@j,c
  4549                           
  4550                           ;modbus.c: 702: for(i=0;i<messageLength-2;i++){
  4551  001060  0E00               	movlw	0
  4552  001062  6E1C               	movwf	checkCRC@i+1,c
  4553  001064  0E00               	movlw	0
  4554  001066  6E1B               	movwf	checkCRC@i,c
  4555  001068  D027               	goto	l1953
  4556  00106A                     l1935:
  4557                           
  4558                           ;modbus.c: 703: crc ^= received[i];
  4559  00106A  0100               	movlb	0	; () banked
  4560  00106C  0E60               	movlw	low _received	;volatile
  4561  00106E  241B               	addwf	checkCRC@i,w,c
  4562  001070  6ED9               	movwf	fsr2l,c
  4563  001072  0100               	movlb	0	; () banked
  4564  001074  0E00               	movlw	high _received	;volatile
  4565  001076  201C               	addwfc	checkCRC@i+1,w,c
  4566  001078  6EDA               	movwf	fsr2h,c
  4567  00107A  50DF               	movf	indf2,w,c
  4568  00107C  6E0F               	movwf	??_checkCRC& (0+255),c
  4569  00107E  500F               	movf	??_checkCRC,w,c
  4570  001080  1A19               	xorwf	checkCRC@crc,f,c
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;modbus.c: 704: for(j=8; j!=0; j--){
  4574  001082  0E00               	movlw	0
  4575  001084  6E18               	movwf	checkCRC@j+1,c
  4576  001086  0E08               	movlw	8
  4577  001088  6E17               	movwf	checkCRC@j,c
  4578  00108A                     
  4579                           ; BSR set to: 0
  4580  00108A  5018               	movf	checkCRC@j+1,w,c
  4581  00108C  1017               	iorwf	checkCRC@j,w,c
  4582  00108E  B4D8               	btfsc	status,2,c
  4583  001090  D011               	goto	l1951
  4584                           
  4585                           ;modbus.c: 705: if((crc & 0x0001) != 0){
  4586                           
  4587                           ; BSR set to: 0
  4588  001092  A019               	btfss	checkCRC@crc,0,c
  4589  001094  D008               	goto	l1947
  4590                           
  4591                           ;modbus.c: 706: crc >>= 1;
  4592  001096  90D8               	bcf	status,0,c
  4593  001098  321A               	rrcf	checkCRC@crc+1,f,c
  4594  00109A  3219               	rrcf	checkCRC@crc,f,c
  4595                           
  4596                           ;modbus.c: 707: crc ^= 0xA001;
  4597  00109C  0E01               	movlw	1
  4598  00109E  1A19               	xorwf	checkCRC@crc,f,c
  4599  0010A0  0EA0               	movlw	160
  4600  0010A2  1A1A               	xorwf	checkCRC@crc+1,f,c
  4601                           
  4602                           ;modbus.c: 708: }
  4603  0010A4  D003               	goto	l323
  4604  0010A6                     l1947:
  4605                           
  4606                           ;modbus.c: 709: else{
  4607                           ;modbus.c: 710: crc >>= 1;
  4608  0010A6  90D8               	bcf	status,0,c
  4609  0010A8  321A               	rrcf	checkCRC@crc+1,f,c
  4610  0010AA  3219               	rrcf	checkCRC@crc,f,c
  4611  0010AC                     l323:
  4612  0010AC  0617               	decf	checkCRC@j,f,c
  4613  0010AE  A0D8               	btfss	status,0,c
  4614  0010B0  0618               	decf	checkCRC@j+1,f,c
  4615  0010B2  D7EB               	goto	L22
  4616  0010B4                     l1951:
  4617  0010B4  4A1B               	infsnz	checkCRC@i,f,c
  4618  0010B6  2A1C               	incf	checkCRC@i+1,f,c
  4619  0010B8                     l1953:
  4620  0010B8  0EFE               	movlw	254
  4621  0010BA  243E               	addwf	_messageLength,w,c	;volatile
  4622  0010BC  6E0F               	movwf	??_checkCRC& (0+255),c
  4623  0010BE  6A10               	clrf	(??_checkCRC+1)& (0+255),c
  4624  0010C0  0EFF               	movlw	255
  4625  0010C2  2210               	addwfc	(??_checkCRC+1)& (0+255),f,c
  4626  0010C4  501C               	movf	checkCRC@i+1,w,c
  4627  0010C6  0A80               	xorlw	128
  4628  0010C8  6E11               	movwf	(??_checkCRC+2)& (0+255),c
  4629  0010CA  500F               	movf	??_checkCRC,w,c
  4630  0010CC  5C1B               	subwf	checkCRC@i,w,c
  4631  0010CE  5010               	movf	??_checkCRC+1,w,c
  4632  0010D0  0A80               	xorlw	128
  4633  0010D2  5811               	subwfb	(??_checkCRC+2)& (0+255),w,c
  4634  0010D4  A0D8               	btfss	status,0,c
  4635  0010D6  D7C9               	goto	l1935
  4636                           
  4637                           ;modbus.c: 711: }
  4638                           ;modbus.c: 712: }
  4639                           ;modbus.c: 713: }
  4640                           ;modbus.c: 715: crcHigh = (crc & 0x00FF);
  4641  0010D8  5019               	movf	checkCRC@crc,w,c
  4642  0010DA  6E13               	movwf	checkCRC@crcHigh,c
  4643  0010DC  6A14               	clrf	checkCRC@crcHigh+1,c
  4644                           
  4645                           ;modbus.c: 716: crcLow = (crc & 0xFF00) >>8;
  4646  0010DE  C01A  F00F         	movff	checkCRC@crc+1,??_checkCRC
  4647  0010E2  C00F  F010         	movff	??_checkCRC,??_checkCRC+1
  4648  0010E6  6A11               	clrf	(??_checkCRC+2)& (0+255),c
  4649  0010E8  5010               	movf	??_checkCRC+1,w,c
  4650  0010EA  6E15               	movwf	checkCRC@crcLow,c
  4651  0010EC  6A16               	clrf	checkCRC@crcLow+1,c
  4652                           
  4653                           ;modbus.c: 717: if((crcHigh == received[i])&&(crcLow == received[i+1]))
  4654  0010EE  0100               	movlb	0	; () banked
  4655  0010F0  0E60               	movlw	low _received	;volatile
  4656  0010F2  241B               	addwf	checkCRC@i,w,c
  4657  0010F4  6ED9               	movwf	fsr2l,c
  4658  0010F6  0100               	movlb	0	; () banked
  4659  0010F8  0E00               	movlw	high _received	;volatile
  4660  0010FA  201C               	addwfc	checkCRC@i+1,w,c
  4661  0010FC  6EDA               	movwf	fsr2h,c
  4662  0010FE  50DF               	movf	indf2,w,c
  4663  001100  6E0F               	movwf	??_checkCRC& (0+255),c
  4664  001102  6A10               	clrf	(??_checkCRC+1)& (0+255),c
  4665  001104  5014               	movf	checkCRC@crcHigh+1,w,c
  4666  001106  1810               	xorwf	??_checkCRC+1,w,c
  4667  001108  E102               	bnz	u1115
  4668  00110A  5013               	movf	checkCRC@crcHigh,w,c
  4669  00110C  180F               	xorwf	??_checkCRC,w,c
  4670  00110E                     u1115:
  4671  00110E  A4D8               	btfss	status,2,c
  4672  001110  D01A               	goto	l1967
  4673                           
  4674                           ; BSR set to: 0
  4675  001112  0E01               	movlw	1
  4676  001114  241B               	addwf	checkCRC@i,w,c
  4677  001116  6E0F               	movwf	??_checkCRC& (0+255),c
  4678  001118  0E00               	movlw	0
  4679  00111A  201C               	addwfc	checkCRC@i+1,w,c
  4680  00111C  6E10               	movwf	(??_checkCRC+1)& (0+255),c
  4681  00111E  0100               	movlb	0	; () banked
  4682  001120  0E60               	movlw	low _received	;volatile
  4683  001122  240F               	addwf	??_checkCRC,w,c
  4684  001124  6ED9               	movwf	fsr2l,c
  4685  001126  0100               	movlb	0	; () banked
  4686  001128  0E00               	movlw	high _received	;volatile
  4687  00112A  2010               	addwfc	??_checkCRC+1,w,c
  4688  00112C  6EDA               	movwf	fsr2h,c
  4689  00112E  50DF               	movf	indf2,w,c
  4690  001130  6E11               	movwf	(??_checkCRC+2)& (0+255),c
  4691  001132  6A12               	clrf	(??_checkCRC+3)& (0+255),c
  4692  001134  5016               	movf	checkCRC@crcLow+1,w,c
  4693  001136  1812               	xorwf	??_checkCRC+3,w,c
  4694  001138  E102               	bnz	u1125
  4695  00113A  5015               	movf	checkCRC@crcLow,w,c
  4696  00113C  1811               	xorwf	??_checkCRC+2,w,c
  4697  00113E                     u1125:
  4698  00113E  A4D8               	btfss	status,2,c
  4699  001140  D002               	goto	l1967
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;modbus.c: 718: {
  4703                           ;modbus.c: 719: return 1;
  4704  001142  0E01               	movlw	1
  4705  001144  D001               	goto	l326
  4706  001146                     l1967:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;modbus.c: 721: else{
  4710                           ;modbus.c: 722: return 0;
  4711  001146  0E00               	movlw	0
  4712  001148                     l326:
  4713                           
  4714                           ; BSR set to: 0
  4715  001148  0012               	return	
  4716  00114A                     __end_of_checkCRC:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           postinc0	equ	0xFEE
  4725                           wreg	equ	0xFE8
  4726                           indf1	equ	0xFE7
  4727                           postinc1	equ	0xFE6
  4728                           postdec1	equ	0xFE5
  4729                           fsr1h	equ	0xFE2
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _ConfigInterrupts *****************
  4739 ;; Defined at:
  4740 ;;		line 121 in file "system.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;		None
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;		None               void
  4747 ;; Registers used:
  4748 ;;		None
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;Total ram usage:        0 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    2
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text13
  4769  0013EE                     __ptext13:
  4770                           	opt stack 0
  4771  0013EE                     _ConfigInterrupts:
  4772                           	opt stack 28
  4773                           
  4774                           ;system.c: 122: RCONbits.IPEN = 0;
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;incstack = 0
  4778                           ;incstack = 0
  4779  0013EE  9ED0               	bcf	4048,7,c	;volatile
  4780                           
  4781                           ;system.c: 123: INTCONbits.GIE = 1;
  4782  0013F0  8EF2               	bsf	intcon,7,c	;volatile
  4783                           
  4784                           ;system.c: 124: INTCONbits.PEIE = 1;
  4785  0013F2  8CF2               	bsf	intcon,6,c	;volatile
  4786  0013F4  0012               	return	
  4787  0013F6                     __end_of_ConfigInterrupts:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           indf1	equ	0xFE7
  4799                           postinc1	equ	0xFE6
  4800                           postdec1	equ	0xFE5
  4801                           fsr1h	equ	0xFE2
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _OpnUSART *****************
  4811 ;; Defined at:
  4812 ;;		line 24 in file "system.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  spbrg           4   15[COMRAM] unsigned long 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;		None               void
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;Total ram usage:        5 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    3
  4833 ;; This function calls:
  4834 ;;		_ClsUSART
  4835 ;; This function is called by:
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text14
  4841  0012C8                     __ptext14:
  4842                           	opt stack 0
  4843  0012C8                     _OpnUSART:
  4844                           	opt stack 27
  4845                           
  4846                           ;system.c: 29: unsigned long spbrg = 0;
  4847                           
  4848                           ;incstack = 0
  4849                           ;incstack = 0
  4850  0012C8  0E00               	movlw	0
  4851  0012CA  6E10               	movwf	OpnUSART@spbrg,c
  4852  0012CC  0E00               	movlw	0
  4853  0012CE  6E11               	movwf	OpnUSART@spbrg+1,c
  4854  0012D0  0E00               	movlw	0
  4855  0012D2  6E12               	movwf	OpnUSART@spbrg+2,c
  4856  0012D4  0E00               	movlw	0
  4857  0012D6  6E13               	movwf	OpnUSART@spbrg+3,c
  4858                           
  4859                           ;system.c: 31: spbrg = 10000000L/9600;
  4860  0012D8  0E11               	movlw	17
  4861  0012DA  6E10               	movwf	OpnUSART@spbrg,c
  4862  0012DC  0E04               	movlw	4
  4863  0012DE  6E11               	movwf	OpnUSART@spbrg+1,c
  4864  0012E0  0E00               	movlw	0
  4865  0012E2  6E12               	movwf	OpnUSART@spbrg+2,c
  4866  0012E4  0E00               	movlw	0
  4867  0012E6  6E13               	movwf	OpnUSART@spbrg+3,c
  4868                           
  4869                           ;system.c: 32: spbrg /= 64;
  4870  0012E8  0E06               	movlw	6
  4871  0012EA  6E0F               	movwf	??_OpnUSART& (0+255),c
  4872  0012EC                     u945:
  4873  0012EC  90D8               	bcf	status,0,c
  4874  0012EE  3213               	rrcf	OpnUSART@spbrg+3,f,c
  4875  0012F0  3212               	rrcf	OpnUSART@spbrg+2,f,c
  4876  0012F2  3211               	rrcf	OpnUSART@spbrg+1,f,c
  4877  0012F4  3210               	rrcf	OpnUSART@spbrg,f,c
  4878  0012F6  2E0F               	decfsz	??_OpnUSART& (0+255),f,c
  4879  0012F8  D7F9               	goto	u945
  4880                           
  4881                           ;system.c: 33: spbrg -= 1;
  4882  0012FA  0610               	decf	OpnUSART@spbrg,f,c
  4883  0012FC  0E00               	movlw	0
  4884  0012FE  5A11               	subwfb	OpnUSART@spbrg+1,f,c
  4885  001300  5A12               	subwfb	OpnUSART@spbrg+2,f,c
  4886  001302  5A13               	subwfb	OpnUSART@spbrg+3,f,c
  4887                           
  4888                           ;system.c: 34: ClsUSART();
  4889  001304  ECEC  F009         	call	_ClsUSART	;wreg free
  4890                           
  4891                           ;system.c: 35: TRISCbits.TRISC1 = 0;
  4892  001308  9294               	bcf	3988,1,c	;volatile
  4893                           
  4894                           ;system.c: 36: LATCbits.LATC1 = 0;
  4895  00130A  928B               	bcf	3979,1,c	;volatile
  4896                           
  4897                           ;system.c: 62: TXSTA1 = 0;
  4898  00130C  0E00               	movlw	0
  4899  00130E  6EAC               	movwf	4012,c	;volatile
  4900                           
  4901                           ;system.c: 63: RCSTA1 = 0;
  4902  001310  0E00               	movlw	0
  4903  001312  6EAB               	movwf	4011,c	;volatile
  4904                           
  4905                           ;system.c: 65: TRISCbits.TRISC6 = 0;
  4906  001314  9C94               	bcf	3988,6,c	;volatile
  4907                           
  4908                           ;system.c: 66: TRISCbits.TRISC7 = 1;
  4909  001316  8E94               	bsf	3988,7,c	;volatile
  4910                           
  4911                           ;system.c: 68: TXSTA1bits.SYNC = 0;
  4912  001318  98AC               	bcf	4012,4,c	;volatile
  4913                           
  4914                           ;system.c: 69: TXSTA1bits.TX9 = 0;
  4915  00131A  9CAC               	bcf	4012,6,c	;volatile
  4916                           
  4917                           ;system.c: 70: TXSTA1bits.SENDB = 0;
  4918  00131C  96AC               	bcf	4012,3,c	;volatile
  4919                           
  4920                           ;system.c: 71: TXSTA1bits.BRGH = 0;
  4921  00131E  94AC               	bcf	4012,2,c	;volatile
  4922                           
  4923                           ;system.c: 73: RCSTA1bits.CREN = 1;
  4924  001320  88AB               	bsf	4011,4,c	;volatile
  4925                           
  4926                           ;system.c: 74: RCSTA1bits.RX9 = 0;
  4927  001322  9CAB               	bcf	4011,6,c	;volatile
  4928                           
  4929                           ;system.c: 76: PIE1bits.RCIE = 1;
  4930  001324  8A9D               	bsf	3997,5,c	;volatile
  4931                           
  4932                           ;system.c: 77: PIE1bits.TXIE = 0;
  4933  001326  989D               	bcf	3997,4,c	;volatile
  4934                           
  4935                           ;system.c: 79: BAUDCON1bits.BRG16 = 0;
  4936  001328  967E               	bcf	3966,3,c	;volatile
  4937                           
  4938                           ;system.c: 80: SPBRG = spbrg;
  4939  00132A  C010  FFAF         	movff	OpnUSART@spbrg,4015	;volatile
  4940                           
  4941                           ;system.c: 82: TXSTA1bits.TXEN = 1;
  4942  00132E  8AAC               	bsf	4012,5,c	;volatile
  4943                           
  4944                           ;system.c: 83: RCSTA1bits.SPEN = 1;
  4945  001330  8EAB               	bsf	4011,7,c	;volatile
  4946  001332  0012               	return	
  4947  001334                     __end_of_OpnUSART:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           indf1	equ	0xFE7
  4959                           postinc1	equ	0xFE6
  4960                           postdec1	equ	0xFE5
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _ClsUSART *****************
  4971 ;; Defined at:
  4972 ;;		line 88 in file "system.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;		None               void
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    2
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_OpnUSART
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text15
  5001  0013D8                     __ptext15:
  5002                           	opt stack 0
  5003  0013D8                     _ClsUSART:
  5004                           	opt stack 27
  5005                           
  5006                           ;system.c: 95: RCSTA1 &= 0b01001111;
  5007                           
  5008                           ;incstack = 0
  5009                           ;incstack = 0
  5010  0013D8  0E4F               	movlw	79
  5011  0013DA  16AB               	andwf	4011,f,c	;volatile
  5012                           
  5013                           ;system.c: 96: TXSTA1bits.TXEN = 0;
  5014  0013DC  9AAC               	bcf	4012,5,c	;volatile
  5015                           
  5016                           ;system.c: 97: PIE1 &= 0b11001111;
  5017  0013DE  0ECF               	movlw	207
  5018  0013E0  169D               	andwf	3997,f,c	;volatile
  5019  0013E2  0012               	return	
  5020  0013E4                     __end_of_ClsUSART:
  5021                           	opt stack 0
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           postinc0	equ	0xFEE
  5030                           wreg	equ	0xFE8
  5031                           indf1	equ	0xFE7
  5032                           postinc1	equ	0xFE6
  5033                           postdec1	equ	0xFE5
  5034                           fsr1h	equ	0xFE2
  5035                           fsr1l	equ	0xFE1
  5036                           indf2	equ	0xFDF
  5037                           postinc2	equ	0xFDE
  5038                           postdec2	equ	0xFDD
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _isr *****************
  5044 ;; Defined at:
  5045 ;;		line 28 in file "interrupts.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;		None               void
  5052 ;; Registers used:
  5053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;Total ram usage:       14 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    1
  5066 ;; This function calls:
  5067 ;;		_OpenTmr0
  5068 ;;		_modbusDelay
  5069 ;; This function is called by:
  5070 ;;		Interrupt level 2
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           	psect	intcode
  5075  000008                     __pintcode:
  5076                           	opt stack 0
  5077  000008                     _isr:
  5078                           	opt stack 26
  5079                           
  5080                           ;incstack = 0
  5081  000008  CFFA F001          	movff	pclath,??_isr
  5082  00000C  CFFB F002          	movff	pclatu,??_isr+1
  5083  000010  ED41  F006         	call	int_func,f	;refresh shadow registers
  5084                           pclatu	equ	0xFFB
  5085                           pclath	equ	0xFFA
  5086                           tblptru	equ	0xFF8
  5087                           tblptrh	equ	0xFF7
  5088                           tblptrl	equ	0xFF6
  5089                           tablat	equ	0xFF5
  5090                           prodh	equ	0xFF4
  5091                           prodl	equ	0xFF3
  5092                           intcon	equ	0xFF2
  5093                           postinc0	equ	0xFEE
  5094                           wreg	equ	0xFE8
  5095                           indf1	equ	0xFE7
  5096                           postinc1	equ	0xFE6
  5097                           postdec1	equ	0xFE5
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107                           	psect	intcode_body
  5108  000C82                     __pintcode_body:
  5109                           	opt stack 26
  5110  000C82                     int_func:
  5111                           	opt stack 26
  5112  000C82  0006               	pop		; remove dummy address from shadow register refresh
  5113  000C84  CFE9 F003          	movff	fsr0l,??_isr+2
  5114  000C88  CFEA F004          	movff	fsr0h,??_isr+3
  5115  000C8C  CFE1 F005          	movff	fsr1l,??_isr+4
  5116  000C90  CFE2 F006          	movff	fsr1h,??_isr+5
  5117  000C94  CFD9 F007          	movff	fsr2l,??_isr+6
  5118  000C98  CFDA F008          	movff	fsr2h,??_isr+7
  5119  000C9C  CFF3 F009          	movff	prodl,??_isr+8
  5120  000CA0  CFF4 F00A          	movff	prodh,??_isr+9
  5121  000CA4  CFF6 F00B          	movff	tblptrl,??_isr+10
  5122  000CA8  CFF7 F00C          	movff	tblptrh,??_isr+11
  5123  000CAC  CFF8 F00D          	movff	tblptru,??_isr+12
  5124  000CB0  CFF5 F00E          	movff	tablat,??_isr+13
  5125  000CB4                     
  5126                           ;interrupts.c: 29: if(PIR1bits.RCIF){
  5127  000CB4  AA9E               	btfss	3998,5,c	;volatile
  5128  000CB6  D001               	goto	i2u84_41
  5129  000CB8  D001               	goto	i2u84_40
  5130  000CBA                     i2u84_41:
  5131  000CBA  D043               	goto	i2l31
  5132  000CBC                     i2u84_40:
  5133  000CBC                     
  5134                           ;interrupts.c: 30: if((!endOfMessage)&&(!newMessage)){
  5135  000CBC  663D               	tstfsz	_endOfMessage,c	;volatile
  5136  000CBE  D001               	goto	i2u85_41
  5137  000CC0  D001               	goto	i2u85_40
  5138  000CC2                     i2u85_41:
  5139  000CC2  D019               	goto	i2l1773
  5140  000CC4                     i2u85_40:
  5141  000CC4  6642               	tstfsz	_newMessage,c	;volatile
  5142  000CC6  D001               	goto	i2u86_41
  5143  000CC8  D001               	goto	i2u86_40
  5144  000CCA                     i2u86_41:
  5145  000CCA  D015               	goto	i2l1773
  5146  000CCC                     i2u86_40:
  5147  000CCC                     
  5148                           ;interrupts.c: 31: if(PIR1bits.TXIF){
  5149  000CCC  A89E               	btfss	3998,4,c	;volatile
  5150  000CCE  D001               	goto	i2u87_41
  5151  000CD0  D001               	goto	i2u87_40
  5152  000CD2                     i2u87_41:
  5153  000CD2  D011               	goto	i2l1773
  5154  000CD4                     i2u87_40:
  5155  000CD4                     
  5156                           ;interrupts.c: 32: received[z] = RCREG1;
  5157  000CD4  5041               	movf	_z,w,c	;volatile
  5158  000CD6  0D01               	mullw	1
  5159  000CD8  0100               	movlb	0	; () banked
  5160  000CDA  0E60               	movlw	low _received	;volatile
  5161  000CDC  24F3               	addwf	prodl,w,c
  5162  000CDE  6ED9               	movwf	fsr2l,c
  5163  000CE0  0100               	movlb	0	; () banked
  5164  000CE2  0E00               	movlw	high _received	;volatile
  5165  000CE4  20F4               	addwfc	prodh,w,c
  5166  000CE6  6EDA               	movwf	fsr2h,c
  5167  000CE8  CFAE FFDF          	movff	4014,indf2	;volatile
  5168  000CEC                     
  5169                           ; BSR set to: 0
  5170                           ;interrupts.c: 33: z++;
  5171  000CEC  2A41               	incf	_z,f,c	;volatile
  5172  000CEE                     
  5173                           ; BSR set to: 0
  5174                           ;interrupts.c: 34: timerCount = 0;
  5175  000CEE  0E00               	movlw	0
  5176  000CF0  6E40               	movwf	_timerCount,c	;volatile
  5177  000CF2  D001               	goto	i2l1773
  5178  000CF4                     
  5179                           ; BSR set to: 0
  5180  000CF4  D000               	goto	i2l1773
  5181  000CF6                     i2l1773:
  5182                           
  5183                           ;interrupts.c: 35: }
  5184                           ;interrupts.c: 36: }
  5185                           ;interrupts.c: 37: if(newMessage){
  5186  000CF6  5042               	movf	_newMessage,w,c	;volatile
  5187  000CF8  B4D8               	btfsc	status,2,c
  5188  000CFA  D001               	goto	i2u88_41
  5189  000CFC  D001               	goto	i2u88_40
  5190  000CFE                     i2u88_41:
  5191  000CFE  D056               	goto	i2l36
  5192  000D00                     i2u88_40:
  5193  000D00                     
  5194                           ;interrupts.c: 38: OpenTmr0();
  5195  000D00  ECE0  F009         	call	_OpenTmr0	;wreg free
  5196  000D04                     
  5197                           ;interrupts.c: 39: if(PIR1bits.TXIF){
  5198  000D04  A89E               	btfss	3998,4,c	;volatile
  5199  000D06  D001               	goto	i2u89_41
  5200  000D08  D001               	goto	i2u89_40
  5201  000D0A                     i2u89_41:
  5202  000D0A  D050               	goto	i2l36
  5203  000D0C                     i2u89_40:
  5204  000D0C                     
  5205                           ;interrupts.c: 40: received[z] = RCREG1;
  5206  000D0C  5041               	movf	_z,w,c	;volatile
  5207  000D0E  0D01               	mullw	1
  5208  000D10  0100               	movlb	0	; () banked
  5209  000D12  0E60               	movlw	low _received	;volatile
  5210  000D14  24F3               	addwf	prodl,w,c
  5211  000D16  6ED9               	movwf	fsr2l,c
  5212  000D18  0100               	movlb	0	; () banked
  5213  000D1A  0E00               	movlw	high _received	;volatile
  5214  000D1C  20F4               	addwfc	prodh,w,c
  5215  000D1E  6EDA               	movwf	fsr2h,c
  5216  000D20  CFAE FFDF          	movff	4014,indf2	;volatile
  5217  000D24                     
  5218                           ; BSR set to: 0
  5219                           ;interrupts.c: 41: z++;
  5220  000D24  2A41               	incf	_z,f,c	;volatile
  5221  000D26                     
  5222                           ; BSR set to: 0
  5223                           ;interrupts.c: 42: newMessage = 0;
  5224  000D26  0E00               	movlw	0
  5225  000D28  6E42               	movwf	_newMessage,c	;volatile
  5226  000D2A                     
  5227                           ; BSR set to: 0
  5228                           ;interrupts.c: 43: endOfMessage = 0;
  5229  000D2A  0E00               	movlw	0
  5230  000D2C  6E3D               	movwf	_endOfMessage,c	;volatile
  5231  000D2E                     
  5232                           ; BSR set to: 0
  5233                           ;interrupts.c: 44: messageLength = 0;
  5234  000D2E  0E00               	movlw	0
  5235  000D30  6E3E               	movwf	_messageLength,c	;volatile
  5236  000D32                     
  5237                           ; BSR set to: 0
  5238                           ;interrupts.c: 45: modbusMessage = 0;
  5239  000D32  0E00               	movlw	0
  5240  000D34  6E3F               	movwf	_modbusMessage,c	;volatile
  5241  000D36                     
  5242                           ; BSR set to: 0
  5243                           ;interrupts.c: 46: timerCount = 0;
  5244  000D36  0E00               	movlw	0
  5245  000D38  6E40               	movwf	_timerCount,c	;volatile
  5246  000D3A  D038               	goto	i2l36
  5247  000D3C                     
  5248                           ; BSR set to: 0
  5249                           ;interrupts.c: 47: return;
  5250  000D3C  D037               	goto	i2l36
  5251  000D3E                     
  5252                           ; BSR set to: 0
  5253  000D3E  D036               	goto	i2l36
  5254  000D40                     
  5255                           ; BSR set to: 0
  5256                           ;interrupts.c: 48: }
  5257                           ;interrupts.c: 49: }
  5258                           ;interrupts.c: 50: }
  5259  000D40  D035               	goto	i2l36
  5260  000D42                     i2l31:
  5261                           
  5262                           ;interrupts.c: 51: else if(INTCONbits.TMR0IF){
  5263  000D42  A4F2               	btfss	intcon,2,c	;volatile
  5264  000D44  D001               	goto	i2u90_41
  5265  000D46  D001               	goto	i2u90_40
  5266  000D48                     i2u90_41:
  5267  000D48  D031               	goto	i2l36
  5268  000D4A                     i2u90_40:
  5269  000D4A                     
  5270                           ;interrupts.c: 52: modbusDelay();
  5271  000D4A  ECF2  F009         	call	_modbusDelay	;wreg free
  5272  000D4E                     
  5273                           ;interrupts.c: 53: timerCount++;
  5274  000D4E  2A40               	incf	_timerCount,f,c	;volatile
  5275  000D50                     
  5276                           ;interrupts.c: 54: if(timerCount > 4){
  5277  000D50  0E04               	movlw	4
  5278  000D52  6440               	cpfsgt	_timerCount,c	;volatile
  5279  000D54  D001               	goto	i2u91_41
  5280  000D56  D001               	goto	i2u91_40
  5281  000D58                     i2u91_41:
  5282  000D58  D026               	goto	i2l1817
  5283  000D5A                     i2u91_40:
  5284  000D5A                     
  5285                           ;interrupts.c: 55: endOfMessage = 1;
  5286  000D5A  0E01               	movlw	1
  5287  000D5C  6E3D               	movwf	_endOfMessage,c	;volatile
  5288                           
  5289                           ;interrupts.c: 56: newMessage = 1;
  5290  000D5E  0E01               	movlw	1
  5291  000D60  6E42               	movwf	_newMessage,c	;volatile
  5292  000D62                     
  5293                           ;interrupts.c: 57: messageLength = z;
  5294  000D62  C041  F03E         	movff	_z,_messageLength	;volatile
  5295                           
  5296                           ;interrupts.c: 58: modbusMessage = 1;
  5297  000D66  0E01               	movlw	1
  5298  000D68  6E3F               	movwf	_modbusMessage,c	;volatile
  5299  000D6A                     
  5300                           ;interrupts.c: 59: for(z=(messageLength);z!=125;z++){
  5301  000D6A  C03E  F041         	movff	_messageLength,_z	;volatile
  5302  000D6E  D00E               	goto	i2l1811
  5303  000D70                     i2l1807:
  5304                           
  5305                           ;interrupts.c: 60: received[z] = 0;
  5306  000D70  5041               	movf	_z,w,c	;volatile
  5307  000D72  0D01               	mullw	1
  5308  000D74  0100               	movlb	0	; () banked
  5309  000D76  0E60               	movlw	low _received	;volatile
  5310  000D78  24F3               	addwf	prodl,w,c
  5311  000D7A  6ED9               	movwf	fsr2l,c
  5312  000D7C  0100               	movlb	0	; () banked
  5313  000D7E  0E00               	movlw	high _received	;volatile
  5314  000D80  20F4               	addwfc	prodh,w,c
  5315  000D82  6EDA               	movwf	fsr2h,c
  5316  000D84  0E00               	movlw	0
  5317  000D86  6EDF               	movwf	indf2,c
  5318  000D88                     
  5319                           ; BSR set to: 0
  5320  000D88  2A41               	incf	_z,f,c	;volatile
  5321  000D8A  D000               	goto	i2l1811
  5322  000D8C                     i2l1811:
  5323  000D8C  5041               	movf	_z,w,c	;volatile
  5324  000D8E  0A7D               	xorlw	125
  5325  000D90  A4D8               	btfss	status,2,c
  5326  000D92  D001               	goto	i2u92_41
  5327  000D94  D001               	goto	i2u92_40
  5328  000D96                     i2u92_41:
  5329  000D96  D7EC               	goto	i2l1807
  5330  000D98                     i2u92_40:
  5331  000D98  D000               	goto	i2l1813
  5332  000D9A                     i2l1813:
  5333                           
  5334                           ;interrupts.c: 61: }
  5335                           ;interrupts.c: 62: z=0;
  5336  000D9A  0E00               	movlw	0
  5337  000D9C  6E41               	movwf	_z,c	;volatile
  5338  000D9E                     
  5339                           ;interrupts.c: 63: T0CONbits.TMR0ON = 0;
  5340  000D9E  9ED5               	bcf	4053,7,c	;volatile
  5341                           
  5342                           ;interrupts.c: 64: timerCount = 0;
  5343  000DA0  0E00               	movlw	0
  5344  000DA2  6E40               	movwf	_timerCount,c	;volatile
  5345  000DA4  D000               	goto	i2l1817
  5346  000DA6                     i2l1817:
  5347                           
  5348                           ;interrupts.c: 65: }
  5349                           ;interrupts.c: 66: INTCONbits.TMR0IF = 0;
  5350  000DA6  94F2               	bcf	intcon,2,c	;volatile
  5351  000DA8  D001               	goto	i2l36
  5352  000DAA  D000               	goto	i2l36
  5353  000DAC                     i2l36:
  5354  000DAC  C00E  FFF5         	movff	??_isr+13,tablat
  5355  000DB0  C00D  FFF8         	movff	??_isr+12,tblptru
  5356  000DB4  C00C  FFF7         	movff	??_isr+11,tblptrh
  5357  000DB8  C00B  FFF6         	movff	??_isr+10,tblptrl
  5358  000DBC  C00A  FFF4         	movff	??_isr+9,prodh
  5359  000DC0  C009  FFF3         	movff	??_isr+8,prodl
  5360  000DC4  C008  FFDA         	movff	??_isr+7,fsr2h
  5361  000DC8  C007  FFD9         	movff	??_isr+6,fsr2l
  5362  000DCC  C006  FFE2         	movff	??_isr+5,fsr1h
  5363  000DD0  C005  FFE1         	movff	??_isr+4,fsr1l
  5364  000DD4  C004  FFEA         	movff	??_isr+3,fsr0h
  5365  000DD8  C003  FFE9         	movff	??_isr+2,fsr0l
  5366  000DDC  C002  FFFB         	movff	??_isr+1,pclatu
  5367  000DE0  C001  FFFA         	movff	??_isr,pclath
  5368  000DE4  0011               	retfie		f
  5369  000DE6                     __end_of_isr:
  5370                           	opt stack 0
  5371                           pclatu	equ	0xFFB
  5372                           pclath	equ	0xFFA
  5373                           tblptru	equ	0xFF8
  5374                           tblptrh	equ	0xFF7
  5375                           tblptrl	equ	0xFF6
  5376                           tablat	equ	0xFF5
  5377                           prodh	equ	0xFF4
  5378                           prodl	equ	0xFF3
  5379                           intcon	equ	0xFF2
  5380                           postinc0	equ	0xFEE
  5381                           fsr0h	equ	0xFEA
  5382                           fsr0l	equ	0xFE9
  5383                           wreg	equ	0xFE8
  5384                           indf1	equ	0xFE7
  5385                           postinc1	equ	0xFE6
  5386                           postdec1	equ	0xFE5
  5387                           fsr1h	equ	0xFE2
  5388                           fsr1l	equ	0xFE1
  5389                           indf2	equ	0xFDF
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _modbusDelay *****************
  5397 ;; Defined at:
  5398 ;;		line 37 in file "modbus.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;		None               void
  5405 ;; Registers used:
  5406 ;;		wreg, status,2
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;Total ram usage:        0 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; This function calls:
  5419 ;;		Nothing
  5420 ;; This function is called by:
  5421 ;;		_isr
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text17
  5426  0013E4                     __ptext17:
  5427                           	opt stack 0
  5428  0013E4                     _modbusDelay:
  5429                           	opt stack 26
  5430                           
  5431                           ;modbus.c: 39: TMR0H = 0xF5;
  5432                           
  5433                           ;incstack = 0
  5434                           ;incstack = 0
  5435  0013E4  0EF5               	movlw	245
  5436  0013E6  6ED7               	movwf	4055,c	;volatile
  5437                           
  5438                           ;modbus.c: 40: TMR0L = 0xD7;
  5439  0013E8  0ED7               	movlw	215
  5440  0013EA  6ED6               	movwf	4054,c	;volatile
  5441  0013EC  0012               	return	
  5442  0013EE                     __end_of_modbusDelay:
  5443                           	opt stack 0
  5444                           pclatu	equ	0xFFB
  5445                           pclath	equ	0xFFA
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           postinc0	equ	0xFEE
  5454                           fsr0h	equ	0xFEA
  5455                           fsr0l	equ	0xFE9
  5456                           wreg	equ	0xFE8
  5457                           indf1	equ	0xFE7
  5458                           postinc1	equ	0xFE6
  5459                           postdec1	equ	0xFE5
  5460                           fsr1h	equ	0xFE2
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           postdec2	equ	0xFDD
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function _OpenTmr0 *****************
  5470 ;; Defined at:
  5471 ;;		line 102 in file "system.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;		None               void
  5478 ;; Registers used:
  5479 ;;		wreg, status,2
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;Total ram usage:        0 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_isr
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text18
  5499  0013C0                     __ptext18:
  5500                           	opt stack 0
  5501  0013C0                     _OpenTmr0:
  5502                           	opt stack 26
  5503                           
  5504                           ;system.c: 103: T0CONbits.TMR0ON = 0;
  5505                           
  5506                           ;incstack = 0
  5507                           ;incstack = 0
  5508  0013C0  9ED5               	bcf	4053,7,c	;volatile
  5509                           
  5510                           ;system.c: 104: T0CONbits.T08BIT = 0;
  5511  0013C2  9CD5               	bcf	4053,6,c	;volatile
  5512                           
  5513                           ;system.c: 105: T0CONbits.T0CS = 0;
  5514  0013C4  9AD5               	bcf	4053,5,c	;volatile
  5515                           
  5516                           ;system.c: 106: T0CONbits.PSA = 1;
  5517  0013C6  86D5               	bsf	4053,3,c	;volatile
  5518                           
  5519                           ;system.c: 108: TMR0H = 0xF5;
  5520  0013C8  0EF5               	movlw	245
  5521  0013CA  6ED7               	movwf	4055,c	;volatile
  5522                           
  5523                           ;system.c: 109: TMR0L = 0xD7;
  5524  0013CC  0ED7               	movlw	215
  5525  0013CE  6ED6               	movwf	4054,c	;volatile
  5526                           
  5527                           ;system.c: 111: T0CONbits.TMR0ON = 1;
  5528  0013D0  8ED5               	bsf	4053,7,c	;volatile
  5529                           
  5530                           ;system.c: 113: INTCONbits.TMR0IF = 0;
  5531  0013D2  94F2               	bcf	intcon,2,c	;volatile
  5532                           
  5533                           ;system.c: 114: INTCONbits.TMR0IE = 1;
  5534  0013D4  8AF2               	bsf	intcon,5,c	;volatile
  5535  0013D6  0012               	return	
  5536  0013D8                     __end_of_OpenTmr0:
  5537                           	opt stack 0
  5538  0000                     pclatu	equ	0xFFB
  5539                           pclath	equ	0xFFA
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           postinc0	equ	0xFEE
  5548                           fsr0h	equ	0xFEA
  5549                           fsr0l	equ	0xFE9
  5550                           wreg	equ	0xFE8
  5551                           indf1	equ	0xFE7
  5552                           postinc1	equ	0xFE6
  5553                           postdec1	equ	0xFE5
  5554                           fsr1h	equ	0xFE2
  5555                           fsr1l	equ	0xFE1
  5556                           indf2	equ	0xFDF
  5557                           postinc2	equ	0xFDE
  5558                           postdec2	equ	0xFDD
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           pclatu	equ	0xFFB
  5563                           pclath	equ	0xFFA
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodh	equ	0xFF4
  5569                           prodl	equ	0xFF3
  5570                           intcon	equ	0xFF2
  5571                           postinc0	equ	0xFEE
  5572                           fsr0h	equ	0xFEA
  5573                           fsr0l	equ	0xFE9
  5574                           wreg	equ	0xFE8
  5575                           indf1	equ	0xFE7
  5576                           postinc1	equ	0xFE6
  5577                           postdec1	equ	0xFE5
  5578                           fsr1h	equ	0xFE2
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587                           	psect	rparam
  5588  0000                     pclatu	equ	0xFFB
  5589                           pclath	equ	0xFFA
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           postinc0	equ	0xFEE
  5598                           fsr0h	equ	0xFEA
  5599                           fsr0l	equ	0xFE9
  5600                           wreg	equ	0xFE8
  5601                           indf1	equ	0xFE7
  5602                           postinc1	equ	0xFE6
  5603                           postdec1	equ	0xFE5
  5604                           fsr1h	equ	0xFE2
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         405
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     60      66
    BANK0           160      0     125
    BANK1           256      0     175
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    ?_generateCRC	unsigned int  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _decodeIt->_writeMultipleRegs
    _writeMultipleCoils->_generateCRC
    _writeMultipleRegs->_generateCRC
    _writeReg->_generateCRC
    _writeCoil->_generateCRC
    _readInputReg->_generateCRC
    _readReg->_generateCRC
    _readInputCoil->_generateCRC
    _readCoil->_generateCRC

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6868
                           _OpnUSART
                   _ConfigInterrupts
                           _decodeIt
 ---------------------------------------------------------------------------------
 (1) _decodeIt                                             0     0      0    6842
                           _checkCRC
                           _readCoil
                      _readInputCoil
                            _readReg
                       _readInputReg
                          _writeCoil
                           _writeReg
                  _writeMultipleRegs
                 _writeMultipleCoils
 ---------------------------------------------------------------------------------
 (2) _writeMultipleCoils                                  28    28      0    1028
                                             29 COMRAM    27    27      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeMultipleRegs                                   31    31      0     738
                                             29 COMRAM    31    31      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeReg                                            18    18      0     589
                                             29 COMRAM    18    18      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeCoil                                           17    17      0     611
                                             29 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputReg                                        13    13      0     811
                                             29 COMRAM    13    13      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readReg                                             13    13      0     811
                                             29 COMRAM    13    13      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputCoil                                       15    15      0     999
                                             29 COMRAM    15    15      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readCoil                                            15    15      0     999
                                             29 COMRAM    15    15      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (3) _generateCRC                                         15    13      2     258
                                             14 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (3) _clearResponse                                        2     2      0      68
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _checkCRC                                            14    14      0     256
                                             14 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpnUSART                                             5     5      0      26
                                             14 COMRAM     5     5      0
                           _ClsUSART
 ---------------------------------------------------------------------------------
 (2) _ClsUSART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
                           _OpenTmr0
                        _modbusDelay
 ---------------------------------------------------------------------------------
 (5) _modbusDelay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _OpenTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpnUSART
     _ClsUSART
   _ConfigInterrupts
   _decodeIt
     _checkCRC
     _readCoil
       _clearResponse
       _generateCRC
     _readInputCoil
       _clearResponse
       _generateCRC
     _readReg
       _clearResponse
       _generateCRC
     _readInputReg
       _clearResponse
       _generateCRC
     _writeCoil
       _clearResponse
       _generateCRC
     _writeReg
       _clearResponse
       _generateCRC
     _writeMultipleRegs
       _clearResponse
       _generateCRC
     _writeMultipleCoils
       _clearResponse
       _generateCRC

 _isr (ROOT)
   _OpenTmr0
   _modbusDelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      AF       7       68.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      7D       5       78.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3C      42       1       69.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       7       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D2      32        0.0%
DATA                 0      0     1D9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Jan 06 11:16:21 2014

                                 _z 0041    writeMultipleCoils@wmc_AddressLow 0026  
                      generateCRC@i 0018                        generateCRC@j 001A  
                writeReg@wr_Address 0028                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                       __CFG_OSC$HS 000000                        __CFG_CP4$OFF 000000  
                      __CFG_CP5$OFF 000000                        __CFG_CP6$OFF 000000  
                      __CFG_CP7$OFF 000000   writeMultipleCoils@wmc_AddressHigh 0024  
                               l204 0A5A                                 l212 103C  
                               l213 101E                                 l301 026E  
                               l302 024E                                 l223 08A2  
                               l224 0884                                 l313 11B2  
                               l162 12C2                                 l323 10AC  
                               l326 1148                                 l246 068C  
                               l190 0C42                                 l280 0EF6  
                               l269 0462                                 l279 0F14  
                      __CFG_CPB$OFF 000000                        __CFG_CPD$OFF 000000  
                               u945 12EC                                 _isr 0008  
                               prod 000FF3                                 wreg 000FE8  
                        _TXSTA1bits 000FAC                        __CFG_MODE$MC 000000  
                      __CFG_LVP$OFF 000000                        __CFG_WDT$OFF 000000  
                              l2021 058A                                l2033 05C4  
                              l2009 0554                                l2121 0360  
                              l2035 05CE                                l2133 039A  
                              l2109 032A                                l2039 05EE  
                              l2047 0626                                l2135 03A4  
                              l2207 0B80                                l2049 062C  
                              l2217 0BD2                                l2067 06AA  
                              l2139 03C4                                l2147 03FC  
                              l2149 0402                                l2237 0C5E  
                              l2309 0A76                                l2167 0480  
                              l2271 092A                                l2335 0E8E  
                              l2603 0210                                l2461 07AA  
                              l2605 0216                                l1901 1284  
                              l2199 0B12                                l2279 0998  
                              l2289 09EA                                l1913 12BA  
                              l1905 1296                                l1825 13B2  
                              l2651 11BA                                l2635 1170  
                              l2475 0824                                l1925 1384  
                              l2653 11BE                                l1909 12A8  
                              l1951 10B4                                l1935 106A  
                              l2647 11AC                                l2583 0196  
                              l2591 01B4                                l2567 0130  
                              l1953 10B8                                l2593 01BE  
                              l1947 10A6                                l2597 01F4  
                              l1893 1260                                l1885 123C  
                              l1967 1146                                l1897 1272  
                              l1889 124E                                ?_isr 0001  
                              u1115 110E                                u1125 113E  
                              u1214 0606                                u1215 0602  
                              u1314 0378                                u1315 0374  
                              u1184 05A2                                u1344 03DC  
                              u1185 059E                                u1345 03D8  
                              u1425 0C6E                                _LATF 000F8E  
                              u1624 0170                                u1465 0A86  
                              u1625 016C                                u1654 01CE  
                              u1655 01CA                                _PIE1 000F9D  
                              i2l31 0D42                                i2l40 0D8C  
                              i2l32 0CF6                                i2l41 0D70  
                              i2l33 0CF4                                i2l42 0D9A  
                              i2l34 0D40                                i2l35 0D3E  
                              i2l36 0DAC                                i2l37 0DAC  
                              i2l38 0DAA                                i2l39 0DA6  
       writeMultipleCoils@remainder 0033                      generateCRC@crc 001C  
                              _main 13A6                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr0l 000FE9  
                              fsr2h 000FDA                                indf1 000FE7  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                pclat 000FFA  
                              prodh 000FF4                                prodl 000FF3  
                              start 0014                       __CFG_IESO$OFF 000000  
                     __CFG_MCLRE$ON 000000                               ??_isr 0001  
                      _BAUDCON1bits 000F7E                       __CFG_WAIT$OFF 000000  
                             ?_main 0001                      clearResponse@i 0010  
         writeReg@wr_valToWriteHigh 0026                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISF 000F97                       __CFG_PWRT$OFF 000000  
               writeCoil@wc_Address 002B                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                       __CFG_WRT4$OFF 000000  
                     __CFG_WRT5$OFF 000000                       __CFG_WRT6$OFF 000000  
                     __CFG_WRT7$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
      writeMultipleCoils@valToWrite 0032                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                      __CFG_EBTR4$OFF 000000  
                    __CFG_EBTR5$OFF 000000                      __CFG_EBTR6$OFF 000000  
                    __CFG_EBTR7$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
                    __CFG_EBTRB$OFF 000000                               _coils 017D  
                   __end_of_readReg 0C82               writeReg@wr_AddressLow 0020  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8                    __end_of_ClsUSART 13E4  
                      ?_modbusDelay 0001                      checkCRC@crcLow 0015  
        __size_of_writeMultipleRegs 01E8           writeCoil@wc_valToWriteLow 0023  
                   __initialization 1334     writeMultipleRegs@wmr_AddressLow 002A  
                      __end_of_main 13C0               writeMultipleCoils@crc 0030  
             writeMultipleCoils@lsb 0022                    __end_of_OpnUSART 1334  
   writeMultipleRegs@valToWriteHigh 0022                              ??_main 003D  
                  __end_of_OpenTmr0 13D8                       __activetblptr 000000  
                     ?_readInputReg 0001               __end_of_clearResponse 13A6  
          __end_of_ConfigInterrupts 13F6              __size_of_readInputCoil 022A  
                       readCoil@crc 0022                         readCoil@lsb 0029  
                   __CFG_BBSIZ$BB2K 000000                              i2l1801 0D5A  
                            i2l1811 0D8C                              i2l1803 0D62  
                            i2l1813 0D9A                              i2l1805 0D6A  
                            i2l1815 0D9E                              i2l1807 0D70  
                            i2l1809 0D88                              i2l1817 0DA6  
                            i2l1761 0CBC                              i2l1771 0CEE  
                            i2l1763 0CC4                              i2l1781 0D24  
                            i2l1765 0CCC                              i2l1773 0CF6  
                            i2l1791 0D36                              i2l1783 0D26  
                            i2l1775 0D00                              i2l1767 0CD4  
                            i2l1759 0CB4                              i2l1793 0D3C  
                            i2l1785 0D2A                              i2l1777 0D04  
                            i2l1769 0CEC                              i2l1795 0D4A  
                            i2l1787 0D2E                              i2l1779 0D0C  
                            i2l1797 0D4E                              i2l1789 0D32  
                            i2l1799 0D50                              _RCREG1 000FAE  
                            _RCSTA1 000FAB                    __end_of_checkCRC 114A  
                  __end_of_decodeIt 12C8                              _TXREG1 000FAD  
                            _TXSTA1 000FAC              writeCoil@wc_valToWrite 0027  
              __size_of_generateCRC 00CC                      __CFG_XINST$OFF 000000  
                    __CFG_STVREN$ON 000000                    __end_of_readCoil 06CA  
    writeMultipleCoils@wmc_numCoils 0034      writeMultipleCoils@wmc_numBytes 0020  
                            clear_0 133A                              clear_1 1346  
                            clear_2 1352              writeReg@wr_AddressHigh 0022  
                   readInputReg@crc 0022                           ??_readReg 001E  
                      __pdataCOMRAM 0042                      ??_readInputReg 001E  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                    __end_of_writeReg 1044  
                        __accesstop 0060             __end_of__initialization 1374  
          writeReg@wr_valToWriteLow 0024       writeMultipleCoils@wmc_Address 002D  
       __size_of_writeMultipleCoils 025E                     checkCRC@crcHigh 0013  
                     _readInputCoil 0276                      __pcstackCOMRAM 0001  
                         ?_ClsUSART 0001                        _endOfMessage 003D  
         readInputCoil@howManyBytes 0027                          __pbssBANK0 0060  
                        __pbssBANK1 0100                          __pbssBANK2 0200  
                         ?_OpnUSART 0001                           ?_OpenTmr0 0001  
                    ?_readInputCoil 0001                __size_of_modbusDelay 000A  
                         ?_checkCRC 0001                           ?_decodeIt 0001  
                        ??_ClsUSART 000F                             i2u90_40 0D4A  
                           i2u90_41 0D48                             i2u91_40 0D5A  
                           i2u91_41 0D58                             i2u92_40 0D98  
                           i2u84_40 0CBC                             i2u92_41 0D96  
                           i2u84_41 0CBA                             i2u85_40 0CC4  
                           i2u85_41 0CC2                             i2u86_40 0CCC  
                           i2u86_41 0CCA                             i2u87_40 0CD4  
                           i2u87_41 0CD2                             i2u88_40 0D00  
                           i2u88_41 0CFE                             i2u89_40 0D0C  
                           i2u89_41 0D0A         writeMultipleRegs@valToWrite 0036  
                         ?_readCoil 0001                          ??_OpnUSART 000F  
                __size_of_writeCoil 0136                   readReg@rr_Address 0024  
                        ??_OpenTmr0 0001                             __Hparam 0000  
                writeMultipleRegs@i 003B                  writeMultipleRegs@j 003A  
                           __Lparam 0000                __end_of_readInputReg 0A9A  
                        _holdingReg 0200                   generateCRC@crcLow 0014  
                        _newMessage 0042                             __pcinit 1334  
                     _messageLength 003E                             __ramtop 1000  
                           __ptext0 13A6                             __ptext1 1216  
                           __ptext2 0018                             __ptext3 06CA  
                           __ptext4 0F1C                             __ptext5 0DE6  
                           __ptext6 08B2                             __ptext7 0A9A  
                           __ptext8 0276                             __ptext9 04A0  
                         ?_writeReg 0001                           _T0CONbits 000FD5  
                        ??_checkCRC 000F                             _readReg 0A9A  
                      __size_of_isr 0DDE                          ??_decodeIt 003D  
                  readInputCoil@crc 0022                    readInputCoil@lsb 0029  
                 ?_ConfigInterrupts 0001                      __pintcode_body 0C82  
              end_of_initialization 1374                  ??_ConfigInterrupts 000F  
                 readReg@rr_numRegs 0026                          ??_readCoil 001E  
                           int_func 0C82                     ??_readInputCoil 001E  
                     _modbusMessage 003F                        writeCoil@crc 0029  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE                          _timerCount 0040  
                        ??_writeReg 001E                   readCoil@remainder 0024  
                 __end_of_writeCoil 0F1C                           _TRISCbits 000F94  
                     ??_generateCRC 0011               writeReg@wr_valToWrite 002A  
            __size_of_clearResponse 002C             writeCoil@wc_AddressHigh 0021  
                     __pidataCOMRAM 13F6                 start_initialization 1334  
   writeMultipleRegs@wmr_numRegsLow 002E                         __end_of_isr 0DE6  
                 __size_of_ClsUSART 000C      writeMultipleRegs@valToWriteLow 0024  
        __end_of_writeMultipleCoils 0276               __size_of_readInputReg 01E8  
              writeMultipleRegs@crc 0038                          readReg@crc 0022  
                 __size_of_OpnUSART 006C                 __end_of_generateCRC 1216  
                 __size_of_OpenTmr0 0018                      readInputCoil@i 002A  
                    readInputCoil@j 002B                      readInputCoil@k 002C  
                    readInputCoil@l 0028                    __CFG_LPT1OSC$OFF 000000  
                       __pbssCOMRAM 003D                        _readInputReg 08B2  
                 __size_of_checkCRC 0106                   __size_of_decodeIt 00B2  
                     _clearResponse 137A                       ??_modbusDelay 0001  
                 __size_of_readCoil 022A                   __CFG_CCP2MX$PORTC 000000  
                         __pintcode 0008                           checkCRC@i 001B  
                         checkCRC@j 0017                            ?_readReg 0001  
                 __size_of_writeReg 0128                      ?_clearResponse 0001  
              readCoil@howManyBytes 0027                         _generateCRC 114A  
  writeMultipleRegs@wmr_numBytesTST 0032                            _LATCbits 000F8B  
                          _PIE1bits 000F9D    writeMultipleRegs@wmr_numRegsHigh 002C  
                          _PIR1bits 000F9E               __CFG_DATABW$DATA16BIT 000000  
         __size_of_ConfigInterrupts 0008                            _RCONbits 000FD0  
                  __CFG_WDTPS$32768 000000                         writeReg@crc 002C  
writeMultipleCoils@wmc_numCoilsHigh 0028                 __end_of_modbusDelay 13EE  
                 __CFG_ECCPMX$PORTE 000000                            _ClsUSART 13D8  
                       checkCRC@crc 0019                           _writeCoil 0DE6  
            writeCoil@wc_AddressLow 001F                       OpnUSART@spbrg 0010  
               writeMultipleCoils@i 0038                 writeMultipleCoils@j 0037  
               writeMultipleCoils@k 0023                 writeMultipleCoils@l 0036  
               writeMultipleCoils@q 002C                            _OpnUSART 12C8  
                         readCoil@i 002A                           readCoil@j 002B  
                         readCoil@k 002C                           readCoil@l 0028  
                          _OpenTmr0 13C0                            __Hrparam 0000  
             __end_of_readInputCoil 04A0                            __Lrparam 0000  
    writeMultipleCoils@howManyBytes 002F                       readInputReg@i 0028  
                     readInputReg@j 002A                  generateCRC@crcHigh 0016  
                          _checkCRC 1044                     ??_clearResponse 000F  
                          _decodeIt 1216                    __size_of_readReg 01E8  
                          __ptext10 114A                            __ptext11 137A  
                          __ptext12 1044                            __ptext13 13EE  
                          __ptext14 12C8                            __ptext15 13D8  
                          __ptext17 13E4                            __ptext18 13C0  
                        ?_writeCoil 0001       writeMultipleRegs@wmr_numBytes 0030  
        writeCoil@wc_valToWriteHigh 0025                            _readCoil 04A0  
                     __size_of_main 001A    writeMultipleRegs@wmr_AddressHigh 0028  
                          _received 0060                         _modbusDelay 13E4  
                        writeCoil@i 002D        writeMultipleRegs@wmr_Address 0034  
                          _response 0100   writeMultipleCoils@wmc_numCoilsLow 002A  
          generateCRC@messageLength 000F                  _writeMultipleCoils 0018  
                          _writeReg 0F1C               __CFG_ADDRBW$ADDR20BIT 000000  
               ?_writeMultipleCoils 0001                          _INTCONbits 000FF2  
            readInputReg@rr_Address 0024                  readCoil@rc_Address 0020  
                          readReg@i 0028                            readReg@j 002A  
           readInputCoil@rc_Address 0020                 readCoil@rc_numCoils 0025  
          readInputCoil@rc_numCoils 0025                            intlevel2 0000  
              ??_writeMultipleCoils 001E        writeMultipleRegs@wmr_numRegs 0026  
                        _RCSTA1bits 000FAB                    _ConfigInterrupts 13EE  
                         writeReg@i 002E                   _writeMultipleRegs 06CA  
                ?_writeMultipleRegs 0001              readInputReg@rr_numRegs 0026  
               ??_writeMultipleRegs 001E                         ??_writeCoil 001E  
                      ?_generateCRC 000F              readInputCoil@remainder 0024  
         __end_of_writeMultipleRegs 08B2  
