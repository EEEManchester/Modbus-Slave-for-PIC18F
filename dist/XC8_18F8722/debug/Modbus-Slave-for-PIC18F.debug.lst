

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Dec 16 13:38:32 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	idataCOMRAM
    37  0013E4                     __pidataCOMRAM:
    38                           	opt stack 0
    39                           
    40                           ;initializer for _newMessage
    41  0013E4  01                 	db	1
    42  0000                     _BAUDCON1bits	set	3966
    43  0000                     _INTCONbits	set	4082
    44  0000                     _LATCbits	set	3979
    45  0000                     _LATF	set	3982
    46  0000                     _PIE1	set	3997
    47  0000                     _PIE1bits	set	3997
    48  0000                     _PIR1bits	set	3998
    49  0000                     _RCONbits	set	4048
    50  0000                     _RCREG1	set	4014
    51  0000                     _RCSTA1	set	4011
    52  0000                     _RCSTA1bits	set	4011
    53  0000                     _SPBRG	set	4015
    54  0000                     _T0CONbits	set	4053
    55  0000                     _TMR0H	set	4055
    56  0000                     _TMR0L	set	4054
    57  0000                     _TRISCbits	set	3988
    58  0000                     _TRISF	set	3991
    59  0000                     _TXREG1	set	4013
    60  0000                     _TXSTA1	set	4012
    61  0000                     _TXSTA1bits	set	4012
    62                           
    63                           ; #config settings
    64  0000                     
    65                           	psect	cinit
    66  001322                     __pcinit:
    67                           	opt stack 0
    68  001322                     start_initialization:
    69                           	opt stack 0
    70  001322                     __initialization:
    71                           	opt stack 0
    72                           
    73                           ; Clear objects allocated to BANK2 (100 bytes)
    74  001322  EE02  F000         	lfsr	0,__pbssBANK2
    75  001326  0E64               	movlw	100
    76  001328                     clear_0:
    77  001328  6AEE               	clrf	postinc0,c
    78  00132A  06E8               	decf	wreg,f,c
    79  00132C  E1FD               	bnz	clear_0
    80                           
    81                           ; Clear objects allocated to BANK1 (175 bytes)
    82  00132E  EE01  F000         	lfsr	0,__pbssBANK1
    83  001332  0EAF               	movlw	175
    84  001334                     clear_1:
    85  001334  6AEE               	clrf	postinc0,c
    86  001336  06E8               	decf	wreg,f,c
    87  001338  E1FD               	bnz	clear_1
    88                           
    89                           ; Clear objects allocated to BANK0 (125 bytes)
    90  00133A  EE00  F060         	lfsr	0,__pbssBANK0
    91  00133E  0E7D               	movlw	125
    92  001340                     clear_2:
    93  001340  6AEE               	clrf	postinc0,c
    94  001342  06E8               	decf	wreg,f,c
    95  001344  E1FD               	bnz	clear_2
    96                           
    97                           ; Clear objects allocated to COMRAM (5 bytes)
    98  001346  6A3F               	clrf	(__pbssCOMRAM+4)& (0+255),c
    99  001348  6A3E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   100  00134A  6A3D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   101  00134C  6A3C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   102  00134E  6A3B               	clrf	__pbssCOMRAM& (0+255),c
   103                           
   104                           ; Initialize objects allocated to COMRAM (1 bytes)
   105                           ; load TBLPTR registers with __pidataCOMRAM
   106  001350  0EE4               	movlw	low __pidataCOMRAM
   107  001352  6EF6               	movwf	tblptrl,c
   108  001354  0E13               	movlw	high __pidataCOMRAM
   109  001356  6EF7               	movwf	tblptrh,c
   110  001358  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   111  00135A  6EF8               	movwf	tblptru,c
   112  00135C  0009               	tblrd		*+	;fetch initializer
   113  00135E  CFF5 F040          	movff	tablat,__pdataCOMRAM
   114  001362                     end_of_initialization:
   115                           	opt stack 0
   116  001362                     __end_of__initialization:
   117                           	opt stack 0
   118  001362  0100               	movlb	0
   119  001364  EFCA  F009         	goto	_main	;jump to C main() function
   120                           tblptru	equ	0xFF8
   121                           tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           
   127                           	psect	bssCOMRAM
   128  00003B                     __pbssCOMRAM:
   129                           	opt stack 0
   130  00003B                     _endOfMessage:
   131                           	opt stack 0
   132  00003B                     	ds	1
   133  00003C                     _messageLength:
   134                           	opt stack 0
   135  00003C                     	ds	1
   136  00003D                     _modbusMessage:
   137                           	opt stack 0
   138  00003D                     	ds	1
   139  00003E                     _timerCount:
   140                           	opt stack 0
   141  00003E                     	ds	1
   142  00003F                     _z:
   143                           	opt stack 0
   144  00003F                     	ds	1
   145                           tblptru	equ	0xFF8
   146                           tblptrh	equ	0xFF7
   147                           tblptrl	equ	0xFF6
   148                           tablat	equ	0xFF5
   149                           postinc0	equ	0xFEE
   150                           wreg	equ	0xFE8
   151                           
   152                           	psect	dataCOMRAM
   153  000040                     __pdataCOMRAM:
   154                           	opt stack 0
   155  000040                     _newMessage:
   156                           	opt stack 0
   157  000040                     	ds	1
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           tblptrl	equ	0xFF6
   161                           tablat	equ	0xFF5
   162                           postinc0	equ	0xFEE
   163                           wreg	equ	0xFE8
   164                           
   165                           	psect	bssBANK0
   166  000060                     __pbssBANK0:
   167                           	opt stack 0
   168  000060                     _received:
   169                           	opt stack 0
   170  000060                     	ds	125
   171                           tblptru	equ	0xFF8
   172                           tblptrh	equ	0xFF7
   173                           tblptrl	equ	0xFF6
   174                           tablat	equ	0xFF5
   175                           postinc0	equ	0xFEE
   176                           wreg	equ	0xFE8
   177                           
   178                           	psect	bssBANK1
   179  000100                     __pbssBANK1:
   180                           	opt stack 0
   181  000100                     _response:
   182                           	opt stack 0
   183  000100                     	ds	125
   184  00017D                     _coils:
   185                           	opt stack 0
   186  00017D                     	ds	50
   187                           tblptru	equ	0xFF8
   188                           tblptrh	equ	0xFF7
   189                           tblptrl	equ	0xFF6
   190                           tablat	equ	0xFF5
   191                           postinc0	equ	0xFEE
   192                           wreg	equ	0xFE8
   193                           
   194                           	psect	bssBANK2
   195  000200                     __pbssBANK2:
   196                           	opt stack 0
   197  000200                     _holdingReg:
   198                           	opt stack 0
   199  000200                     	ds	100
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           
   207                           	psect	cstackCOMRAM
   208  000001                     __pcstackCOMRAM:
   209                           	opt stack 0
   210  000001                     ??_isr:
   211  000001                     
   212                           ; 1 bytes @ 0x0
   213  000001                     	ds	14
   214  00000F                     ??_OpnUSART:
   215  00000F                     ??_checkCRC:
   216  00000F                     ??_clearResponse:
   217  00000F                     ?_generateCRC:
   218                           	opt stack 0
   219  00000F                     generateCRC@messageLength:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0xE
   223  00000F                     	ds	1
   224  000010                     clearResponse@i:
   225                           	opt stack 0
   226  000010                     OpnUSART@spbrg:
   227                           	opt stack 0
   228                           
   229                           ; 4 bytes @ 0xF
   230  000010                     	ds	1
   231  000011                     ??_generateCRC:
   232                           
   233                           ; 0 bytes @ 0x10
   234  000011                     	ds	2
   235  000013                     checkCRC@crcHigh:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x12
   239  000013                     	ds	1
   240  000014                     generateCRC@crcLow:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x13
   244  000014                     	ds	1
   245  000015                     checkCRC@crcLow:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x14
   249  000015                     	ds	1
   250  000016                     generateCRC@crcHigh:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x15
   254  000016                     	ds	1
   255  000017                     checkCRC@j:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x16
   259  000017                     	ds	1
   260  000018                     generateCRC@i:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x17
   264  000018                     	ds	1
   265  000019                     checkCRC@crc:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x18
   269  000019                     	ds	1
   270  00001A                     generateCRC@j:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x19
   274  00001A                     	ds	1
   275  00001B                     checkCRC@i:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x1A
   279  00001B                     	ds	1
   280  00001C                     generateCRC@crc:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x1B
   284  00001C                     	ds	2
   285  00001E                     ??_readCoil:
   286  00001E                     ??_readInputCoil:
   287  00001E                     ??_readReg:
   288  00001E                     ??_readInputReg:
   289  00001E                     ??_writeCoil:
   290  00001E                     ??_writeReg:
   291  00001E                     ??_writeMultipleRegs:
   292  00001E                     ??_writeMultipleCoils:
   293                           
   294                           ; 0 bytes @ 0x1D
   295  00001E                     	ds	1
   296  00001F                     writeCoil@wc_AddressLow:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x1E
   300  00001F                     	ds	1
   301  000020                     writeReg@wr_AddressLow:
   302                           	opt stack 0
   303  000020                     readCoil@rc_Address:
   304                           	opt stack 0
   305  000020                     readInputCoil@rc_Address:
   306                           	opt stack 0
   307  000020                     writeMultipleCoils@wmc_numBytes:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x1F
   311  000020                     	ds	1
   312  000021                     writeCoil@wc_AddressHigh:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x20
   316  000021                     	ds	1
   317  000022                     writeMultipleCoils@lsb:
   318                           	opt stack 0
   319  000022                     readReg@crc:
   320                           	opt stack 0
   321  000022                     readInputReg@crc:
   322                           	opt stack 0
   323  000022                     writeReg@wr_AddressHigh:
   324                           	opt stack 0
   325  000022                     writeMultipleRegs@valToWriteHigh:
   326                           	opt stack 0
   327  000022                     readCoil@crc:
   328                           	opt stack 0
   329  000022                     readInputCoil@crc:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x21
   333  000022                     	ds	1
   334  000023                     writeMultipleCoils@k:
   335                           	opt stack 0
   336  000023                     writeCoil@wc_valToWriteLow:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x22
   340  000023                     	ds	1
   341  000024                     readCoil@remainder:
   342                           	opt stack 0
   343  000024                     readInputCoil@remainder:
   344                           	opt stack 0
   345  000024                     readReg@rr_Address:
   346                           	opt stack 0
   347  000024                     readInputReg@rr_Address:
   348                           	opt stack 0
   349  000024                     writeReg@wr_valToWriteLow:
   350                           	opt stack 0
   351  000024                     writeMultipleRegs@valToWriteLow:
   352                           	opt stack 0
   353  000024                     writeMultipleCoils@wmc_AddressHigh:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x23
   357  000024                     	ds	1
   358  000025                     readCoil@rc_numCoils:
   359                           	opt stack 0
   360  000025                     readInputCoil@rc_numCoils:
   361                           	opt stack 0
   362  000025                     writeCoil@wc_valToWriteHigh:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x24
   366  000025                     	ds	1
   367  000026                     readReg@rr_numRegs:
   368                           	opt stack 0
   369  000026                     readInputReg@rr_numRegs:
   370                           	opt stack 0
   371  000026                     writeReg@wr_valToWriteHigh:
   372                           	opt stack 0
   373  000026                     writeMultipleRegs@wmr_numRegs:
   374                           	opt stack 0
   375  000026                     writeMultipleCoils@wmc_AddressLow:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x25
   379  000026                     	ds	1
   380  000027                     readCoil@howManyBytes:
   381                           	opt stack 0
   382  000027                     readInputCoil@howManyBytes:
   383                           	opt stack 0
   384  000027                     writeCoil@wc_valToWrite:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x26
   388  000027                     	ds	1
   389  000028                     readCoil@l:
   390                           	opt stack 0
   391  000028                     readInputCoil@l:
   392                           	opt stack 0
   393  000028                     readReg@i:
   394                           	opt stack 0
   395  000028                     readInputReg@i:
   396                           	opt stack 0
   397  000028                     writeReg@wr_Address:
   398                           	opt stack 0
   399  000028                     writeMultipleRegs@wmr_AddressHigh:
   400                           	opt stack 0
   401  000028                     writeMultipleCoils@wmc_numCoilsHigh:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x27
   405  000028                     	ds	1
   406  000029                     readCoil@lsb:
   407                           	opt stack 0
   408  000029                     readInputCoil@lsb:
   409                           	opt stack 0
   410  000029                     writeCoil@crc:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x28
   414  000029                     	ds	1
   415  00002A                     readReg@j:
   416                           	opt stack 0
   417  00002A                     readInputReg@j:
   418                           	opt stack 0
   419  00002A                     readCoil@i:
   420                           	opt stack 0
   421  00002A                     readInputCoil@i:
   422                           	opt stack 0
   423  00002A                     writeReg@wr_valToWrite:
   424                           	opt stack 0
   425  00002A                     writeMultipleRegs@wmr_AddressLow:
   426                           	opt stack 0
   427  00002A                     writeMultipleCoils@wmc_numCoilsLow:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x29
   431  00002A                     	ds	1
   432  00002B                     readCoil@j:
   433                           	opt stack 0
   434  00002B                     readInputCoil@j:
   435                           	opt stack 0
   436  00002B                     writeCoil@wc_Address:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x2A
   440  00002B                     	ds	1
   441  00002C                     readCoil@k:
   442                           	opt stack 0
   443  00002C                     readInputCoil@k:
   444                           	opt stack 0
   445  00002C                     writeMultipleCoils@q:
   446                           	opt stack 0
   447  00002C                     writeReg@crc:
   448                           	opt stack 0
   449  00002C                     writeMultipleRegs@wmr_numRegsHigh:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x2B
   453  00002C                     	ds	1
   454  00002D                     writeCoil@i:
   455                           	opt stack 0
   456  00002D                     writeMultipleCoils@wmc_Address:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x2C
   460  00002D                     	ds	1
   461  00002E                     writeReg@i:
   462                           	opt stack 0
   463  00002E                     writeMultipleRegs@wmr_numRegsLow:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x2D
   467  00002E                     	ds	1
   468  00002F                     writeMultipleCoils@howManyBytes:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x2E
   472  00002F                     	ds	1
   473  000030                     writeMultipleRegs@wmr_numBytes:
   474                           	opt stack 0
   475  000030                     writeMultipleCoils@crc:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x2F
   479  000030                     	ds	2
   480  000032                     writeMultipleCoils@valToWrite:
   481                           	opt stack 0
   482  000032                     writeMultipleRegs@wmr_Address:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x31
   486  000032                     	ds	1
   487  000033                     writeMultipleCoils@remainder:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x32
   491  000033                     	ds	1
   492  000034                     writeMultipleRegs@valToWrite:
   493                           	opt stack 0
   494  000034                     writeMultipleCoils@wmc_numCoils:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x33
   498  000034                     	ds	2
   499  000036                     writeMultipleCoils@l:
   500                           	opt stack 0
   501  000036                     writeMultipleRegs@crc:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x35
   505  000036                     	ds	1
   506  000037                     writeMultipleCoils@j:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x36
   510  000037                     	ds	1
   511  000038                     writeMultipleRegs@j:
   512                           	opt stack 0
   513  000038                     writeMultipleCoils@i:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x37
   517  000038                     	ds	1
   518  000039                     writeMultipleRegs@i:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x38
   522  000039                     	ds	2
   523  00003B                     tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           ; 0 bytes @ 0x3A
   531 ;;
   532 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   533 ;;
   534 ;; *************** function _main *****************
   535 ;; Defined at:
   536 ;;		line 38 in file "main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;		None               void
   543 ;; Registers used:
   544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;Total ram usage:        0 bytes
   555 ;; Hardware stack levels required when called:    5
   556 ;; This function calls:
   557 ;;		_OpnUSART
   558 ;;		_ConfigInterrupts
   559 ;;		_decodeIt
   560 ;; This function is called by:
   561 ;;		Startup code after reset
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text0
   566  001394                     __ptext0:
   567                           	opt stack 0
   568  001394                     _main:
   569                           	opt stack 25
   570                           
   571                           ;main.c: 39: OpnUSART();
   572                           
   573                           ;incstack = 0
   574                           ;incstack = 0
   575  001394  EC5B  F009         	call	_OpnUSART	;wreg free
   576                           
   577                           ;main.c: 40: ConfigInterrupts();
   578  001398  ECEE  F009         	call	_ConfigInterrupts	;wreg free
   579                           
   580                           ;main.c: 42: TRISF = 0;
   581  00139C  0E00               	movlw	0
   582  00139E  6E97               	movwf	3991,c	;volatile
   583  0013A0                     l1821:
   584                           
   585                           ;main.c: 45: if(modbusMessage){
   586  0013A0  503D               	movf	_modbusMessage,w,c	;volatile
   587  0013A2  A4D8               	btfss	status,2,c
   588                           
   589                           ;main.c: 46: decodeIt();}
   590  0013A4  EC02  F009         	call	_decodeIt	;wreg free
   591                           
   592                           ;main.c: 49: LATF = holdingReg[0];
   593  0013A8  C200  FF8E         	movff	_holdingReg,3982	;volatile
   594  0013AC  D7F9               	goto	l1821
   595  0013AE                     __end_of_main:
   596                           	opt stack 0
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           postinc0	equ	0xFEE
   602                           wreg	equ	0xFE8
   603                           status	equ	0xFD8
   604                           
   605 ;; *************** function _decodeIt *****************
   606 ;; Defined at:
   607 ;;		line 52 in file "modbus.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;		None               void
   614 ;; Registers used:
   615 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   625 ;;Total ram usage:        0 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    4
   628 ;; This function calls:
   629 ;;		_checkCRC
   630 ;;		_readCoil
   631 ;;		_readInputCoil
   632 ;;		_readReg
   633 ;;		_readInputReg
   634 ;;		_writeCoil
   635 ;;		_writeReg
   636 ;;		_writeMultipleRegs
   637 ;;		_writeMultipleCoils
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text1
   644  001204                     __ptext1:
   645                           	opt stack 0
   646  001204                     _decodeIt:
   647                           	opt stack 25
   648                           
   649                           ;modbus.c: 53: if(received[0] == 2){
   650                           
   651                           ;incstack = 0
   652                           ;incstack = 0
   653  001204  0100               	movlb	0	; () banked
   654  001206  0100               	movlb	0	; () banked
   655  001208  5160               	movf	_received& (0+255),w,b	;volatile
   656  00120A  0A02               	xorlw	2
   657  00120C  A4D8               	btfss	status,2,c
   658  00120E  D050               	goto	l162
   659                           
   660                           ; BSR set to: 0
   661                           ;modbus.c: 54: if(checkCRC()){
   662  001210  EC19  F008         	call	_checkCRC	;wreg free
   663  001214  0900               	iorlw	0
   664  001216  B4D8               	btfsc	status,2,c
   665  001218  D04B               	goto	l162
   666                           
   667                           ;modbus.c: 55: if(received[1] == 0x01){
   668  00121A  0100               	movlb	0	; () banked
   669  00121C  0100               	movlb	0	; () banked
   670  00121E  0561               	decf	(_received+1)& (0+255),w,b	;volatile
   671  001220  A4D8               	btfss	status,2,c
   672  001222  D003               	goto	l1881
   673                           
   674                           ; BSR set to: 0
   675                           ;modbus.c: 56: readCoil();
   676  001224  EC50  F002         	call	_readCoil	;wreg free
   677                           
   678                           ;modbus.c: 57: }
   679  001228  D043               	goto	l162
   680  00122A                     l1881:
   681                           
   682                           ;modbus.c: 58: else if(received[1] == 0x02){
   683  00122A  0100               	movlb	0	; () banked
   684  00122C  0100               	movlb	0	; () banked
   685  00122E  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   686  001230  0A02               	xorlw	2
   687  001232  A4D8               	btfss	status,2,c
   688  001234  D003               	goto	l1885
   689                           
   690                           ; BSR set to: 0
   691                           ;modbus.c: 59: readInputCoil();
   692  001236  EC3B  F001         	call	_readInputCoil	;wreg free
   693                           
   694                           ;modbus.c: 60: }
   695  00123A  D03A               	goto	l162
   696  00123C                     l1885:
   697                           
   698                           ;modbus.c: 61: else if(received[1] == 0x03){
   699  00123C  0100               	movlb	0	; () banked
   700  00123E  0100               	movlb	0	; () banked
   701  001240  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   702  001242  0A03               	xorlw	3
   703  001244  A4D8               	btfss	status,2,c
   704  001246  D003               	goto	l1889
   705                           
   706                           ; BSR set to: 0
   707                           ;modbus.c: 62: readReg();
   708  001248  EC59  F004         	call	_readReg	;wreg free
   709                           
   710                           ;modbus.c: 63: }
   711  00124C  D031               	goto	l162
   712  00124E                     l1889:
   713                           
   714                           ;modbus.c: 64: else if(received[1] == 0x04){
   715  00124E  0100               	movlb	0	; () banked
   716  001250  0100               	movlb	0	; () banked
   717  001252  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   718  001254  0A04               	xorlw	4
   719  001256  A4D8               	btfss	status,2,c
   720  001258  D003               	goto	l1893
   721                           
   722                           ; BSR set to: 0
   723                           ;modbus.c: 65: readInputReg();
   724  00125A  EC65  F003         	call	_readInputReg	;wreg free
   725                           
   726                           ;modbus.c: 66: }
   727  00125E  D028               	goto	l162
   728  001260                     l1893:
   729                           
   730                           ;modbus.c: 67: else if(received[1] == 0x05){
   731  001260  0100               	movlb	0	; () banked
   732  001262  0100               	movlb	0	; () banked
   733  001264  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   734  001266  0A05               	xorlw	5
   735  001268  A4D8               	btfss	status,2,c
   736  00126A  D003               	goto	l1897
   737                           
   738                           ; BSR set to: 0
   739                           ;modbus.c: 68: writeCoil();
   740  00126C  ECEA  F006         	call	_writeCoil	;wreg free
   741                           
   742                           ;modbus.c: 69: }
   743  001270  D01F               	goto	l162
   744  001272                     l1897:
   745                           
   746                           ;modbus.c: 70: else if(received[1] == 0x06){
   747  001272  0100               	movlb	0	; () banked
   748  001274  0100               	movlb	0	; () banked
   749  001276  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   750  001278  0A06               	xorlw	6
   751  00127A  A4D8               	btfss	status,2,c
   752  00127C  D003               	goto	l1901
   753                           
   754                           ; BSR set to: 0
   755                           ;modbus.c: 71: writeReg();
   756  00127E  EC85  F007         	call	_writeReg	;wreg free
   757                           
   758                           ;modbus.c: 72: }
   759  001282  D016               	goto	l162
   760  001284                     l1901:
   761                           
   762                           ;modbus.c: 73: else if(received[1] == 0x10){
   763  001284  0100               	movlb	0	; () banked
   764  001286  0100               	movlb	0	; () banked
   765  001288  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   766  00128A  0A10               	xorlw	16
   767  00128C  A4D8               	btfss	status,2,c
   768  00128E  D003               	goto	l1905
   769                           
   770                           ; BSR set to: 0
   771                           ;modbus.c: 74: writeMultipleRegs();
   772  001290  EC4D  F005         	call	_writeMultipleRegs	;wreg free
   773                           
   774                           ;modbus.c: 75: }
   775  001294  D00D               	goto	l162
   776  001296                     l1905:
   777                           
   778                           ;modbus.c: 76: else if(received[1] == 0x0F){
   779  001296  0100               	movlb	0	; () banked
   780  001298  0100               	movlb	0	; () banked
   781  00129A  5161               	movf	(_received+1)& (0+255),w,b	;volatile
   782  00129C  0A0F               	xorlw	15
   783  00129E  A4D8               	btfss	status,2,c
   784  0012A0  D003               	goto	l1909
   785                           
   786                           ; BSR set to: 0
   787                           ;modbus.c: 77: writeMultipleCoils();
   788  0012A2  EC0C  F000         	call	_writeMultipleCoils	;wreg free
   789                           
   790                           ;modbus.c: 78: }
   791  0012A6  D004               	goto	l162
   792  0012A8                     l1909:
   793                           
   794                           ;modbus.c: 79: else{
   795                           ;modbus.c: 80: response[0] = 0;
   796  0012A8  0E00               	movlw	0
   797  0012AA  0101               	movlb	1	; () banked
   798  0012AC  0101               	movlb	1	; () banked
   799  0012AE  6F00               	movwf	_response& (0+255),b	;volatile
   800  0012B0                     l162:
   801                           
   802                           ;modbus.c: 81: }
   803                           ;modbus.c: 82: }
   804                           ;modbus.c: 83: }
   805                           ;modbus.c: 84: modbusMessage = 0;
   806  0012B0  0E00               	movlw	0
   807  0012B2  6E3D               	movwf	_modbusMessage,c	;volatile
   808  0012B4  0012               	return	
   809  0012B6                     __end_of_decodeIt:
   810                           	opt stack 0
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           status	equ	0xFD8
   818                           
   819 ;; *************** function _writeMultipleCoils *****************
   820 ;; Defined at:
   821 ;;		line 551 in file "modbus.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;  wmc_numCoils    2   51[COMRAM] unsigned int 
   826 ;;  crc             2   47[COMRAM] unsigned int 
   827 ;;  wmc_Address     2   44[COMRAM] unsigned int 
   828 ;;  wmc_numCoils    2   41[COMRAM] unsigned int 
   829 ;;  wmc_numCoils    2   39[COMRAM] unsigned int 
   830 ;;  wmc_AddressL    2   37[COMRAM] unsigned int 
   831 ;;  wmc_AddressH    2   35[COMRAM] unsigned int 
   832 ;;  wmc_numBytes    2   31[COMRAM] unsigned int 
   833 ;;  i               1   55[COMRAM] unsigned char 
   834 ;;  j               1   54[COMRAM] unsigned char 
   835 ;;  l               1   53[COMRAM] unsigned char 
   836 ;;  remainder       1   50[COMRAM] unsigned char 
   837 ;;  valToWrite      1   49[COMRAM] unsigned char 
   838 ;;  howManyBytes    1   46[COMRAM] unsigned char 
   839 ;;  q               1   43[COMRAM] unsigned char 
   840 ;;  k               1   34[COMRAM] unsigned char 
   841 ;;  lsb             1   33[COMRAM] unsigned char 
   842 ;;  bitSet          1    0        unsigned char 
   843 ;; Return value:  Size  Location     Type
   844 ;;		None               void
   845 ;; Registers used:
   846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   856 ;;Total ram usage:       27 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    3
   859 ;; This function calls:
   860 ;;		_clearResponse
   861 ;;		_generateCRC
   862 ;; This function is called by:
   863 ;;		_decodeIt
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           	psect	text2
   868  000018                     __ptext2:
   869                           	opt stack 0
   870  000018                     _writeMultipleCoils:
   871                           	opt stack 25
   872                           
   873                           ;modbus.c: 555: unsigned int wmc_Address = 0;
   874                           
   875                           ;incstack = 0
   876                           ;incstack = 0
   877  000018  0E00               	movlw	0
   878  00001A  6E2E               	movwf	writeMultipleCoils@wmc_Address+1,c
   879  00001C  0E00               	movlw	0
   880  00001E  6E2D               	movwf	writeMultipleCoils@wmc_Address,c
   881                           
   882                           ;modbus.c: 556: unsigned int wmc_AddressHigh = 0;
   883  000020  0E00               	movlw	0
   884  000022  6E25               	movwf	writeMultipleCoils@wmc_AddressHigh+1,c
   885  000024  0E00               	movlw	0
   886  000026  6E24               	movwf	writeMultipleCoils@wmc_AddressHigh,c
   887                           
   888                           ;modbus.c: 557: unsigned int wmc_AddressLow = 0;
   889  000028  0E00               	movlw	0
   890  00002A  6E27               	movwf	writeMultipleCoils@wmc_AddressLow+1,c
   891  00002C  0E00               	movlw	0
   892  00002E  6E26               	movwf	writeMultipleCoils@wmc_AddressLow,c
   893                           
   894                           ;modbus.c: 558: unsigned int wmc_numCoils = 0;
   895  000030  0E00               	movlw	0
   896  000032  6E35               	movwf	writeMultipleCoils@wmc_numCoils+1,c
   897  000034  0E00               	movlw	0
   898  000036  6E34               	movwf	writeMultipleCoils@wmc_numCoils,c
   899                           
   900                           ;modbus.c: 559: unsigned int wmc_numCoilsHigh = 0;
   901  000038  0E00               	movlw	0
   902  00003A  6E29               	movwf	writeMultipleCoils@wmc_numCoilsHigh+1,c
   903  00003C  0E00               	movlw	0
   904  00003E  6E28               	movwf	writeMultipleCoils@wmc_numCoilsHigh,c
   905                           
   906                           ;modbus.c: 560: unsigned int wmc_numCoilsLow = 0;
   907  000040  0E00               	movlw	0
   908  000042  6E2B               	movwf	writeMultipleCoils@wmc_numCoilsLow+1,c
   909  000044  0E00               	movlw	0
   910  000046  6E2A               	movwf	writeMultipleCoils@wmc_numCoilsLow,c
   911                           
   912                           ;modbus.c: 561: unsigned int wmc_numBytes = 0;
   913  000048  0E00               	movlw	0
   914  00004A  6E21               	movwf	writeMultipleCoils@wmc_numBytes+1,c
   915  00004C  0E00               	movlw	0
   916  00004E  6E20               	movwf	writeMultipleCoils@wmc_numBytes,c
   917                           
   918                           ;modbus.c: 562: unsigned int crc = 0;
   919  000050  0E00               	movlw	0
   920  000052  6E31               	movwf	writeMultipleCoils@crc+1,c
   921  000054  0E00               	movlw	0
   922  000056  6E30               	movwf	writeMultipleCoils@crc,c
   923                           
   924                           ;modbus.c: 564: unsigned char howManyBytes = 0;
   925  000058  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   926  00005A  0E00               	movlw	0
   927  00005C  6E2F               	movwf	writeMultipleCoils@howManyBytes,c
   928  00005E  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   929                           
   930                           ;modbus.c: 565: unsigned char remainder = 0;
   931  000060  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   932  000062  0E00               	movlw	0
   933  000064  6E33               	movwf	writeMultipleCoils@remainder,c
   934  000066  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   935                           
   936                           ;modbus.c: 566: unsigned char lsb = 0;
   937  000068  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   938  00006A  0E00               	movlw	0
   939  00006C  6E22               	movwf	writeMultipleCoils@lsb,c
   940  00006E  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   941                           
   942                           ;modbus.c: 567: unsigned char i,j,k,l = 0;
   943  000070  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
   944  000072  0E00               	movlw	0
   945  000074  6E36               	movwf	writeMultipleCoils@l,c
   946  000076  501E               	movf	??_writeMultipleCoils& (0+255),w,c
   947                           
   948                           ;modbus.c: 570: wmc_Address = received[2];
   949  000078  0100               	movlb	0	; () banked
   950  00007A  C062  F02D         	movff	_received+2,writeMultipleCoils@wmc_Address	;volatile
   951  00007E  6A2E               	clrf	writeMultipleCoils@wmc_Address+1,c
   952                           
   953                           ; BSR set to: 0
   954                           ;modbus.c: 571: wmc_AddressHigh = received[2];
   955  000080  0100               	movlb	0	; () banked
   956  000082  C062  F024         	movff	_received+2,writeMultipleCoils@wmc_AddressHigh	;volatile
   957  000086  6A25               	clrf	writeMultipleCoils@wmc_AddressHigh+1,c
   958                           
   959                           ;modbus.c: 572: wmc_Address <<=8;
   960  000088  502D               	movf	writeMultipleCoils@wmc_Address,w,c
   961  00008A  6E2E               	movwf	writeMultipleCoils@wmc_Address+1,c
   962  00008C  6A2D               	clrf	writeMultipleCoils@wmc_Address,c
   963                           
   964                           ; BSR set to: 0
   965                           ;modbus.c: 573: wmc_Address |= received[3];
   966  00008E  0100               	movlb	0	; () banked
   967  000090  0100               	movlb	0	; () banked
   968  000092  5163               	movf	(_received+3)& (0+255),w,b	;volatile
   969  000094  122D               	iorwf	writeMultipleCoils@wmc_Address,f,c
   970                           
   971                           ; BSR set to: 0
   972                           ;modbus.c: 574: wmc_AddressLow = received[3];
   973  000096  0100               	movlb	0	; () banked
   974  000098  C063  F026         	movff	_received+3,writeMultipleCoils@wmc_AddressLow	;volatile
   975  00009C  6A27               	clrf	writeMultipleCoils@wmc_AddressLow+1,c
   976                           
   977                           ; BSR set to: 0
   978                           ;modbus.c: 577: wmc_numCoils = received[4];
   979  00009E  0100               	movlb	0	; () banked
   980  0000A0  C064  F034         	movff	_received+4,writeMultipleCoils@wmc_numCoils	;volatile
   981  0000A4  6A35               	clrf	writeMultipleCoils@wmc_numCoils+1,c
   982                           
   983                           ; BSR set to: 0
   984                           ;modbus.c: 578: wmc_numCoilsHigh = received[4];
   985  0000A6  0100               	movlb	0	; () banked
   986  0000A8  C064  F028         	movff	_received+4,writeMultipleCoils@wmc_numCoilsHigh	;volatile
   987  0000AC  6A29               	clrf	writeMultipleCoils@wmc_numCoilsHigh+1,c
   988                           
   989                           ; BSR set to: 0
   990                           ;modbus.c: 579: wmc_numCoils <<= 8;
   991  0000AE  5034               	movf	writeMultipleCoils@wmc_numCoils,w,c
   992  0000B0  6E35               	movwf	writeMultipleCoils@wmc_numCoils+1,c
   993  0000B2  6A34               	clrf	writeMultipleCoils@wmc_numCoils,c
   994                           
   995                           ;modbus.c: 580: wmc_numCoils |= received[5];
   996  0000B4  0100               	movlb	0	; () banked
   997  0000B6  0100               	movlb	0	; () banked
   998  0000B8  5165               	movf	(_received+5)& (0+255),w,b	;volatile
   999  0000BA  1234               	iorwf	writeMultipleCoils@wmc_numCoils,f,c
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;modbus.c: 581: wmc_numCoilsLow = received[5];
  1003  0000BC  0100               	movlb	0	; () banked
  1004  0000BE  C065  F02A         	movff	_received+5,writeMultipleCoils@wmc_numCoilsLow	;volatile
  1005  0000C2  6A2B               	clrf	writeMultipleCoils@wmc_numCoilsLow+1,c
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;modbus.c: 583: wmc_numBytes = received[6];
  1009  0000C4  0100               	movlb	0	; () banked
  1010  0000C6  C066  F020         	movff	_received+6,writeMultipleCoils@wmc_numBytes	;volatile
  1011  0000CA  6A21               	clrf	writeMultipleCoils@wmc_numBytes+1,c
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;modbus.c: 585: response[0] = 2;
  1015  0000CC  0E02               	movlw	2
  1016  0000CE  0101               	movlb	1	; () banked
  1017  0000D0  0101               	movlb	1	; () banked
  1018  0000D2  6F00               	movwf	_response& (0+255),b	;volatile
  1019                           
  1020                           ; BSR set to: 1
  1021                           ;modbus.c: 586: response[1] = 0x0F;
  1022  0000D4  0E0F               	movlw	15
  1023  0000D6  0101               	movlb	1	; () banked
  1024  0000D8  0101               	movlb	1	; () banked
  1025  0000DA  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  1026                           
  1027                           ;modbus.c: 588: howManyBytes = wmc_numCoils/8;
  1028  0000DC  C034  F01E         	movff	writeMultipleCoils@wmc_numCoils,??_writeMultipleCoils
  1029  0000E0  C035  F01F         	movff	writeMultipleCoils@wmc_numCoils+1,??_writeMultipleCoils+1
  1030  0000E4  90D8               	bcf	status,0,c
  1031  0000E6  321F               	rrcf	??_writeMultipleCoils+1,f,c
  1032  0000E8  321E               	rrcf	??_writeMultipleCoils,f,c
  1033  0000EA  90D8               	bcf	status,0,c
  1034  0000EC  321F               	rrcf	??_writeMultipleCoils+1,f,c
  1035  0000EE  321E               	rrcf	??_writeMultipleCoils,f,c
  1036  0000F0  90D8               	bcf	status,0,c
  1037  0000F2  321F               	rrcf	??_writeMultipleCoils+1,f,c
  1038  0000F4  321E               	rrcf	??_writeMultipleCoils,f,c
  1039  0000F6  501E               	movf	??_writeMultipleCoils,w,c
  1040  0000F8  6E2F               	movwf	writeMultipleCoils@howManyBytes,c
  1041                           
  1042                           ;modbus.c: 589: remainder = wmc_numCoils % 8;
  1043  0000FA  5034               	movf	writeMultipleCoils@wmc_numCoils,w,c
  1044  0000FC  0B07               	andlw	7
  1045  0000FE  6E33               	movwf	writeMultipleCoils@remainder,c
  1046                           
  1047                           ; BSR set to: 1
  1048                           ;modbus.c: 591: if(remainder){
  1049  000100  5033               	movf	writeMultipleCoils@remainder,w,c
  1050  000102  A4D8               	btfss	status,2,c
  1051                           
  1052                           ; BSR set to: 1
  1053                           ;modbus.c: 592: howManyBytes += 1;
  1054  000104  2A2F               	incf	writeMultipleCoils@howManyBytes,f,c
  1055                           
  1056                           ; BSR set to: 1
  1057                           ;modbus.c: 593: }
  1058                           ;modbus.c: 594: response[2] = wmc_AddressHigh;
  1059                           
  1060                           ; BSR set to: 1
  1061  000106  C024  F102         	movff	writeMultipleCoils@wmc_AddressHigh,_response+2	;volatile
  1062                           
  1063                           ; BSR set to: 1
  1064                           ;modbus.c: 595: response[3] = wmc_AddressLow;
  1065  00010A  C026  F103         	movff	writeMultipleCoils@wmc_AddressLow,_response+3	;volatile
  1066                           
  1067                           ; BSR set to: 1
  1068                           ;modbus.c: 597: response[4] = wmc_numCoilsHigh;
  1069  00010E  C028  F104         	movff	writeMultipleCoils@wmc_numCoilsHigh,_response+4	;volatile
  1070                           
  1071                           ; BSR set to: 1
  1072                           ;modbus.c: 598: response[5] = wmc_numCoilsLow;
  1073  000112  C02A  F105         	movff	writeMultipleCoils@wmc_numCoilsLow,_response+5	;volatile
  1074                           
  1075                           ; BSR set to: 1
  1076                           ;modbus.c: 600: l = wmc_Address;
  1077  000116  C02D  F036         	movff	writeMultipleCoils@wmc_Address,writeMultipleCoils@l
  1078                           
  1079                           ; BSR set to: 1
  1080                           ;modbus.c: 601: k = 3;
  1081  00011A  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1082  00011C  0E03               	movlw	3
  1083  00011E  6E23               	movwf	writeMultipleCoils@k,c
  1084  000120  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1085                           
  1086                           ; BSR set to: 1
  1087                           ;modbus.c: 603: unsigned char bitSet;
  1088                           ;modbus.c: 604: unsigned char valToWrite;
  1089                           ;modbus.c: 605: unsigned char q = 7;
  1090  000122  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1091  000124  0E07               	movlw	7
  1092  000126  6E2C               	movwf	writeMultipleCoils@q,c
  1093  000128  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1094                           
  1095                           ; BSR set to: 1
  1096                           ;modbus.c: 608: for(i=howManyBytes; i!=0; i--){
  1097  00012A  C02F  F038         	movff	writeMultipleCoils@howManyBytes,writeMultipleCoils@i
  1098  00012E  D074               	goto	L5
  1099  000130                     l2559:
  1100                           
  1101                           ;modbus.c: 609: valToWrite = received[q];
  1102  000130  502C               	movf	writeMultipleCoils@q,w,c
  1103  000132  0D01               	mullw	1
  1104  000134  0100               	movlb	0	; () banked
  1105  000136  0E60               	movlw	low _received	;volatile
  1106  000138  24F3               	addwf	prodl,w,c
  1107  00013A  6ED9               	movwf	fsr2l,c
  1108  00013C  0100               	movlb	0	; () banked
  1109  00013E  0E00               	movlw	high _received	;volatile
  1110  000140  20F4               	addwfc	prodh,w,c
  1111  000142  6EDA               	movwf	fsr2h,c
  1112  000144  50DF               	movf	indf2,w,c
  1113  000146  6E32               	movwf	writeMultipleCoils@valToWrite,c
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;modbus.c: 610: q++;
  1117  000148  2A2C               	incf	writeMultipleCoils@q,f,c
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;modbus.c: 611: if(i>1){
  1121  00014A  0E01               	movlw	1
  1122  00014C  6438               	cpfsgt	writeMultipleCoils@i,c
  1123  00014E  D032               	goto	l2583
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;modbus.c: 612: for(j=0;j!=8;j++){
  1127  000150  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1128  000152  0E00               	movlw	0
  1129  000154  6E37               	movwf	writeMultipleCoils@j,c
  1130  000156  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1131  000158                     
  1132                           ; BSR set to: 0
  1133  000158  5037               	movf	writeMultipleCoils@j,w,c
  1134  00015A  0A08               	xorlw	8
  1135  00015C  B4D8               	btfsc	status,2,c
  1136  00015E  D05B               	goto	l2597
  1137                           
  1138                           ;modbus.c: 613: if(!!((valToWrite) & (1 << (j)))){
  1139                           
  1140                           ; BSR set to: 0
  1141                           
  1142                           ; BSR set to: 0
  1143  000160  C037  F01E         	movff	writeMultipleCoils@j,??_writeMultipleCoils
  1144  000164  0E01               	movlw	1
  1145  000166  6E1F               	movwf	(??_writeMultipleCoils+1)& (0+255),c
  1146  000168  2A1E               	incf	??_writeMultipleCoils,f,c
  1147  00016A  D002               	goto	u1624
  1148  00016C                     u1625:
  1149  00016C  90D8               	bcf	status,0,c
  1150  00016E  361F               	rlcf	??_writeMultipleCoils+1,f,c
  1151  000170                     u1624:
  1152  000170  2E1E               	decfsz	??_writeMultipleCoils,f,c
  1153  000172  D7FC               	goto	u1625
  1154  000174  501F               	movf	??_writeMultipleCoils+1,w,c
  1155  000176  1432               	andwf	writeMultipleCoils@valToWrite,w,c
  1156  000178  0900               	iorlw	0
  1157  00017A  B4D8               	btfsc	status,2,c
  1158  00017C  D00C               	goto	l2575
  1159                           
  1160                           ;modbus.c: 614: coils[l] = 1;
  1161  00017E  5036               	movf	writeMultipleCoils@l,w,c
  1162  000180  0D01               	mullw	1
  1163  000182  0101               	movlb	1	; () banked
  1164  000184  0E7D               	movlw	low _coils	;volatile
  1165  000186  24F3               	addwf	prodl,w,c
  1166  000188  6ED9               	movwf	fsr2l,c
  1167  00018A  0101               	movlb	1	; () banked
  1168  00018C  0E01               	movlw	high _coils	;volatile
  1169  00018E  20F4               	addwfc	prodh,w,c
  1170  000190  6EDA               	movwf	fsr2h,c
  1171  000192  0E01               	movlw	1
  1172  000194  D00B               	goto	L1
  1173  000196                     l2575:
  1174                           
  1175                           ;modbus.c: 616: else{
  1176                           ;modbus.c: 617: coils[l] = 0;
  1177  000196  5036               	movf	writeMultipleCoils@l,w,c
  1178  000198  0D01               	mullw	1
  1179  00019A  0101               	movlb	1	; () banked
  1180  00019C  0E7D               	movlw	low _coils	;volatile
  1181  00019E  24F3               	addwf	prodl,w,c
  1182  0001A0  6ED9               	movwf	fsr2l,c
  1183  0001A2  0101               	movlb	1	; () banked
  1184  0001A4  0E01               	movlw	high _coils	;volatile
  1185  0001A6  20F4               	addwfc	prodh,w,c
  1186  0001A8  6EDA               	movwf	fsr2h,c
  1187  0001AA  0E00               	movlw	0
  1188  0001AC                     L1:
  1189  0001AC  6EDF               	movwf	indf2,c
  1190                           
  1191                           ; BSR set to: 1
  1192                           ;modbus.c: 619: }
  1193                           ;modbus.c: 620: l++;
  1194                           
  1195                           ; BSR set to: 1
  1196  0001AE  2A36               	incf	writeMultipleCoils@l,f,c
  1197                           
  1198                           ; BSR set to: 1
  1199  0001B0  2A37               	incf	writeMultipleCoils@j,f,c
  1200  0001B2  D7D2               	goto	L2
  1201  0001B4                     l2583:
  1202                           
  1203                           ;modbus.c: 623: else{
  1204                           ;modbus.c: 624: for(j=0;j!=remainder;j++){
  1205  0001B4  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1206  0001B6  0E00               	movlw	0
  1207  0001B8  6E37               	movwf	writeMultipleCoils@j,c
  1208  0001BA  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1209  0001BC  D029               	goto	l2595
  1210  0001BE                     l2585:
  1211                           
  1212                           ;modbus.c: 625: if(!!((valToWrite) & (1 << (j)))){
  1213  0001BE  C037  F01E         	movff	writeMultipleCoils@j,??_writeMultipleCoils
  1214  0001C2  0E01               	movlw	1
  1215  0001C4  6E1F               	movwf	(??_writeMultipleCoils+1)& (0+255),c
  1216  0001C6  2A1E               	incf	??_writeMultipleCoils,f,c
  1217  0001C8  D002               	goto	u1654
  1218  0001CA                     u1655:
  1219  0001CA  90D8               	bcf	status,0,c
  1220  0001CC  361F               	rlcf	??_writeMultipleCoils+1,f,c
  1221  0001CE                     u1654:
  1222  0001CE  2E1E               	decfsz	??_writeMultipleCoils,f,c
  1223  0001D0  D7FC               	goto	u1655
  1224  0001D2  501F               	movf	??_writeMultipleCoils+1,w,c
  1225  0001D4  1432               	andwf	writeMultipleCoils@valToWrite,w,c
  1226  0001D6  0900               	iorlw	0
  1227  0001D8  B4D8               	btfsc	status,2,c
  1228  0001DA  D00C               	goto	l2589
  1229                           
  1230                           ;modbus.c: 626: coils[l] = 1;
  1231  0001DC  5036               	movf	writeMultipleCoils@l,w,c
  1232  0001DE  0D01               	mullw	1
  1233  0001E0  0101               	movlb	1	; () banked
  1234  0001E2  0E7D               	movlw	low _coils	;volatile
  1235  0001E4  24F3               	addwf	prodl,w,c
  1236  0001E6  6ED9               	movwf	fsr2l,c
  1237  0001E8  0101               	movlb	1	; () banked
  1238  0001EA  0E01               	movlw	high _coils	;volatile
  1239  0001EC  20F4               	addwfc	prodh,w,c
  1240  0001EE  6EDA               	movwf	fsr2h,c
  1241  0001F0  0E01               	movlw	1
  1242  0001F2  D00B               	goto	L3
  1243  0001F4                     l2589:
  1244                           
  1245                           ;modbus.c: 628: else{
  1246                           ;modbus.c: 629: coils[l] = 0;
  1247  0001F4  5036               	movf	writeMultipleCoils@l,w,c
  1248  0001F6  0D01               	mullw	1
  1249  0001F8  0101               	movlb	1	; () banked
  1250  0001FA  0E7D               	movlw	low _coils	;volatile
  1251  0001FC  24F3               	addwf	prodl,w,c
  1252  0001FE  6ED9               	movwf	fsr2l,c
  1253  000200  0101               	movlb	1	; () banked
  1254  000202  0E01               	movlw	high _coils	;volatile
  1255  000204  20F4               	addwfc	prodh,w,c
  1256  000206  6EDA               	movwf	fsr2h,c
  1257  000208  0E00               	movlw	0
  1258  00020A                     L3:
  1259  00020A  6EDF               	movwf	indf2,c
  1260                           
  1261                           ; BSR set to: 1
  1262                           ;modbus.c: 630: }
  1263                           ;modbus.c: 631: l++;
  1264                           
  1265                           ; BSR set to: 1
  1266  00020C  2A36               	incf	writeMultipleCoils@l,f,c
  1267                           
  1268                           ; BSR set to: 1
  1269  00020E  2A37               	incf	writeMultipleCoils@j,f,c
  1270  000210                     l2595:
  1271  000210  5033               	movf	writeMultipleCoils@remainder,w,c
  1272  000212  6237               	cpfseq	writeMultipleCoils@j,c
  1273  000214  D7D4               	goto	l2585
  1274  000216                     l2597:
  1275  000216  0638               	decf	writeMultipleCoils@i,f,c
  1276  000218                     L5:
  1277  000218  6638               	tstfsz	writeMultipleCoils@i,c
  1278  00021A  D78A               	goto	l2559
  1279                           
  1280                           ;modbus.c: 632: }
  1281                           ;modbus.c: 633: }
  1282                           ;modbus.c: 634: }
  1283                           ;modbus.c: 635: crc = generateCRC(8);
  1284  00021C  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1285  00021E  0E08               	movlw	8
  1286  000220  6E0F               	movwf	?_generateCRC,c
  1287  000222  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1288  000224  EC9C  F008         	call	_generateCRC	;wreg free
  1289  000228  C00F  F030         	movff	?_generateCRC,writeMultipleCoils@crc
  1290  00022C  C010  F031         	movff	?_generateCRC+1,writeMultipleCoils@crc+1
  1291                           
  1292                           ;modbus.c: 637: response[6] = crc >> 8;
  1293  000230  5031               	movf	writeMultipleCoils@crc+1,w,c
  1294  000232  0101               	movlb	1	; () banked
  1295  000234  0101               	movlb	1	; () banked
  1296  000236  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  1297                           
  1298                           ; BSR set to: 1
  1299                           ;modbus.c: 638: response[7] = crc;
  1300  000238  C030  F107         	movff	writeMultipleCoils@crc,_response+7	;volatile
  1301                           
  1302                           ; BSR set to: 1
  1303                           ;modbus.c: 640: LATCbits.LATC1 = 1;
  1304  00023C  828B               	bsf	3979,1,c	;volatile
  1305                           
  1306                           ; BSR set to: 1
  1307                           ;modbus.c: 641: for(i=0;i!=9;i++){
  1308  00023E  6E1E               	movwf	??_writeMultipleCoils& (0+255),c
  1309  000240  0E00               	movlw	0
  1310  000242  6E38               	movwf	writeMultipleCoils@i,c
  1311  000244  501E               	movf	??_writeMultipleCoils& (0+255),w,c
  1312  000246                     
  1313                           ; BSR set to: 1
  1314  000246  5038               	movf	writeMultipleCoils@i,w,c
  1315  000248  0A09               	xorlw	9
  1316  00024A  B4D8               	btfsc	status,2,c
  1317  00024C  D010               	goto	l301
  1318  00024E                     l302:
  1319  00024E  A2AC               	btfss	4012,1,c	;volatile
  1320  000250  D7FE               	goto	l302
  1321                           
  1322                           ;modbus.c: 643: TXREG1 = response[i];
  1323  000252  5038               	movf	writeMultipleCoils@i,w,c
  1324  000254  0D01               	mullw	1
  1325  000256  0101               	movlb	1	; () banked
  1326  000258  0E00               	movlw	low _response	;volatile
  1327  00025A  24F3               	addwf	prodl,w,c
  1328  00025C  6ED9               	movwf	fsr2l,c
  1329  00025E  0101               	movlb	1	; () banked
  1330  000260  0E01               	movlw	high _response	;volatile
  1331  000262  20F4               	addwfc	prodh,w,c
  1332  000264  6EDA               	movwf	fsr2h,c
  1333  000266  50DF               	movf	indf2,w,c
  1334  000268  6EAD               	movwf	4013,c	;volatile
  1335                           
  1336                           ; BSR set to: 1
  1337  00026A  2A38               	incf	writeMultipleCoils@i,f,c
  1338  00026C  D7EC               	goto	L4
  1339  00026E                     l301:
  1340                           
  1341                           ; BSR set to: 1
  1342                           ;modbus.c: 644: }
  1343                           ;modbus.c: 645: LATCbits.LATC1 = 0;
  1344  00026E  928B               	bcf	3979,1,c	;volatile
  1345                           
  1346                           ; BSR set to: 1
  1347                           ;modbus.c: 646: clearResponse();
  1348  000270  ECB4  F009         	call	_clearResponse	;wreg free
  1349  000274  0012               	return	
  1350  000276                     __end_of_writeMultipleCoils:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           prodh	equ	0xFF4
  1357                           prodl	equ	0xFF3
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           indf2	equ	0xFDF
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _writeMultipleRegs *****************
  1366 ;; Defined at:
  1367 ;;		line 253 in file "modbus.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  i               2   56[COMRAM] unsigned int 
  1372 ;;  crc             2   53[COMRAM] unsigned int 
  1373 ;;  valToWrite      2   51[COMRAM] unsigned int 
  1374 ;;  wmr_Address     2   49[COMRAM] unsigned int 
  1375 ;;  wmr_numBytes    2   47[COMRAM] unsigned int 
  1376 ;;  wmr_numRegsL    2   45[COMRAM] unsigned int 
  1377 ;;  wmr_numRegsH    2   43[COMRAM] unsigned int 
  1378 ;;  wmr_AddressL    2   41[COMRAM] unsigned int 
  1379 ;;  wmr_AddressH    2   39[COMRAM] unsigned int 
  1380 ;;  wmr_numRegs     2   37[COMRAM] unsigned int 
  1381 ;;  valToWriteLo    2   35[COMRAM] unsigned int 
  1382 ;;  valToWriteHi    2   33[COMRAM] unsigned int 
  1383 ;;  j               1   55[COMRAM] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;		None               void
  1386 ;; Registers used:
  1387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;Total ram usage:       29 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    3
  1400 ;; This function calls:
  1401 ;;		_clearResponse
  1402 ;;		_generateCRC
  1403 ;; This function is called by:
  1404 ;;		_decodeIt
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text3
  1409  000A9A                     __ptext3:
  1410                           	opt stack 0
  1411  000A9A                     _writeMultipleRegs:
  1412                           	opt stack 25
  1413                           
  1414                           ;modbus.c: 257: unsigned int wmr_Address = 0;
  1415                           
  1416                           ;incstack = 0
  1417                           ;incstack = 0
  1418  000A9A  0E00               	movlw	0
  1419  000A9C  6E33               	movwf	writeMultipleRegs@wmr_Address+1,c
  1420  000A9E  0E00               	movlw	0
  1421  000AA0  6E32               	movwf	writeMultipleRegs@wmr_Address,c
  1422                           
  1423                           ;modbus.c: 258: unsigned int wmr_AddressHigh = 0;
  1424  000AA2  0E00               	movlw	0
  1425  000AA4  6E29               	movwf	writeMultipleRegs@wmr_AddressHigh+1,c
  1426  000AA6  0E00               	movlw	0
  1427  000AA8  6E28               	movwf	writeMultipleRegs@wmr_AddressHigh,c
  1428                           
  1429                           ;modbus.c: 259: unsigned int wmr_AddressLow = 0;
  1430  000AAA  0E00               	movlw	0
  1431  000AAC  6E2B               	movwf	writeMultipleRegs@wmr_AddressLow+1,c
  1432  000AAE  0E00               	movlw	0
  1433  000AB0  6E2A               	movwf	writeMultipleRegs@wmr_AddressLow,c
  1434                           
  1435                           ;modbus.c: 260: unsigned int wmr_numRegs = 0;
  1436  000AB2  0E00               	movlw	0
  1437  000AB4  6E27               	movwf	writeMultipleRegs@wmr_numRegs+1,c
  1438  000AB6  0E00               	movlw	0
  1439  000AB8  6E26               	movwf	writeMultipleRegs@wmr_numRegs,c
  1440                           
  1441                           ;modbus.c: 261: unsigned int wmr_numRegsHigh = 0;
  1442  000ABA  0E00               	movlw	0
  1443  000ABC  6E2D               	movwf	writeMultipleRegs@wmr_numRegsHigh+1,c
  1444  000ABE  0E00               	movlw	0
  1445  000AC0  6E2C               	movwf	writeMultipleRegs@wmr_numRegsHigh,c
  1446                           
  1447                           ;modbus.c: 262: unsigned int wmr_numRegsLow = 0;
  1448  000AC2  0E00               	movlw	0
  1449  000AC4  6E2F               	movwf	writeMultipleRegs@wmr_numRegsLow+1,c
  1450  000AC6  0E00               	movlw	0
  1451  000AC8  6E2E               	movwf	writeMultipleRegs@wmr_numRegsLow,c
  1452                           
  1453                           ;modbus.c: 263: unsigned int wmr_numBytes = 0;
  1454  000ACA  0E00               	movlw	0
  1455  000ACC  6E31               	movwf	writeMultipleRegs@wmr_numBytes+1,c
  1456  000ACE  0E00               	movlw	0
  1457  000AD0  6E30               	movwf	writeMultipleRegs@wmr_numBytes,c
  1458                           
  1459                           ;modbus.c: 264: unsigned int valToWrite = 0;
  1460  000AD2  0E00               	movlw	0
  1461  000AD4  6E35               	movwf	writeMultipleRegs@valToWrite+1,c
  1462  000AD6  0E00               	movlw	0
  1463  000AD8  6E34               	movwf	writeMultipleRegs@valToWrite,c
  1464                           
  1465                           ;modbus.c: 265: unsigned int valToWriteHigh = 0;
  1466  000ADA  0E00               	movlw	0
  1467  000ADC  6E23               	movwf	writeMultipleRegs@valToWriteHigh+1,c
  1468  000ADE  0E00               	movlw	0
  1469  000AE0  6E22               	movwf	writeMultipleRegs@valToWriteHigh,c
  1470                           
  1471                           ;modbus.c: 266: unsigned int valToWriteLow = 0;
  1472  000AE2  0E00               	movlw	0
  1473  000AE4  6E25               	movwf	writeMultipleRegs@valToWriteLow+1,c
  1474  000AE6  0E00               	movlw	0
  1475  000AE8  6E24               	movwf	writeMultipleRegs@valToWriteLow,c
  1476                           
  1477                           ;modbus.c: 268: unsigned char j = 0;
  1478  000AEA  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1479  000AEC  0E00               	movlw	0
  1480  000AEE  6E38               	movwf	writeMultipleRegs@j,c
  1481  000AF0  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1482                           
  1483                           ;modbus.c: 269: unsigned int crc = 0;
  1484  000AF2  0E00               	movlw	0
  1485  000AF4  6E37               	movwf	writeMultipleRegs@crc+1,c
  1486  000AF6  0E00               	movlw	0
  1487  000AF8  6E36               	movwf	writeMultipleRegs@crc,c
  1488                           
  1489                           ;modbus.c: 270: unsigned int i = 0;
  1490  000AFA  0E00               	movlw	0
  1491  000AFC  6E3A               	movwf	writeMultipleRegs@i+1,c
  1492  000AFE  0E00               	movlw	0
  1493  000B00  6E39               	movwf	writeMultipleRegs@i,c
  1494                           
  1495                           ;modbus.c: 273: wmr_Address = received[2];
  1496  000B02  0100               	movlb	0	; () banked
  1497  000B04  C062  F032         	movff	_received+2,writeMultipleRegs@wmr_Address	;volatile
  1498  000B08  6A33               	clrf	writeMultipleRegs@wmr_Address+1,c
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;modbus.c: 274: wmr_Address <<= 8;
  1502  000B0A  5032               	movf	writeMultipleRegs@wmr_Address,w,c
  1503  000B0C  6E33               	movwf	writeMultipleRegs@wmr_Address+1,c
  1504  000B0E  6A32               	clrf	writeMultipleRegs@wmr_Address,c
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;modbus.c: 276: wmr_Address |= received[3];
  1508  000B10  0100               	movlb	0	; () banked
  1509  000B12  0100               	movlb	0	; () banked
  1510  000B14  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  1511  000B16  1232               	iorwf	writeMultipleRegs@wmr_Address,f,c
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;modbus.c: 277: wmr_AddressHigh = received[2];
  1515  000B18  0100               	movlb	0	; () banked
  1516  000B1A  C062  F028         	movff	_received+2,writeMultipleRegs@wmr_AddressHigh	;volatile
  1517  000B1E  6A29               	clrf	writeMultipleRegs@wmr_AddressHigh+1,c
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;modbus.c: 278: wmr_AddressLow = received[3];
  1521  000B20  0100               	movlb	0	; () banked
  1522  000B22  C063  F02A         	movff	_received+3,writeMultipleRegs@wmr_AddressLow	;volatile
  1523  000B26  6A2B               	clrf	writeMultipleRegs@wmr_AddressLow+1,c
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;modbus.c: 282: wmr_numRegs = received[4];
  1527  000B28  0100               	movlb	0	; () banked
  1528  000B2A  C064  F026         	movff	_received+4,writeMultipleRegs@wmr_numRegs	;volatile
  1529  000B2E  6A27               	clrf	writeMultipleRegs@wmr_numRegs+1,c
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;modbus.c: 283: wmr_numRegs <<= 8;
  1533  000B30  5026               	movf	writeMultipleRegs@wmr_numRegs,w,c
  1534  000B32  6E27               	movwf	writeMultipleRegs@wmr_numRegs+1,c
  1535  000B34  6A26               	clrf	writeMultipleRegs@wmr_numRegs,c
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;modbus.c: 284: wmr_numRegs |= received[5];
  1539  000B36  0100               	movlb	0	; () banked
  1540  000B38  0100               	movlb	0	; () banked
  1541  000B3A  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  1542  000B3C  1226               	iorwf	writeMultipleRegs@wmr_numRegs,f,c
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;modbus.c: 285: wmr_numRegsHigh = received[4];
  1546  000B3E  0100               	movlb	0	; () banked
  1547  000B40  C064  F02C         	movff	_received+4,writeMultipleRegs@wmr_numRegsHigh	;volatile
  1548  000B44  6A2D               	clrf	writeMultipleRegs@wmr_numRegsHigh+1,c
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;modbus.c: 286: wmr_numRegsLow = received[5];
  1552  000B46  0100               	movlb	0	; () banked
  1553  000B48  C065  F02E         	movff	_received+5,writeMultipleRegs@wmr_numRegsLow	;volatile
  1554  000B4C  6A2F               	clrf	writeMultipleRegs@wmr_numRegsLow+1,c
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;modbus.c: 288: wmr_numBytes = received[6];
  1558  000B4E  0100               	movlb	0	; () banked
  1559  000B50  C066  F030         	movff	_received+6,writeMultipleRegs@wmr_numBytes	;volatile
  1560  000B54  6A31               	clrf	writeMultipleRegs@wmr_numBytes+1,c
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;modbus.c: 290: j = 7;
  1564  000B56  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1565  000B58  0E07               	movlw	7
  1566  000B5A  6E38               	movwf	writeMultipleRegs@j,c
  1567  000B5C  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1568                           
  1569                           ;modbus.c: 292: for(i=0;i<wmr_numBytes;i++)
  1570  000B5E  0E00               	movlw	0
  1571  000B60  6E3A               	movwf	writeMultipleRegs@i+1,c
  1572  000B62  0E00               	movlw	0
  1573  000B64  6E39               	movwf	writeMultipleRegs@i,c
  1574  000B66  D03D               	goto	l2467
  1575  000B68                     l2453:
  1576                           
  1577                           ;modbus.c: 293: {
  1578                           ;modbus.c: 294: valToWrite = received[j];
  1579  000B68  5038               	movf	writeMultipleRegs@j,w,c
  1580  000B6A  0D01               	mullw	1
  1581  000B6C  0100               	movlb	0	; () banked
  1582  000B6E  0E60               	movlw	low _received	;volatile
  1583  000B70  24F3               	addwf	prodl,w,c
  1584  000B72  6ED9               	movwf	fsr2l,c
  1585  000B74  0100               	movlb	0	; () banked
  1586  000B76  0E00               	movlw	high _received	;volatile
  1587  000B78  20F4               	addwfc	prodh,w,c
  1588  000B7A  6EDA               	movwf	fsr2h,c
  1589  000B7C  50DF               	movf	indf2,w,c
  1590  000B7E  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1591  000B80  501E               	movf	??_writeMultipleRegs,w,c
  1592  000B82  6E34               	movwf	writeMultipleRegs@valToWrite,c
  1593  000B84  6A35               	clrf	writeMultipleRegs@valToWrite+1,c
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;modbus.c: 295: valToWrite <<= 8;
  1597  000B86  5034               	movf	writeMultipleRegs@valToWrite,w,c
  1598  000B88  6E35               	movwf	writeMultipleRegs@valToWrite+1,c
  1599  000B8A  6A34               	clrf	writeMultipleRegs@valToWrite,c
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;modbus.c: 296: j++;
  1603  000B8C  2A38               	incf	writeMultipleRegs@j,f,c
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;modbus.c: 297: valToWrite |= received[j];
  1607  000B8E  5038               	movf	writeMultipleRegs@j,w,c
  1608  000B90  0D01               	mullw	1
  1609  000B92  0100               	movlb	0	; () banked
  1610  000B94  0E60               	movlw	low _received	;volatile
  1611  000B96  24F3               	addwf	prodl,w,c
  1612  000B98  6ED9               	movwf	fsr2l,c
  1613  000B9A  0100               	movlb	0	; () banked
  1614  000B9C  0E00               	movlw	high _received	;volatile
  1615  000B9E  20F4               	addwfc	prodh,w,c
  1616  000BA0  6EDA               	movwf	fsr2h,c
  1617  000BA2  50DF               	movf	indf2,w,c
  1618  000BA4  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1619  000BA6  501E               	movf	??_writeMultipleRegs,w,c
  1620  000BA8  1234               	iorwf	writeMultipleRegs@valToWrite,f,c
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;modbus.c: 298: j++;
  1624  000BAA  2A38               	incf	writeMultipleRegs@j,f,c
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;modbus.c: 300: holdingReg[wmr_Address + i] = valToWrite;
  1628  000BAC  C032  F01E         	movff	writeMultipleRegs@wmr_Address,??_writeMultipleRegs
  1629  000BB0  C033  F01F         	movff	writeMultipleRegs@wmr_Address+1,??_writeMultipleRegs+1
  1630  000BB4  5039               	movf	writeMultipleRegs@i,w,c
  1631  000BB6  261E               	addwf	??_writeMultipleRegs,f,c
  1632  000BB8  503A               	movf	writeMultipleRegs@i+1,w,c
  1633  000BBA  221F               	addwfc	??_writeMultipleRegs+1,f,c
  1634  000BBC  90D8               	bcf	status,0,c
  1635  000BBE  341E               	rlcf	??_writeMultipleRegs,w,c
  1636  000BC0  6E20               	movwf	(??_writeMultipleRegs+2)& (0+255),c
  1637  000BC2  341F               	rlcf	??_writeMultipleRegs+1,w,c
  1638  000BC4  6E21               	movwf	(??_writeMultipleRegs+3)& (0+255),c
  1639  000BC6  0102               	movlb	2	; () banked
  1640  000BC8  0E00               	movlw	low _holdingReg	;volatile
  1641  000BCA  2420               	addwf	??_writeMultipleRegs+2,w,c
  1642  000BCC  6ED9               	movwf	fsr2l,c
  1643  000BCE  0102               	movlb	2	; () banked
  1644  000BD0  0E02               	movlw	high _holdingReg	;volatile
  1645  000BD2  2021               	addwfc	??_writeMultipleRegs+3,w,c
  1646  000BD4  6EDA               	movwf	fsr2h,c
  1647  000BD6  C034  FFDE         	movff	writeMultipleRegs@valToWrite,postinc2
  1648  000BDA  C035  FFDD         	movff	writeMultipleRegs@valToWrite+1,postdec2
  1649                           
  1650                           ; BSR set to: 2
  1651  000BDE  4A39               	infsnz	writeMultipleRegs@i,f,c
  1652  000BE0  2A3A               	incf	writeMultipleRegs@i+1,f,c
  1653  000BE2                     l2467:
  1654  000BE2  5030               	movf	writeMultipleRegs@wmr_numBytes,w,c
  1655  000BE4  5C39               	subwf	writeMultipleRegs@i,w,c
  1656  000BE6  5031               	movf	writeMultipleRegs@wmr_numBytes+1,w,c
  1657  000BE8  583A               	subwfb	writeMultipleRegs@i+1,w,c
  1658  000BEA  A0D8               	btfss	status,0,c
  1659  000BEC  D7BD               	goto	l2453
  1660                           
  1661                           ;modbus.c: 301: }
  1662                           ;modbus.c: 304: response[0] = 2;
  1663  000BEE  0E02               	movlw	2
  1664  000BF0  0101               	movlb	1	; () banked
  1665  000BF2  0101               	movlb	1	; () banked
  1666  000BF4  6F00               	movwf	_response& (0+255),b	;volatile
  1667                           
  1668                           ;modbus.c: 305: response[1] = 0x10;
  1669  000BF6  0E10               	movlw	16
  1670  000BF8  0101               	movlb	1	; () banked
  1671  000BFA  0101               	movlb	1	; () banked
  1672  000BFC  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  1673                           
  1674                           ; BSR set to: 1
  1675                           ;modbus.c: 306: response[2] = wmr_AddressHigh;
  1676  000BFE  C028  F102         	movff	writeMultipleRegs@wmr_AddressHigh,_response+2	;volatile
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;modbus.c: 307: response[3] = wmr_AddressLow;
  1680  000C02  C02A  F103         	movff	writeMultipleRegs@wmr_AddressLow,_response+3	;volatile
  1681                           
  1682                           ; BSR set to: 1
  1683                           ;modbus.c: 308: response[4] = wmr_numRegsHigh;
  1684  000C06  C02C  F104         	movff	writeMultipleRegs@wmr_numRegsHigh,_response+4	;volatile
  1685                           
  1686                           ; BSR set to: 1
  1687                           ;modbus.c: 309: response[5] = wmr_numRegsLow;
  1688  000C0A  C02E  F105         	movff	writeMultipleRegs@wmr_numRegsLow,_response+5	;volatile
  1689                           
  1690                           ; BSR set to: 1
  1691                           ;modbus.c: 311: crc = generateCRC(8);
  1692  000C0E  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1693  000C10  0E08               	movlw	8
  1694  000C12  6E0F               	movwf	?_generateCRC,c
  1695  000C14  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1696  000C16  EC9C  F008         	call	_generateCRC	;wreg free
  1697  000C1A  C00F  F036         	movff	?_generateCRC,writeMultipleRegs@crc
  1698  000C1E  C010  F037         	movff	?_generateCRC+1,writeMultipleRegs@crc+1
  1699                           
  1700                           ;modbus.c: 313: response[6] = crc >> 8;
  1701  000C22  5037               	movf	writeMultipleRegs@crc+1,w,c
  1702  000C24  0101               	movlb	1	; () banked
  1703  000C26  0101               	movlb	1	; () banked
  1704  000C28  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  1705                           
  1706                           ; BSR set to: 1
  1707                           ;modbus.c: 314: response[7] = crc;
  1708  000C2A  C036  F107         	movff	writeMultipleRegs@crc,_response+7	;volatile
  1709                           
  1710                           ; BSR set to: 1
  1711                           ;modbus.c: 316: LATCbits.LATC1 = 1;
  1712  000C2E  828B               	bsf	3979,1,c	;volatile
  1713                           
  1714                           ; BSR set to: 1
  1715                           ;modbus.c: 317: for(i=0;i!=9;i++){
  1716  000C30  0E00               	movlw	0
  1717  000C32  6E3A               	movwf	writeMultipleRegs@i+1,c
  1718  000C34  0E00               	movlw	0
  1719  000C36  6E39               	movwf	writeMultipleRegs@i,c
  1720  000C38                     
  1721                           ; BSR set to: 1
  1722  000C38  5039               	movf	writeMultipleRegs@i,w,c
  1723  000C3A  0A09               	xorlw	9
  1724  000C3C  103A               	iorwf	writeMultipleRegs@i+1,w,c
  1725  000C3E  B4D8               	btfsc	status,2,c
  1726  000C40  D00F               	goto	l223
  1727  000C42                     l224:
  1728  000C42  A2AC               	btfss	4012,1,c	;volatile
  1729  000C44  D7FE               	goto	l224
  1730                           
  1731                           ;modbus.c: 319: TXREG1 = response[i];
  1732  000C46  0101               	movlb	1	; () banked
  1733  000C48  0E00               	movlw	low _response	;volatile
  1734  000C4A  2439               	addwf	writeMultipleRegs@i,w,c
  1735  000C4C  6ED9               	movwf	fsr2l,c
  1736  000C4E  0101               	movlb	1	; () banked
  1737  000C50  0E01               	movlw	high _response	;volatile
  1738  000C52  203A               	addwfc	writeMultipleRegs@i+1,w,c
  1739  000C54  6EDA               	movwf	fsr2h,c
  1740  000C56  50DF               	movf	indf2,w,c
  1741  000C58  6EAD               	movwf	4013,c	;volatile
  1742                           
  1743                           ; BSR set to: 1
  1744  000C5A  4A39               	infsnz	writeMultipleRegs@i,f,c
  1745  000C5C  2A3A               	incf	writeMultipleRegs@i+1,f,c
  1746  000C5E  D7EC               	goto	L6
  1747  000C60                     l223:
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;modbus.c: 320: }
  1751                           ;modbus.c: 321: LATCbits.LATC1 = 0;
  1752  000C60  928B               	bcf	3979,1,c	;volatile
  1753                           
  1754                           ; BSR set to: 1
  1755                           ;modbus.c: 322: j=0;
  1756  000C62  6E1E               	movwf	??_writeMultipleRegs& (0+255),c
  1757  000C64  0E00               	movlw	0
  1758  000C66  6E38               	movwf	writeMultipleRegs@j,c
  1759  000C68  501E               	movf	??_writeMultipleRegs& (0+255),w,c
  1760                           
  1761                           ; BSR set to: 1
  1762                           ;modbus.c: 324: clearResponse();
  1763  000C6A  ECB4  F009         	call	_clearResponse	;wreg free
  1764  000C6E  0012               	return	
  1765  000C70                     __end_of_writeMultipleRegs:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           prodh	equ	0xFF4
  1772                           prodl	equ	0xFF3
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           indf2	equ	0xFDF
  1776                           postinc2	equ	0xFDE
  1777                           postdec2	equ	0xFDD
  1778                           fsr2h	equ	0xFDA
  1779                           fsr2l	equ	0xFD9
  1780                           status	equ	0xFD8
  1781                           
  1782 ;; *************** function _writeReg *****************
  1783 ;; Defined at:
  1784 ;;		line 196 in file "modbus.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  i               2   45[COMRAM] unsigned int 
  1789 ;;  crc             2   43[COMRAM] unsigned int 
  1790 ;;  wr_valToWrit    2   41[COMRAM] unsigned int 
  1791 ;;  wr_Address      2   39[COMRAM] unsigned int 
  1792 ;;  wr_valToWrit    2   37[COMRAM] unsigned int 
  1793 ;;  wr_valToWrit    2   35[COMRAM] unsigned int 
  1794 ;;  wr_AddressHi    2   33[COMRAM] unsigned int 
  1795 ;;  wr_AddressLo    2   31[COMRAM] unsigned int 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;		None               void
  1798 ;; Registers used:
  1799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:       18 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    3
  1812 ;; This function calls:
  1813 ;;		_clearResponse
  1814 ;;		_generateCRC
  1815 ;; This function is called by:
  1816 ;;		_decodeIt
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text4
  1821  000F0A                     __ptext4:
  1822                           	opt stack 0
  1823  000F0A                     _writeReg:
  1824                           	opt stack 25
  1825                           
  1826                           ;modbus.c: 200: unsigned int wr_AddressLow = 0;
  1827                           
  1828                           ;incstack = 0
  1829                           ;incstack = 0
  1830  000F0A  0E00               	movlw	0
  1831  000F0C  6E21               	movwf	writeReg@wr_AddressLow+1,c
  1832  000F0E  0E00               	movlw	0
  1833  000F10  6E20               	movwf	writeReg@wr_AddressLow,c
  1834                           
  1835                           ;modbus.c: 201: unsigned int wr_AddressHigh = 0;
  1836  000F12  0E00               	movlw	0
  1837  000F14  6E23               	movwf	writeReg@wr_AddressHigh+1,c
  1838  000F16  0E00               	movlw	0
  1839  000F18  6E22               	movwf	writeReg@wr_AddressHigh,c
  1840                           
  1841                           ;modbus.c: 202: unsigned int wr_Address = 0;
  1842  000F1A  0E00               	movlw	0
  1843  000F1C  6E29               	movwf	writeReg@wr_Address+1,c
  1844  000F1E  0E00               	movlw	0
  1845  000F20  6E28               	movwf	writeReg@wr_Address,c
  1846                           
  1847                           ;modbus.c: 204: unsigned int wr_valToWrite = 0;
  1848  000F22  0E00               	movlw	0
  1849  000F24  6E2B               	movwf	writeReg@wr_valToWrite+1,c
  1850  000F26  0E00               	movlw	0
  1851  000F28  6E2A               	movwf	writeReg@wr_valToWrite,c
  1852                           
  1853                           ;modbus.c: 205: unsigned int wr_valToWriteLow = 0;
  1854  000F2A  0E00               	movlw	0
  1855  000F2C  6E25               	movwf	writeReg@wr_valToWriteLow+1,c
  1856  000F2E  0E00               	movlw	0
  1857  000F30  6E24               	movwf	writeReg@wr_valToWriteLow,c
  1858                           
  1859                           ;modbus.c: 206: unsigned int wr_valToWriteHigh = 0;
  1860  000F32  0E00               	movlw	0
  1861  000F34  6E27               	movwf	writeReg@wr_valToWriteHigh+1,c
  1862  000F36  0E00               	movlw	0
  1863  000F38  6E26               	movwf	writeReg@wr_valToWriteHigh,c
  1864                           
  1865                           ;modbus.c: 208: unsigned int crc = 0;
  1866  000F3A  0E00               	movlw	0
  1867  000F3C  6E2D               	movwf	writeReg@crc+1,c
  1868  000F3E  0E00               	movlw	0
  1869  000F40  6E2C               	movwf	writeReg@crc,c
  1870                           
  1871                           ;modbus.c: 209: unsigned int i = 0;
  1872  000F42  0E00               	movlw	0
  1873  000F44  6E2F               	movwf	writeReg@i+1,c
  1874  000F46  0E00               	movlw	0
  1875  000F48  6E2E               	movwf	writeReg@i,c
  1876                           
  1877                           ;modbus.c: 212: wr_Address = received[2];
  1878  000F4A  0100               	movlb	0	; () banked
  1879  000F4C  C062  F028         	movff	_received+2,writeReg@wr_Address	;volatile
  1880  000F50  6A29               	clrf	writeReg@wr_Address+1,c
  1881                           
  1882                           ;modbus.c: 213: wr_Address <<= 8;
  1883  000F52  5028               	movf	writeReg@wr_Address,w,c
  1884  000F54  6E29               	movwf	writeReg@wr_Address+1,c
  1885  000F56  6A28               	clrf	writeReg@wr_Address,c
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;modbus.c: 214: wr_Address |= received[3];
  1889  000F58  0100               	movlb	0	; () banked
  1890  000F5A  0100               	movlb	0	; () banked
  1891  000F5C  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  1892  000F5E  1228               	iorwf	writeReg@wr_Address,f,c
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;modbus.c: 216: wr_AddressLow = received[3];
  1896  000F60  0100               	movlb	0	; () banked
  1897  000F62  C063  F020         	movff	_received+3,writeReg@wr_AddressLow	;volatile
  1898  000F66  6A21               	clrf	writeReg@wr_AddressLow+1,c
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;modbus.c: 217: wr_AddressHigh = received[2];
  1902  000F68  0100               	movlb	0	; () banked
  1903  000F6A  C062  F022         	movff	_received+2,writeReg@wr_AddressHigh	;volatile
  1904  000F6E  6A23               	clrf	writeReg@wr_AddressHigh+1,c
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;modbus.c: 220: wr_valToWrite = received[4];
  1908  000F70  0100               	movlb	0	; () banked
  1909  000F72  C064  F02A         	movff	_received+4,writeReg@wr_valToWrite	;volatile
  1910  000F76  6A2B               	clrf	writeReg@wr_valToWrite+1,c
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;modbus.c: 221: wr_valToWrite <<= 8;
  1914  000F78  502A               	movf	writeReg@wr_valToWrite,w,c
  1915  000F7A  6E2B               	movwf	writeReg@wr_valToWrite+1,c
  1916  000F7C  6A2A               	clrf	writeReg@wr_valToWrite,c
  1917                           
  1918                           ;modbus.c: 222: wr_valToWrite |= received[5];
  1919  000F7E  0100               	movlb	0	; () banked
  1920  000F80  0100               	movlb	0	; () banked
  1921  000F82  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  1922  000F84  122A               	iorwf	writeReg@wr_valToWrite,f,c
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;modbus.c: 224: wr_valToWriteLow = received[5];
  1926  000F86  0100               	movlb	0	; () banked
  1927  000F88  C065  F024         	movff	_received+5,writeReg@wr_valToWriteLow	;volatile
  1928  000F8C  6A25               	clrf	writeReg@wr_valToWriteLow+1,c
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;modbus.c: 225: wr_valToWriteHigh = received[4];
  1932  000F8E  0100               	movlb	0	; () banked
  1933  000F90  C064  F026         	movff	_received+4,writeReg@wr_valToWriteHigh	;volatile
  1934  000F94  6A27               	clrf	writeReg@wr_valToWriteHigh+1,c
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;modbus.c: 227: holdingReg[wr_Address] = wr_valToWrite;
  1938  000F96  90D8               	bcf	status,0,c
  1939  000F98  3428               	rlcf	writeReg@wr_Address,w,c
  1940  000F9A  6E1E               	movwf	??_writeReg& (0+255),c
  1941  000F9C  3429               	rlcf	writeReg@wr_Address+1,w,c
  1942  000F9E  6E1F               	movwf	(??_writeReg+1)& (0+255),c
  1943  000FA0  0102               	movlb	2	; () banked
  1944  000FA2  0E00               	movlw	low _holdingReg	;volatile
  1945  000FA4  241E               	addwf	??_writeReg,w,c
  1946  000FA6  6ED9               	movwf	fsr2l,c
  1947  000FA8  0102               	movlb	2	; () banked
  1948  000FAA  0E02               	movlw	high _holdingReg	;volatile
  1949  000FAC  201F               	addwfc	??_writeReg+1,w,c
  1950  000FAE  6EDA               	movwf	fsr2h,c
  1951  000FB0  C02A  FFDE         	movff	writeReg@wr_valToWrite,postinc2
  1952  000FB4  C02B  FFDD         	movff	writeReg@wr_valToWrite+1,postdec2
  1953                           
  1954                           ; BSR set to: 2
  1955                           ;modbus.c: 229: response[0] = 2;
  1956  000FB8  0E02               	movlw	2
  1957  000FBA  0101               	movlb	1	; () banked
  1958  000FBC  0101               	movlb	1	; () banked
  1959  000FBE  6F00               	movwf	_response& (0+255),b	;volatile
  1960                           
  1961                           ; BSR set to: 1
  1962                           ;modbus.c: 230: response[1] = 0x06;
  1963  000FC0  0E06               	movlw	6
  1964  000FC2  0101               	movlb	1	; () banked
  1965  000FC4  0101               	movlb	1	; () banked
  1966  000FC6  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  1967                           
  1968                           ; BSR set to: 1
  1969                           ;modbus.c: 231: response[3] = wr_AddressLow;
  1970  000FC8  C020  F103         	movff	writeReg@wr_AddressLow,_response+3	;volatile
  1971                           
  1972                           ; BSR set to: 1
  1973                           ;modbus.c: 232: response[2] = wr_AddressHigh;
  1974  000FCC  C022  F102         	movff	writeReg@wr_AddressHigh,_response+2	;volatile
  1975                           
  1976                           ; BSR set to: 1
  1977                           ;modbus.c: 235: response[4] = wr_valToWriteHigh;
  1978  000FD0  C026  F104         	movff	writeReg@wr_valToWriteHigh,_response+4	;volatile
  1979                           
  1980                           ; BSR set to: 1
  1981                           ;modbus.c: 236: response[5] = wr_valToWriteLow;
  1982  000FD4  C024  F105         	movff	writeReg@wr_valToWriteLow,_response+5	;volatile
  1983                           
  1984                           ; BSR set to: 1
  1985                           ;modbus.c: 238: crc = generateCRC(8);
  1986  000FD8  6E1E               	movwf	??_writeReg& (0+255),c
  1987  000FDA  0E08               	movlw	8
  1988  000FDC  6E0F               	movwf	?_generateCRC,c
  1989  000FDE  501E               	movf	??_writeReg& (0+255),w,c
  1990  000FE0  EC9C  F008         	call	_generateCRC	;wreg free
  1991  000FE4  C00F  F02C         	movff	?_generateCRC,writeReg@crc
  1992  000FE8  C010  F02D         	movff	?_generateCRC+1,writeReg@crc+1
  1993                           
  1994                           ;modbus.c: 240: response[6] = crc >> 8;
  1995  000FEC  502D               	movf	writeReg@crc+1,w,c
  1996  000FEE  0101               	movlb	1	; () banked
  1997  000FF0  0101               	movlb	1	; () banked
  1998  000FF2  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  1999                           
  2000                           ; BSR set to: 1
  2001                           ;modbus.c: 241: response[7] = crc;
  2002  000FF4  C02C  F107         	movff	writeReg@crc,_response+7	;volatile
  2003                           
  2004                           ; BSR set to: 1
  2005                           ;modbus.c: 243: LATCbits.LATC1 = 1;
  2006  000FF8  828B               	bsf	3979,1,c	;volatile
  2007                           
  2008                           ; BSR set to: 1
  2009                           ;modbus.c: 244: for(i=0;i!=9;i++){
  2010  000FFA  0E00               	movlw	0
  2011  000FFC  6E2F               	movwf	writeReg@i+1,c
  2012  000FFE  0E00               	movlw	0
  2013  001000  6E2E               	movwf	writeReg@i,c
  2014  001002                     
  2015                           ; BSR set to: 1
  2016  001002  502E               	movf	writeReg@i,w,c
  2017  001004  0A09               	xorlw	9
  2018  001006  102F               	iorwf	writeReg@i+1,w,c
  2019  001008  B4D8               	btfsc	status,2,c
  2020  00100A  D00F               	goto	l212
  2021  00100C                     l213:
  2022  00100C  A2AC               	btfss	4012,1,c	;volatile
  2023  00100E  D7FE               	goto	l213
  2024                           
  2025                           ;modbus.c: 246: TXREG1 = response[i];
  2026  001010  0101               	movlb	1	; () banked
  2027  001012  0E00               	movlw	low _response	;volatile
  2028  001014  242E               	addwf	writeReg@i,w,c
  2029  001016  6ED9               	movwf	fsr2l,c
  2030  001018  0101               	movlb	1	; () banked
  2031  00101A  0E01               	movlw	high _response	;volatile
  2032  00101C  202F               	addwfc	writeReg@i+1,w,c
  2033  00101E  6EDA               	movwf	fsr2h,c
  2034  001020  50DF               	movf	indf2,w,c
  2035  001022  6EAD               	movwf	4013,c	;volatile
  2036                           
  2037                           ; BSR set to: 1
  2038  001024  4A2E               	infsnz	writeReg@i,f,c
  2039  001026  2A2F               	incf	writeReg@i+1,f,c
  2040  001028  D7EC               	goto	L7
  2041  00102A                     l212:
  2042                           
  2043                           ; BSR set to: 1
  2044                           ;modbus.c: 247: }
  2045                           ;modbus.c: 248: LATCbits.LATC1 = 0;
  2046  00102A  928B               	bcf	3979,1,c	;volatile
  2047                           
  2048                           ; BSR set to: 1
  2049                           ;modbus.c: 249: clearResponse();
  2050  00102C  ECB4  F009         	call	_clearResponse	;wreg free
  2051  001030  0012               	return	
  2052  001032                     __end_of_writeReg:
  2053                           	opt stack 0
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           prodh	equ	0xFF4
  2059                           prodl	equ	0xFF3
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           indf2	equ	0xFDF
  2063                           postinc2	equ	0xFDE
  2064                           postdec2	equ	0xFDD
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _writeCoil *****************
  2070 ;; Defined at:
  2071 ;;		line 490 in file "modbus.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  i               2   44[COMRAM] int 
  2076 ;;  wc_Address      2   42[COMRAM] unsigned int 
  2077 ;;  crc             2   40[COMRAM] unsigned int 
  2078 ;;  wc_valToWrit    2   38[COMRAM] unsigned int 
  2079 ;;  wc_valToWrit    2   36[COMRAM] unsigned int 
  2080 ;;  wc_valToWrit    2   34[COMRAM] unsigned int 
  2081 ;;  wc_AddressHi    2   32[COMRAM] unsigned int 
  2082 ;;  wc_AddressLo    2   30[COMRAM] unsigned int 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;		None               void
  2085 ;; Registers used:
  2086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;Total ram usage:       17 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    3
  2099 ;; This function calls:
  2100 ;;		_clearResponse
  2101 ;;		_generateCRC
  2102 ;; This function is called by:
  2103 ;;		_decodeIt
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text5
  2108  000DD4                     __ptext5:
  2109                           	opt stack 0
  2110  000DD4                     _writeCoil:
  2111                           	opt stack 25
  2112                           
  2113                           ;modbus.c: 494: unsigned int wc_AddressLow = 0;
  2114                           
  2115                           ;incstack = 0
  2116                           ;incstack = 0
  2117  000DD4  0E00               	movlw	0
  2118  000DD6  6E20               	movwf	writeCoil@wc_AddressLow+1,c
  2119  000DD8  0E00               	movlw	0
  2120  000DDA  6E1F               	movwf	writeCoil@wc_AddressLow,c
  2121                           
  2122                           ;modbus.c: 495: unsigned int wc_AddressHigh = 0;
  2123  000DDC  0E00               	movlw	0
  2124  000DDE  6E22               	movwf	writeCoil@wc_AddressHigh+1,c
  2125  000DE0  0E00               	movlw	0
  2126  000DE2  6E21               	movwf	writeCoil@wc_AddressHigh,c
  2127                           
  2128                           ;modbus.c: 496: unsigned int wc_Address = 0;
  2129  000DE4  0E00               	movlw	0
  2130  000DE6  6E2C               	movwf	writeCoil@wc_Address+1,c
  2131  000DE8  0E00               	movlw	0
  2132  000DEA  6E2B               	movwf	writeCoil@wc_Address,c
  2133                           
  2134                           ;modbus.c: 498: unsigned int wc_valToWrite = 0;
  2135  000DEC  0E00               	movlw	0
  2136  000DEE  6E28               	movwf	writeCoil@wc_valToWrite+1,c
  2137  000DF0  0E00               	movlw	0
  2138  000DF2  6E27               	movwf	writeCoil@wc_valToWrite,c
  2139                           
  2140                           ;modbus.c: 499: unsigned int wc_valToWriteLow = 0;
  2141  000DF4  0E00               	movlw	0
  2142  000DF6  6E24               	movwf	writeCoil@wc_valToWriteLow+1,c
  2143  000DF8  0E00               	movlw	0
  2144  000DFA  6E23               	movwf	writeCoil@wc_valToWriteLow,c
  2145                           
  2146                           ;modbus.c: 500: unsigned int wc_valToWriteHigh = 0;
  2147  000DFC  0E00               	movlw	0
  2148  000DFE  6E26               	movwf	writeCoil@wc_valToWriteHigh+1,c
  2149  000E00  0E00               	movlw	0
  2150  000E02  6E25               	movwf	writeCoil@wc_valToWriteHigh,c
  2151                           
  2152                           ;modbus.c: 501: int i = 0;
  2153  000E04  0E00               	movlw	0
  2154  000E06  6E2E               	movwf	writeCoil@i+1,c
  2155  000E08  0E00               	movlw	0
  2156  000E0A  6E2D               	movwf	writeCoil@i,c
  2157                           
  2158                           ;modbus.c: 502: unsigned int crc = 0;
  2159  000E0C  0E00               	movlw	0
  2160  000E0E  6E2A               	movwf	writeCoil@crc+1,c
  2161  000E10  0E00               	movlw	0
  2162  000E12  6E29               	movwf	writeCoil@crc,c
  2163                           
  2164                           ;modbus.c: 505: wc_Address = received[2];
  2165  000E14  0100               	movlb	0	; () banked
  2166  000E16  C062  F02B         	movff	_received+2,writeCoil@wc_Address	;volatile
  2167  000E1A  6A2C               	clrf	writeCoil@wc_Address+1,c
  2168                           
  2169                           ;modbus.c: 506: wc_Address <<= 8;
  2170  000E1C  502B               	movf	writeCoil@wc_Address,w,c
  2171  000E1E  6E2C               	movwf	writeCoil@wc_Address+1,c
  2172  000E20  6A2B               	clrf	writeCoil@wc_Address,c
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;modbus.c: 507: wc_Address |= received[3];
  2176  000E22  0100               	movlb	0	; () banked
  2177  000E24  0100               	movlb	0	; () banked
  2178  000E26  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  2179  000E28  122B               	iorwf	writeCoil@wc_Address,f,c
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;modbus.c: 509: wc_AddressLow = received[3];
  2183  000E2A  0100               	movlb	0	; () banked
  2184  000E2C  C063  F01F         	movff	_received+3,writeCoil@wc_AddressLow	;volatile
  2185  000E30  6A20               	clrf	writeCoil@wc_AddressLow+1,c
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;modbus.c: 510: wc_AddressHigh = received[2];
  2189  000E32  0100               	movlb	0	; () banked
  2190  000E34  C062  F021         	movff	_received+2,writeCoil@wc_AddressHigh	;volatile
  2191  000E38  6A22               	clrf	writeCoil@wc_AddressHigh+1,c
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;modbus.c: 513: wc_valToWrite = received[4];
  2195  000E3A  0100               	movlb	0	; () banked
  2196  000E3C  C064  F027         	movff	_received+4,writeCoil@wc_valToWrite	;volatile
  2197  000E40  6A28               	clrf	writeCoil@wc_valToWrite+1,c
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;modbus.c: 514: wc_valToWrite <<= 8;
  2201  000E42  5027               	movf	writeCoil@wc_valToWrite,w,c
  2202  000E44  6E28               	movwf	writeCoil@wc_valToWrite+1,c
  2203  000E46  6A27               	clrf	writeCoil@wc_valToWrite,c
  2204                           
  2205                           ;modbus.c: 515: wc_valToWrite |= received[5];
  2206  000E48  0100               	movlb	0	; () banked
  2207  000E4A  0100               	movlb	0	; () banked
  2208  000E4C  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  2209  000E4E  1227               	iorwf	writeCoil@wc_valToWrite,f,c
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;modbus.c: 517: wc_valToWriteLow = received[5];
  2213  000E50  0100               	movlb	0	; () banked
  2214  000E52  C065  F023         	movff	_received+5,writeCoil@wc_valToWriteLow	;volatile
  2215  000E56  6A24               	clrf	writeCoil@wc_valToWriteLow+1,c
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;modbus.c: 518: wc_valToWriteHigh = received[4];
  2219  000E58  0100               	movlb	0	; () banked
  2220  000E5A  C064  F025         	movff	_received+4,writeCoil@wc_valToWriteHigh	;volatile
  2221  000E5E  6A26               	clrf	writeCoil@wc_valToWriteHigh+1,c
  2222                           
  2223                           ;modbus.c: 520: if(wc_valToWrite){
  2224  000E60  5028               	movf	writeCoil@wc_valToWrite+1,w,c
  2225  000E62  1027               	iorwf	writeCoil@wc_valToWrite,w,c
  2226  000E64  B4D8               	btfsc	status,2,c
  2227  000E66  D00A               	goto	l2331
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;modbus.c: 521: coils[wc_Address] = 0xFF;
  2231  000E68  0101               	movlb	1	; () banked
  2232  000E6A  0E7D               	movlw	low _coils	;volatile
  2233  000E6C  242B               	addwf	writeCoil@wc_Address,w,c
  2234  000E6E  6ED9               	movwf	fsr2l,c
  2235  000E70  0101               	movlb	1	; () banked
  2236  000E72  0E01               	movlw	high _coils	;volatile
  2237  000E74  202C               	addwfc	writeCoil@wc_Address+1,w,c
  2238  000E76  6EDA               	movwf	fsr2h,c
  2239  000E78  0EFF               	movlw	255
  2240  000E7A  D009               	goto	L8
  2241  000E7C                     l2331:
  2242                           
  2243                           ;modbus.c: 523: else{
  2244                           ;modbus.c: 524: coils[wc_Address] = 0x00;
  2245  000E7C  0101               	movlb	1	; () banked
  2246  000E7E  0E7D               	movlw	low _coils	;volatile
  2247  000E80  242B               	addwf	writeCoil@wc_Address,w,c
  2248  000E82  6ED9               	movwf	fsr2l,c
  2249  000E84  0101               	movlb	1	; () banked
  2250  000E86  0E01               	movlw	high _coils	;volatile
  2251  000E88  202C               	addwfc	writeCoil@wc_Address+1,w,c
  2252  000E8A  6EDA               	movwf	fsr2h,c
  2253  000E8C  0E00               	movlw	0
  2254  000E8E                     L8:
  2255  000E8E  6EDF               	movwf	indf2,c
  2256                           
  2257                           ; BSR set to: 1
  2258                           ;modbus.c: 525: }
  2259                           ;modbus.c: 527: response[0] = 2;
  2260                           
  2261                           ; BSR set to: 1
  2262  000E90  0E02               	movlw	2
  2263  000E92  0101               	movlb	1	; () banked
  2264  000E94  0101               	movlb	1	; () banked
  2265  000E96  6F00               	movwf	_response& (0+255),b	;volatile
  2266                           
  2267                           ; BSR set to: 1
  2268                           ;modbus.c: 528: response[1] = 0x02;
  2269  000E98  0E02               	movlw	2
  2270  000E9A  0101               	movlb	1	; () banked
  2271  000E9C  0101               	movlb	1	; () banked
  2272  000E9E  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  2273                           
  2274                           ; BSR set to: 1
  2275                           ;modbus.c: 529: response[3] = wc_AddressLow;
  2276  000EA0  C01F  F103         	movff	writeCoil@wc_AddressLow,_response+3	;volatile
  2277                           
  2278                           ; BSR set to: 1
  2279                           ;modbus.c: 530: response[2] = wc_AddressHigh;
  2280  000EA4  C021  F102         	movff	writeCoil@wc_AddressHigh,_response+2	;volatile
  2281                           
  2282                           ; BSR set to: 1
  2283                           ;modbus.c: 533: response[4] = wc_valToWriteHigh;
  2284  000EA8  C025  F104         	movff	writeCoil@wc_valToWriteHigh,_response+4	;volatile
  2285                           
  2286                           ; BSR set to: 1
  2287                           ;modbus.c: 534: response[5] = wc_valToWriteLow;
  2288  000EAC  C023  F105         	movff	writeCoil@wc_valToWriteLow,_response+5	;volatile
  2289                           
  2290                           ; BSR set to: 1
  2291                           ;modbus.c: 536: crc = generateCRC(8);
  2292  000EB0  6E1E               	movwf	??_writeCoil& (0+255),c
  2293  000EB2  0E08               	movlw	8
  2294  000EB4  6E0F               	movwf	?_generateCRC,c
  2295  000EB6  501E               	movf	??_writeCoil& (0+255),w,c
  2296  000EB8  EC9C  F008         	call	_generateCRC	;wreg free
  2297  000EBC  C00F  F029         	movff	?_generateCRC,writeCoil@crc
  2298  000EC0  C010  F02A         	movff	?_generateCRC+1,writeCoil@crc+1
  2299                           
  2300                           ;modbus.c: 538: response[6] = crc >> 8;
  2301  000EC4  502A               	movf	writeCoil@crc+1,w,c
  2302  000EC6  0101               	movlb	1	; () banked
  2303  000EC8  0101               	movlb	1	; () banked
  2304  000ECA  6F06               	movwf	(_response+6)& (0+255),b	;volatile
  2305                           
  2306                           ; BSR set to: 1
  2307                           ;modbus.c: 539: response[7] = crc;
  2308  000ECC  C029  F107         	movff	writeCoil@crc,_response+7	;volatile
  2309                           
  2310                           ; BSR set to: 1
  2311                           ;modbus.c: 541: LATCbits.LATC1 = 1;
  2312  000ED0  828B               	bsf	3979,1,c	;volatile
  2313                           
  2314                           ; BSR set to: 1
  2315                           ;modbus.c: 542: for(i=0;i!=9;i++){
  2316  000ED2  0E00               	movlw	0
  2317  000ED4  6E2E               	movwf	writeCoil@i+1,c
  2318  000ED6  0E00               	movlw	0
  2319  000ED8  6E2D               	movwf	writeCoil@i,c
  2320  000EDA                     
  2321                           ; BSR set to: 1
  2322  000EDA  502D               	movf	writeCoil@i,w,c
  2323  000EDC  0A09               	xorlw	9
  2324  000EDE  102E               	iorwf	writeCoil@i+1,w,c
  2325  000EE0  B4D8               	btfsc	status,2,c
  2326  000EE2  D00F               	goto	l279
  2327  000EE4                     l280:
  2328  000EE4  A2AC               	btfss	4012,1,c	;volatile
  2329  000EE6  D7FE               	goto	l280
  2330                           
  2331                           ;modbus.c: 544: TXREG1 = response[i];
  2332  000EE8  0101               	movlb	1	; () banked
  2333  000EEA  0E00               	movlw	low _response	;volatile
  2334  000EEC  242D               	addwf	writeCoil@i,w,c
  2335  000EEE  6ED9               	movwf	fsr2l,c
  2336  000EF0  0101               	movlb	1	; () banked
  2337  000EF2  0E01               	movlw	high _response	;volatile
  2338  000EF4  202E               	addwfc	writeCoil@i+1,w,c
  2339  000EF6  6EDA               	movwf	fsr2h,c
  2340  000EF8  50DF               	movf	indf2,w,c
  2341  000EFA  6EAD               	movwf	4013,c	;volatile
  2342                           
  2343                           ; BSR set to: 1
  2344  000EFC  4A2D               	infsnz	writeCoil@i,f,c
  2345  000EFE  2A2E               	incf	writeCoil@i+1,f,c
  2346  000F00  D7EC               	goto	L9
  2347  000F02                     l279:
  2348                           
  2349                           ; BSR set to: 1
  2350                           ;modbus.c: 545: }
  2351                           ;modbus.c: 546: LATCbits.LATC1 = 0;
  2352  000F02  928B               	bcf	3979,1,c	;volatile
  2353                           
  2354                           ; BSR set to: 1
  2355                           ;modbus.c: 547: clearResponse();
  2356  000F04  ECB4  F009         	call	_clearResponse	;wreg free
  2357  000F08  0012               	return	
  2358  000F0A                     __end_of_writeCoil:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           postinc0	equ	0xFEE
  2367                           wreg	equ	0xFE8
  2368                           indf2	equ	0xFDF
  2369                           postinc2	equ	0xFDE
  2370                           postdec2	equ	0xFDD
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _readInputReg *****************
  2376 ;; Defined at:
  2377 ;;		line 142 in file "modbus.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;		None
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;  i               2   39[COMRAM] unsigned int 
  2382 ;;  rr_numRegs      2   37[COMRAM] unsigned int 
  2383 ;;  rr_Address      2   35[COMRAM] unsigned int 
  2384 ;;  crc             2   33[COMRAM] unsigned int 
  2385 ;;  j               1   41[COMRAM] unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;		None               void
  2388 ;; Registers used:
  2389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;Total ram usage:       13 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:    3
  2402 ;; This function calls:
  2403 ;;		_clearResponse
  2404 ;;		_generateCRC
  2405 ;; This function is called by:
  2406 ;;		_decodeIt
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text6
  2411  0006CA                     __ptext6:
  2412                           	opt stack 0
  2413  0006CA                     _readInputReg:
  2414                           	opt stack 25
  2415                           
  2416                           ;modbus.c: 143: unsigned int rr_Address = 0;
  2417                           
  2418                           ;incstack = 0
  2419                           ;incstack = 0
  2420  0006CA  0E00               	movlw	0
  2421  0006CC  6E25               	movwf	readInputReg@rr_Address+1,c
  2422  0006CE  0E00               	movlw	0
  2423  0006D0  6E24               	movwf	readInputReg@rr_Address,c
  2424                           
  2425                           ;modbus.c: 144: unsigned int rr_numRegs = 0;
  2426  0006D2  0E00               	movlw	0
  2427  0006D4  6E27               	movwf	readInputReg@rr_numRegs+1,c
  2428  0006D6  0E00               	movlw	0
  2429  0006D8  6E26               	movwf	readInputReg@rr_numRegs,c
  2430                           
  2431                           ;modbus.c: 145: unsigned char j = 3;
  2432  0006DA  6E1E               	movwf	??_readInputReg& (0+255),c
  2433  0006DC  0E03               	movlw	3
  2434  0006DE  6E2A               	movwf	readInputReg@j,c
  2435  0006E0  501E               	movf	??_readInputReg& (0+255),w,c
  2436                           
  2437                           ;modbus.c: 146: unsigned int crc = 0;
  2438  0006E2  0E00               	movlw	0
  2439  0006E4  6E23               	movwf	readInputReg@crc+1,c
  2440  0006E6  0E00               	movlw	0
  2441  0006E8  6E22               	movwf	readInputReg@crc,c
  2442                           
  2443                           ;modbus.c: 147: unsigned int i = 0;
  2444  0006EA  0E00               	movlw	0
  2445  0006EC  6E29               	movwf	readInputReg@i+1,c
  2446  0006EE  0E00               	movlw	0
  2447  0006F0  6E28               	movwf	readInputReg@i,c
  2448                           
  2449                           ;modbus.c: 150: rr_Address = received[2];
  2450  0006F2  0100               	movlb	0	; () banked
  2451  0006F4  C062  F024         	movff	_received+2,readInputReg@rr_Address	;volatile
  2452  0006F8  6A25               	clrf	readInputReg@rr_Address+1,c
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;modbus.c: 151: rr_Address <<= 8;
  2456  0006FA  5024               	movf	readInputReg@rr_Address,w,c
  2457  0006FC  6E25               	movwf	readInputReg@rr_Address+1,c
  2458  0006FE  6A24               	clrf	readInputReg@rr_Address,c
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;modbus.c: 152: rr_Address |= received[3];
  2462  000700  0100               	movlb	0	; () banked
  2463  000702  0100               	movlb	0	; () banked
  2464  000704  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  2465  000706  1224               	iorwf	readInputReg@rr_Address,f,c
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;modbus.c: 155: rr_numRegs = received[4];
  2469  000708  0100               	movlb	0	; () banked
  2470  00070A  C064  F026         	movff	_received+4,readInputReg@rr_numRegs	;volatile
  2471  00070E  6A27               	clrf	readInputReg@rr_numRegs+1,c
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;modbus.c: 156: rr_numRegs <<= 8;
  2475  000710  5026               	movf	readInputReg@rr_numRegs,w,c
  2476  000712  6E27               	movwf	readInputReg@rr_numRegs+1,c
  2477  000714  6A26               	clrf	readInputReg@rr_numRegs,c
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;modbus.c: 157: rr_numRegs |= received[5];
  2481  000716  0100               	movlb	0	; () banked
  2482  000718  0100               	movlb	0	; () banked
  2483  00071A  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  2484  00071C  1226               	iorwf	readInputReg@rr_numRegs,f,c
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;modbus.c: 159: response[0] = 2;
  2488  00071E  0E02               	movlw	2
  2489  000720  0101               	movlb	1	; () banked
  2490  000722  0101               	movlb	1	; () banked
  2491  000724  6F00               	movwf	_response& (0+255),b	;volatile
  2492                           
  2493                           ; BSR set to: 1
  2494                           ;modbus.c: 160: response[1] = 0x04;
  2495  000726  0E04               	movlw	4
  2496  000728  0101               	movlb	1	; () banked
  2497  00072A  0101               	movlb	1	; () banked
  2498  00072C  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  2499                           
  2500                           ; BSR set to: 1
  2501                           ;modbus.c: 161: response[2] = rr_numRegs*2;
  2502  00072E  5026               	movf	readInputReg@rr_numRegs,w,c
  2503  000730  2426               	addwf	readInputReg@rr_numRegs,w,c
  2504  000732  0101               	movlb	1	; () banked
  2505  000734  0101               	movlb	1	; () banked
  2506  000736  6F02               	movwf	(_response+2)& (0+255),b	;volatile
  2507                           
  2508                           ; BSR set to: 1
  2509                           ;modbus.c: 163: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2510  000738  C024  F028         	movff	readInputReg@rr_Address,readInputReg@i
  2511  00073C  C025  F029         	movff	readInputReg@rr_Address+1,readInputReg@i+1
  2512  000740  D060               	goto	l2285
  2513  000742                     l2267:
  2514                           
  2515                           ; BSR set to: 1
  2516                           ;modbus.c: 164: if(holdingReg[i] > 255){
  2517  000742  90D8               	bcf	status,0,c
  2518  000744  3428               	rlcf	readInputReg@i,w,c
  2519  000746  6E1E               	movwf	??_readInputReg& (0+255),c
  2520  000748  3429               	rlcf	readInputReg@i+1,w,c
  2521  00074A  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  2522  00074C  0102               	movlb	2	; () banked
  2523  00074E  0E00               	movlw	low _holdingReg	;volatile
  2524  000750  241E               	addwf	??_readInputReg,w,c
  2525  000752  6ED9               	movwf	fsr2l,c
  2526  000754  0102               	movlb	2	; () banked
  2527  000756  0E02               	movlw	high _holdingReg	;volatile
  2528  000758  201F               	addwfc	??_readInputReg+1,w,c
  2529  00075A  6EDA               	movwf	fsr2h,c
  2530  00075C  CFDE F020          	movff	postinc2,??_readInputReg+2
  2531  000760  CFDD F021          	movff	postdec2,??_readInputReg+3
  2532  000764  0E00               	movlw	0
  2533  000766  5C20               	subwf	??_readInputReg+2,w,c
  2534  000768  0E01               	movlw	1
  2535  00076A  5821               	subwfb	??_readInputReg+3,w,c
  2536  00076C  A0D8               	btfss	status,0,c
  2537  00076E  D020               	goto	l2275
  2538                           
  2539                           ; BSR set to: 2
  2540                           ;modbus.c: 166: response[j] = holdingReg[i] >> 8;
  2541  000770  502A               	movf	readInputReg@j,w,c
  2542  000772  0D01               	mullw	1
  2543  000774  0101               	movlb	1	; () banked
  2544  000776  0E00               	movlw	low _response	;volatile
  2545  000778  24F3               	addwf	prodl,w,c
  2546  00077A  6ED9               	movwf	fsr2l,c
  2547  00077C  0101               	movlb	1	; () banked
  2548  00077E  0E01               	movlw	high _response	;volatile
  2549  000780  20F4               	addwfc	prodh,w,c
  2550  000782  6EDA               	movwf	fsr2h,c
  2551  000784  90D8               	bcf	status,0,c
  2552  000786  3428               	rlcf	readInputReg@i,w,c
  2553  000788  6E1E               	movwf	??_readInputReg& (0+255),c
  2554  00078A  3429               	rlcf	readInputReg@i+1,w,c
  2555  00078C  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  2556  00078E  0102               	movlb	2	; () banked
  2557  000790  0E00               	movlw	low _holdingReg	;volatile
  2558  000792  241E               	addwf	??_readInputReg,w,c
  2559  000794  6EE1               	movwf	fsr1l,c
  2560  000796  0102               	movlb	2	; () banked
  2561  000798  0E02               	movlw	high _holdingReg	;volatile
  2562  00079A  201F               	addwfc	??_readInputReg+1,w,c
  2563  00079C  6EE2               	movwf	fsr1h,c
  2564  00079E  CFE6 F020          	movff	postinc1,??_readInputReg+2
  2565  0007A2  CFE5 F021          	movff	postdec1,??_readInputReg+3
  2566  0007A6  C021  F020         	movff	??_readInputReg+3,??_readInputReg+2
  2567  0007AA  6A21               	clrf	??_readInputReg+3,c
  2568  0007AC  5020               	movf	??_readInputReg+2,w,c
  2569  0007AE  D00B               	goto	L10
  2570  0007B0                     l2275:
  2571                           
  2572                           ;modbus.c: 171: else{
  2573                           ;modbus.c: 172: response[j] = 0x00;
  2574  0007B0  502A               	movf	readInputReg@j,w,c
  2575  0007B2  0D01               	mullw	1
  2576  0007B4  0101               	movlb	1	; () banked
  2577  0007B6  0E00               	movlw	low _response	;volatile
  2578  0007B8  24F3               	addwf	prodl,w,c
  2579  0007BA  6ED9               	movwf	fsr2l,c
  2580  0007BC  0101               	movlb	1	; () banked
  2581  0007BE  0E01               	movlw	high _response	;volatile
  2582  0007C0  20F4               	addwfc	prodh,w,c
  2583  0007C2  6EDA               	movwf	fsr2h,c
  2584  0007C4  0E00               	movlw	0
  2585  0007C6                     L10:
  2586  0007C6  6EDF               	movwf	indf2,c
  2587                           
  2588                           ; BSR set to: 1
  2589                           ;modbus.c: 173: j++;
  2590  0007C8  2A2A               	incf	readInputReg@j,f,c
  2591                           
  2592                           ; BSR set to: 1
  2593                           ;modbus.c: 174: response[j] = holdingReg[i];
  2594  0007CA  90D8               	bcf	status,0,c
  2595  0007CC  3428               	rlcf	readInputReg@i,w,c
  2596  0007CE  6E1E               	movwf	??_readInputReg& (0+255),c
  2597  0007D0  3429               	rlcf	readInputReg@i+1,w,c
  2598  0007D2  6E1F               	movwf	(??_readInputReg+1)& (0+255),c
  2599  0007D4  0102               	movlb	2	; () banked
  2600  0007D6  0E00               	movlw	low _holdingReg	;volatile
  2601  0007D8  241E               	addwf	??_readInputReg,w,c
  2602  0007DA  6ED9               	movwf	fsr2l,c
  2603  0007DC  0102               	movlb	2	; () banked
  2604  0007DE  0E02               	movlw	high _holdingReg	;volatile
  2605  0007E0  201F               	addwfc	??_readInputReg+1,w,c
  2606  0007E2  6EDA               	movwf	fsr2h,c
  2607  0007E4  502A               	movf	readInputReg@j,w,c
  2608  0007E6  0D01               	mullw	1
  2609  0007E8  0101               	movlb	1	; () banked
  2610  0007EA  0E00               	movlw	low _response	;volatile
  2611  0007EC  24F3               	addwf	prodl,w,c
  2612  0007EE  6EE1               	movwf	fsr1l,c
  2613  0007F0  0101               	movlb	1	; () banked
  2614  0007F2  0E01               	movlw	high _response	;volatile
  2615  0007F4  20F4               	addwfc	prodh,w,c
  2616  0007F6  6EE2               	movwf	fsr1h,c
  2617  0007F8  CFDF FFE7          	movff	indf2,indf1
  2618                           
  2619                           ; BSR set to: 1
  2620                           ;modbus.c: 175: j++;
  2621  0007FC  2A2A               	incf	readInputReg@j,f,c
  2622                           
  2623                           ; BSR set to: 1
  2624                           
  2625                           ; BSR set to: 1
  2626  0007FE  4A28               	infsnz	readInputReg@i,f,c
  2627  000800  2A29               	incf	readInputReg@i+1,f,c
  2628  000802                     l2285:
  2629                           
  2630                           ; BSR set to: 1
  2631  000802  C024  F01E         	movff	readInputReg@rr_Address,??_readInputReg
  2632  000806  C025  F01F         	movff	readInputReg@rr_Address+1,??_readInputReg+1
  2633  00080A  5026               	movf	readInputReg@rr_numRegs,w,c
  2634  00080C  261E               	addwf	??_readInputReg,f,c
  2635  00080E  5027               	movf	readInputReg@rr_numRegs+1,w,c
  2636  000810  221F               	addwfc	??_readInputReg+1,f,c
  2637  000812  501E               	movf	??_readInputReg,w,c
  2638  000814  5C28               	subwf	readInputReg@i,w,c
  2639  000816  501F               	movf	??_readInputReg+1,w,c
  2640  000818  5829               	subwfb	readInputReg@i+1,w,c
  2641  00081A  A0D8               	btfss	status,0,c
  2642  00081C  D792               	goto	l2267
  2643                           
  2644                           ; BSR set to: 1
  2645                           ;modbus.c: 176: }
  2646                           ;modbus.c: 177: }
  2647                           ;modbus.c: 178: crc = generateCRC(j+2);
  2648                           
  2649                           ; BSR set to: 1
  2650  00081E  502A               	movf	readInputReg@j,w,c
  2651  000820  0F02               	addlw	2
  2652  000822  6E0F               	movwf	?_generateCRC,c
  2653  000824  EC9C  F008         	call	_generateCRC	;wreg free
  2654  000828  C00F  F022         	movff	?_generateCRC,readInputReg@crc
  2655  00082C  C010  F023         	movff	?_generateCRC+1,readInputReg@crc+1
  2656                           
  2657                           ;modbus.c: 179: response[j] = crc >> 8;
  2658  000830  502A               	movf	readInputReg@j,w,c
  2659  000832  0D01               	mullw	1
  2660  000834  0101               	movlb	1	; () banked
  2661  000836  0E00               	movlw	low _response	;volatile
  2662  000838  24F3               	addwf	prodl,w,c
  2663  00083A  6ED9               	movwf	fsr2l,c
  2664  00083C  0101               	movlb	1	; () banked
  2665  00083E  0E01               	movlw	high _response	;volatile
  2666  000840  20F4               	addwfc	prodh,w,c
  2667  000842  6EDA               	movwf	fsr2h,c
  2668  000844  5023               	movf	readInputReg@crc+1,w,c
  2669  000846  6EDF               	movwf	indf2,c
  2670                           
  2671                           ; BSR set to: 1
  2672                           ;modbus.c: 180: j++;
  2673  000848  2A2A               	incf	readInputReg@j,f,c
  2674                           
  2675                           ; BSR set to: 1
  2676                           ;modbus.c: 181: response[j] = crc;
  2677  00084A  502A               	movf	readInputReg@j,w,c
  2678  00084C  0D01               	mullw	1
  2679  00084E  0101               	movlb	1	; () banked
  2680  000850  0E00               	movlw	low _response	;volatile
  2681  000852  24F3               	addwf	prodl,w,c
  2682  000854  6ED9               	movwf	fsr2l,c
  2683  000856  0101               	movlb	1	; () banked
  2684  000858  0E01               	movlw	high _response	;volatile
  2685  00085A  20F4               	addwfc	prodh,w,c
  2686  00085C  6EDA               	movwf	fsr2h,c
  2687  00085E  C022  FFDF         	movff	readInputReg@crc,indf2
  2688                           
  2689                           ; BSR set to: 1
  2690                           ;modbus.c: 182: j+=2;
  2691  000862  0E02               	movlw	2
  2692  000864  262A               	addwf	readInputReg@j,f,c
  2693                           
  2694                           ; BSR set to: 1
  2695                           ;modbus.c: 184: LATCbits.LATC1 = 1;
  2696  000866  828B               	bsf	3979,1,c	;volatile
  2697                           
  2698                           ; BSR set to: 1
  2699                           ;modbus.c: 185: for(i=0;i!=j;i++){
  2700  000868  0E00               	movlw	0
  2701  00086A  6E29               	movwf	readInputReg@i+1,c
  2702  00086C  0E00               	movlw	0
  2703  00086E  6E28               	movwf	readInputReg@i,c
  2704  000870  D00E               	goto	l2305
  2705  000872                     l204:
  2706  000872  A2AC               	btfss	4012,1,c	;volatile
  2707  000874  D7FE               	goto	l204
  2708                           
  2709                           ;modbus.c: 187: TXREG1 = response[i];
  2710  000876  0101               	movlb	1	; () banked
  2711  000878  0E00               	movlw	low _response	;volatile
  2712  00087A  2428               	addwf	readInputReg@i,w,c
  2713  00087C  6ED9               	movwf	fsr2l,c
  2714  00087E  0101               	movlb	1	; () banked
  2715  000880  0E01               	movlw	high _response	;volatile
  2716  000882  2029               	addwfc	readInputReg@i+1,w,c
  2717  000884  6EDA               	movwf	fsr2h,c
  2718  000886  50DF               	movf	indf2,w,c
  2719  000888  6EAD               	movwf	4013,c	;volatile
  2720                           
  2721                           ; BSR set to: 1
  2722  00088A  4A28               	infsnz	readInputReg@i,f,c
  2723  00088C  2A29               	incf	readInputReg@i+1,f,c
  2724  00088E                     l2305:
  2725                           
  2726                           ; BSR set to: 1
  2727  00088E  502A               	movf	readInputReg@j,w,c
  2728  000890  6E1E               	movwf	??_readInputReg& (0+255),c
  2729  000892  6A1F               	clrf	(??_readInputReg+1)& (0+255),c
  2730  000894  5029               	movf	readInputReg@i+1,w,c
  2731  000896  181F               	xorwf	??_readInputReg+1,w,c
  2732  000898  E102               	bnz	u1465
  2733  00089A  5028               	movf	readInputReg@i,w,c
  2734  00089C  181E               	xorwf	??_readInputReg,w,c
  2735  00089E                     u1465:
  2736  00089E  A4D8               	btfss	status,2,c
  2737  0008A0  D7E8               	goto	l204
  2738                           
  2739                           ; BSR set to: 1
  2740                           ;modbus.c: 188: }
  2741                           ;modbus.c: 189: LATCbits.LATC1 = 0;
  2742  0008A2  928B               	bcf	3979,1,c	;volatile
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;modbus.c: 190: j=0;
  2746  0008A4  6E1E               	movwf	??_readInputReg& (0+255),c
  2747  0008A6  0E00               	movlw	0
  2748  0008A8  6E2A               	movwf	readInputReg@j,c
  2749  0008AA  501E               	movf	??_readInputReg& (0+255),w,c
  2750                           
  2751                           ; BSR set to: 1
  2752                           ;modbus.c: 192: clearResponse();
  2753  0008AC  ECB4  F009         	call	_clearResponse	;wreg free
  2754  0008B0  0012               	return	
  2755  0008B2                     __end_of_readInputReg:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           prodh	equ	0xFF4
  2762                           prodl	equ	0xFF3
  2763                           postinc0	equ	0xFEE
  2764                           wreg	equ	0xFE8
  2765                           indf1	equ	0xFE7
  2766                           postinc1	equ	0xFE6
  2767                           postdec1	equ	0xFE5
  2768                           fsr1h	equ	0xFE2
  2769                           fsr1l	equ	0xFE1
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _readReg *****************
  2778 ;; Defined at:
  2779 ;;		line 88 in file "modbus.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;		None
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  i               2   39[COMRAM] unsigned int 
  2784 ;;  rr_numRegs      2   37[COMRAM] unsigned int 
  2785 ;;  rr_Address      2   35[COMRAM] unsigned int 
  2786 ;;  crc             2   33[COMRAM] unsigned int 
  2787 ;;  j               1   41[COMRAM] unsigned char 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;		None               void
  2790 ;; Registers used:
  2791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;Total ram usage:       13 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    3
  2804 ;; This function calls:
  2805 ;;		_clearResponse
  2806 ;;		_generateCRC
  2807 ;; This function is called by:
  2808 ;;		_decodeIt
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text7
  2813  0008B2                     __ptext7:
  2814                           	opt stack 0
  2815  0008B2                     _readReg:
  2816                           	opt stack 25
  2817                           
  2818                           ;modbus.c: 89: unsigned int rr_Address = 0;
  2819                           
  2820                           ;incstack = 0
  2821                           ;incstack = 0
  2822  0008B2  0E00               	movlw	0
  2823  0008B4  6E25               	movwf	readReg@rr_Address+1,c
  2824  0008B6  0E00               	movlw	0
  2825  0008B8  6E24               	movwf	readReg@rr_Address,c
  2826                           
  2827                           ;modbus.c: 90: unsigned int rr_numRegs = 0;
  2828  0008BA  0E00               	movlw	0
  2829  0008BC  6E27               	movwf	readReg@rr_numRegs+1,c
  2830  0008BE  0E00               	movlw	0
  2831  0008C0  6E26               	movwf	readReg@rr_numRegs,c
  2832                           
  2833                           ;modbus.c: 91: unsigned char j = 3;
  2834  0008C2  6E1E               	movwf	??_readReg& (0+255),c
  2835  0008C4  0E03               	movlw	3
  2836  0008C6  6E2A               	movwf	readReg@j,c
  2837  0008C8  501E               	movf	??_readReg& (0+255),w,c
  2838                           
  2839                           ;modbus.c: 92: unsigned int crc = 0;
  2840  0008CA  0E00               	movlw	0
  2841  0008CC  6E23               	movwf	readReg@crc+1,c
  2842  0008CE  0E00               	movlw	0
  2843  0008D0  6E22               	movwf	readReg@crc,c
  2844                           
  2845                           ;modbus.c: 93: unsigned int i = 0;
  2846  0008D2  0E00               	movlw	0
  2847  0008D4  6E29               	movwf	readReg@i+1,c
  2848  0008D6  0E00               	movlw	0
  2849  0008D8  6E28               	movwf	readReg@i,c
  2850                           
  2851                           ;modbus.c: 96: rr_Address = received[2];
  2852  0008DA  0100               	movlb	0	; () banked
  2853  0008DC  C062  F024         	movff	_received+2,readReg@rr_Address	;volatile
  2854  0008E0  6A25               	clrf	readReg@rr_Address+1,c
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;modbus.c: 97: rr_Address <<= 8;
  2858  0008E2  5024               	movf	readReg@rr_Address,w,c
  2859  0008E4  6E25               	movwf	readReg@rr_Address+1,c
  2860  0008E6  6A24               	clrf	readReg@rr_Address,c
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;modbus.c: 98: rr_Address |= received[3];
  2864  0008E8  0100               	movlb	0	; () banked
  2865  0008EA  0100               	movlb	0	; () banked
  2866  0008EC  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  2867  0008EE  1224               	iorwf	readReg@rr_Address,f,c
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;modbus.c: 101: rr_numRegs = received[4];
  2871  0008F0  0100               	movlb	0	; () banked
  2872  0008F2  C064  F026         	movff	_received+4,readReg@rr_numRegs	;volatile
  2873  0008F6  6A27               	clrf	readReg@rr_numRegs+1,c
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;modbus.c: 102: rr_numRegs <<= 8;
  2877  0008F8  5026               	movf	readReg@rr_numRegs,w,c
  2878  0008FA  6E27               	movwf	readReg@rr_numRegs+1,c
  2879  0008FC  6A26               	clrf	readReg@rr_numRegs,c
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;modbus.c: 103: rr_numRegs |= received[5];
  2883  0008FE  0100               	movlb	0	; () banked
  2884  000900  0100               	movlb	0	; () banked
  2885  000902  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  2886  000904  1226               	iorwf	readReg@rr_numRegs,f,c
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;modbus.c: 105: response[0] = 2;
  2890  000906  0E02               	movlw	2
  2891  000908  0101               	movlb	1	; () banked
  2892  00090A  0101               	movlb	1	; () banked
  2893  00090C  6F00               	movwf	_response& (0+255),b	;volatile
  2894                           
  2895                           ; BSR set to: 1
  2896                           ;modbus.c: 106: response[1] = 0x03;
  2897  00090E  0E03               	movlw	3
  2898  000910  0101               	movlb	1	; () banked
  2899  000912  0101               	movlb	1	; () banked
  2900  000914  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  2901                           
  2902                           ; BSR set to: 1
  2903                           ;modbus.c: 107: response[2] = rr_numRegs*2;
  2904  000916  5026               	movf	readReg@rr_numRegs,w,c
  2905  000918  2426               	addwf	readReg@rr_numRegs,w,c
  2906  00091A  0101               	movlb	1	; () banked
  2907  00091C  0101               	movlb	1	; () banked
  2908  00091E  6F02               	movwf	(_response+2)& (0+255),b	;volatile
  2909                           
  2910                           ; BSR set to: 1
  2911                           ;modbus.c: 109: for(i=rr_Address;i<(rr_Address + rr_numRegs);i++){
  2912  000920  C024  F028         	movff	readReg@rr_Address,readReg@i
  2913  000924  C025  F029         	movff	readReg@rr_Address+1,readReg@i+1
  2914  000928  D060               	goto	l2213
  2915  00092A                     l2195:
  2916                           
  2917                           ; BSR set to: 1
  2918                           ;modbus.c: 110: if(holdingReg[i] > 255){
  2919  00092A  90D8               	bcf	status,0,c
  2920  00092C  3428               	rlcf	readReg@i,w,c
  2921  00092E  6E1E               	movwf	??_readReg& (0+255),c
  2922  000930  3429               	rlcf	readReg@i+1,w,c
  2923  000932  6E1F               	movwf	(??_readReg+1)& (0+255),c
  2924  000934  0102               	movlb	2	; () banked
  2925  000936  0E00               	movlw	low _holdingReg	;volatile
  2926  000938  241E               	addwf	??_readReg,w,c
  2927  00093A  6ED9               	movwf	fsr2l,c
  2928  00093C  0102               	movlb	2	; () banked
  2929  00093E  0E02               	movlw	high _holdingReg	;volatile
  2930  000940  201F               	addwfc	??_readReg+1,w,c
  2931  000942  6EDA               	movwf	fsr2h,c
  2932  000944  CFDE F020          	movff	postinc2,??_readReg+2
  2933  000948  CFDD F021          	movff	postdec2,??_readReg+3
  2934  00094C  0E00               	movlw	0
  2935  00094E  5C20               	subwf	??_readReg+2,w,c
  2936  000950  0E01               	movlw	1
  2937  000952  5821               	subwfb	??_readReg+3,w,c
  2938  000954  A0D8               	btfss	status,0,c
  2939  000956  D020               	goto	l2203
  2940                           
  2941                           ; BSR set to: 2
  2942                           ;modbus.c: 112: response[j] = holdingReg[i] >> 8;
  2943  000958  502A               	movf	readReg@j,w,c
  2944  00095A  0D01               	mullw	1
  2945  00095C  0101               	movlb	1	; () banked
  2946  00095E  0E00               	movlw	low _response	;volatile
  2947  000960  24F3               	addwf	prodl,w,c
  2948  000962  6ED9               	movwf	fsr2l,c
  2949  000964  0101               	movlb	1	; () banked
  2950  000966  0E01               	movlw	high _response	;volatile
  2951  000968  20F4               	addwfc	prodh,w,c
  2952  00096A  6EDA               	movwf	fsr2h,c
  2953  00096C  90D8               	bcf	status,0,c
  2954  00096E  3428               	rlcf	readReg@i,w,c
  2955  000970  6E1E               	movwf	??_readReg& (0+255),c
  2956  000972  3429               	rlcf	readReg@i+1,w,c
  2957  000974  6E1F               	movwf	(??_readReg+1)& (0+255),c
  2958  000976  0102               	movlb	2	; () banked
  2959  000978  0E00               	movlw	low _holdingReg	;volatile
  2960  00097A  241E               	addwf	??_readReg,w,c
  2961  00097C  6EE1               	movwf	fsr1l,c
  2962  00097E  0102               	movlb	2	; () banked
  2963  000980  0E02               	movlw	high _holdingReg	;volatile
  2964  000982  201F               	addwfc	??_readReg+1,w,c
  2965  000984  6EE2               	movwf	fsr1h,c
  2966  000986  CFE6 F020          	movff	postinc1,??_readReg+2
  2967  00098A  CFE5 F021          	movff	postdec1,??_readReg+3
  2968  00098E  C021  F020         	movff	??_readReg+3,??_readReg+2
  2969  000992  6A21               	clrf	??_readReg+3,c
  2970  000994  5020               	movf	??_readReg+2,w,c
  2971  000996  D00B               	goto	L11
  2972  000998                     l2203:
  2973                           
  2974                           ;modbus.c: 117: else{
  2975                           ;modbus.c: 118: response[j] = 0x00;
  2976  000998  502A               	movf	readReg@j,w,c
  2977  00099A  0D01               	mullw	1
  2978  00099C  0101               	movlb	1	; () banked
  2979  00099E  0E00               	movlw	low _response	;volatile
  2980  0009A0  24F3               	addwf	prodl,w,c
  2981  0009A2  6ED9               	movwf	fsr2l,c
  2982  0009A4  0101               	movlb	1	; () banked
  2983  0009A6  0E01               	movlw	high _response	;volatile
  2984  0009A8  20F4               	addwfc	prodh,w,c
  2985  0009AA  6EDA               	movwf	fsr2h,c
  2986  0009AC  0E00               	movlw	0
  2987  0009AE                     L11:
  2988  0009AE  6EDF               	movwf	indf2,c
  2989                           
  2990                           ; BSR set to: 1
  2991                           ;modbus.c: 119: j++;
  2992  0009B0  2A2A               	incf	readReg@j,f,c
  2993                           
  2994                           ; BSR set to: 1
  2995                           ;modbus.c: 120: response[j] = holdingReg[i];
  2996  0009B2  90D8               	bcf	status,0,c
  2997  0009B4  3428               	rlcf	readReg@i,w,c
  2998  0009B6  6E1E               	movwf	??_readReg& (0+255),c
  2999  0009B8  3429               	rlcf	readReg@i+1,w,c
  3000  0009BA  6E1F               	movwf	(??_readReg+1)& (0+255),c
  3001  0009BC  0102               	movlb	2	; () banked
  3002  0009BE  0E00               	movlw	low _holdingReg	;volatile
  3003  0009C0  241E               	addwf	??_readReg,w,c
  3004  0009C2  6ED9               	movwf	fsr2l,c
  3005  0009C4  0102               	movlb	2	; () banked
  3006  0009C6  0E02               	movlw	high _holdingReg	;volatile
  3007  0009C8  201F               	addwfc	??_readReg+1,w,c
  3008  0009CA  6EDA               	movwf	fsr2h,c
  3009  0009CC  502A               	movf	readReg@j,w,c
  3010  0009CE  0D01               	mullw	1
  3011  0009D0  0101               	movlb	1	; () banked
  3012  0009D2  0E00               	movlw	low _response	;volatile
  3013  0009D4  24F3               	addwf	prodl,w,c
  3014  0009D6  6EE1               	movwf	fsr1l,c
  3015  0009D8  0101               	movlb	1	; () banked
  3016  0009DA  0E01               	movlw	high _response	;volatile
  3017  0009DC  20F4               	addwfc	prodh,w,c
  3018  0009DE  6EE2               	movwf	fsr1h,c
  3019  0009E0  CFDF FFE7          	movff	indf2,indf1
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;modbus.c: 121: j++;
  3023  0009E4  2A2A               	incf	readReg@j,f,c
  3024                           
  3025                           ; BSR set to: 1
  3026                           
  3027                           ; BSR set to: 1
  3028  0009E6  4A28               	infsnz	readReg@i,f,c
  3029  0009E8  2A29               	incf	readReg@i+1,f,c
  3030  0009EA                     l2213:
  3031                           
  3032                           ; BSR set to: 1
  3033  0009EA  C024  F01E         	movff	readReg@rr_Address,??_readReg
  3034  0009EE  C025  F01F         	movff	readReg@rr_Address+1,??_readReg+1
  3035  0009F2  5026               	movf	readReg@rr_numRegs,w,c
  3036  0009F4  261E               	addwf	??_readReg,f,c
  3037  0009F6  5027               	movf	readReg@rr_numRegs+1,w,c
  3038  0009F8  221F               	addwfc	??_readReg+1,f,c
  3039  0009FA  501E               	movf	??_readReg,w,c
  3040  0009FC  5C28               	subwf	readReg@i,w,c
  3041  0009FE  501F               	movf	??_readReg+1,w,c
  3042  000A00  5829               	subwfb	readReg@i+1,w,c
  3043  000A02  A0D8               	btfss	status,0,c
  3044  000A04  D792               	goto	l2195
  3045                           
  3046                           ; BSR set to: 1
  3047                           ;modbus.c: 122: }
  3048                           ;modbus.c: 123: }
  3049                           ;modbus.c: 124: crc = generateCRC(j+2);
  3050                           
  3051                           ; BSR set to: 1
  3052  000A06  502A               	movf	readReg@j,w,c
  3053  000A08  0F02               	addlw	2
  3054  000A0A  6E0F               	movwf	?_generateCRC,c
  3055  000A0C  EC9C  F008         	call	_generateCRC	;wreg free
  3056  000A10  C00F  F022         	movff	?_generateCRC,readReg@crc
  3057  000A14  C010  F023         	movff	?_generateCRC+1,readReg@crc+1
  3058                           
  3059                           ;modbus.c: 125: response[j] = crc >> 8;
  3060  000A18  502A               	movf	readReg@j,w,c
  3061  000A1A  0D01               	mullw	1
  3062  000A1C  0101               	movlb	1	; () banked
  3063  000A1E  0E00               	movlw	low _response	;volatile
  3064  000A20  24F3               	addwf	prodl,w,c
  3065  000A22  6ED9               	movwf	fsr2l,c
  3066  000A24  0101               	movlb	1	; () banked
  3067  000A26  0E01               	movlw	high _response	;volatile
  3068  000A28  20F4               	addwfc	prodh,w,c
  3069  000A2A  6EDA               	movwf	fsr2h,c
  3070  000A2C  5023               	movf	readReg@crc+1,w,c
  3071  000A2E  6EDF               	movwf	indf2,c
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;modbus.c: 126: j++;
  3075  000A30  2A2A               	incf	readReg@j,f,c
  3076                           
  3077                           ; BSR set to: 1
  3078                           ;modbus.c: 127: response[j] = crc;
  3079  000A32  502A               	movf	readReg@j,w,c
  3080  000A34  0D01               	mullw	1
  3081  000A36  0101               	movlb	1	; () banked
  3082  000A38  0E00               	movlw	low _response	;volatile
  3083  000A3A  24F3               	addwf	prodl,w,c
  3084  000A3C  6ED9               	movwf	fsr2l,c
  3085  000A3E  0101               	movlb	1	; () banked
  3086  000A40  0E01               	movlw	high _response	;volatile
  3087  000A42  20F4               	addwfc	prodh,w,c
  3088  000A44  6EDA               	movwf	fsr2h,c
  3089  000A46  C022  FFDF         	movff	readReg@crc,indf2
  3090                           
  3091                           ; BSR set to: 1
  3092                           ;modbus.c: 128: j+=2;
  3093  000A4A  0E02               	movlw	2
  3094  000A4C  262A               	addwf	readReg@j,f,c
  3095                           
  3096                           ; BSR set to: 1
  3097                           ;modbus.c: 130: LATCbits.LATC1 = 1;
  3098  000A4E  828B               	bsf	3979,1,c	;volatile
  3099                           
  3100                           ; BSR set to: 1
  3101                           ;modbus.c: 131: for(i=0;i!=j;i++){
  3102  000A50  0E00               	movlw	0
  3103  000A52  6E29               	movwf	readReg@i+1,c
  3104  000A54  0E00               	movlw	0
  3105  000A56  6E28               	movwf	readReg@i,c
  3106  000A58  D00E               	goto	l2233
  3107  000A5A                     l190:
  3108  000A5A  A2AC               	btfss	4012,1,c	;volatile
  3109  000A5C  D7FE               	goto	l190
  3110                           
  3111                           ;modbus.c: 133: TXREG1 = response[i];
  3112  000A5E  0101               	movlb	1	; () banked
  3113  000A60  0E00               	movlw	low _response	;volatile
  3114  000A62  2428               	addwf	readReg@i,w,c
  3115  000A64  6ED9               	movwf	fsr2l,c
  3116  000A66  0101               	movlb	1	; () banked
  3117  000A68  0E01               	movlw	high _response	;volatile
  3118  000A6A  2029               	addwfc	readReg@i+1,w,c
  3119  000A6C  6EDA               	movwf	fsr2h,c
  3120  000A6E  50DF               	movf	indf2,w,c
  3121  000A70  6EAD               	movwf	4013,c	;volatile
  3122                           
  3123                           ; BSR set to: 1
  3124  000A72  4A28               	infsnz	readReg@i,f,c
  3125  000A74  2A29               	incf	readReg@i+1,f,c
  3126  000A76                     l2233:
  3127                           
  3128                           ; BSR set to: 1
  3129  000A76  502A               	movf	readReg@j,w,c
  3130  000A78  6E1E               	movwf	??_readReg& (0+255),c
  3131  000A7A  6A1F               	clrf	(??_readReg+1)& (0+255),c
  3132  000A7C  5029               	movf	readReg@i+1,w,c
  3133  000A7E  181F               	xorwf	??_readReg+1,w,c
  3134  000A80  E102               	bnz	u1425
  3135  000A82  5028               	movf	readReg@i,w,c
  3136  000A84  181E               	xorwf	??_readReg,w,c
  3137  000A86                     u1425:
  3138  000A86  A4D8               	btfss	status,2,c
  3139  000A88  D7E8               	goto	l190
  3140                           
  3141                           ; BSR set to: 1
  3142                           ;modbus.c: 134: }
  3143                           ;modbus.c: 135: LATCbits.LATC1 = 0;
  3144  000A8A  928B               	bcf	3979,1,c	;volatile
  3145                           
  3146                           ; BSR set to: 1
  3147                           ;modbus.c: 136: j=0;
  3148  000A8C  6E1E               	movwf	??_readReg& (0+255),c
  3149  000A8E  0E00               	movlw	0
  3150  000A90  6E2A               	movwf	readReg@j,c
  3151  000A92  501E               	movf	??_readReg& (0+255),w,c
  3152                           
  3153                           ; BSR set to: 1
  3154                           ;modbus.c: 138: clearResponse();
  3155  000A94  ECB4  F009         	call	_clearResponse	;wreg free
  3156  000A98  0012               	return	
  3157  000A9A                     __end_of_readReg:
  3158                           	opt stack 0
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           postinc0	equ	0xFEE
  3166                           wreg	equ	0xFE8
  3167                           indf1	equ	0xFE7
  3168                           postinc1	equ	0xFE6
  3169                           postdec1	equ	0xFE5
  3170                           fsr1h	equ	0xFE2
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _readInputCoil *****************
  3180 ;; Defined at:
  3181 ;;		line 410 in file "modbus.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;  rc_numCoils     2   36[COMRAM] unsigned int 
  3186 ;;  crc             2   33[COMRAM] unsigned int 
  3187 ;;  rc_Address      2   31[COMRAM] unsigned int 
  3188 ;;  k               1   43[COMRAM] unsigned char 
  3189 ;;  j               1   42[COMRAM] unsigned char 
  3190 ;;  i               1   41[COMRAM] unsigned char 
  3191 ;;  lsb             1   40[COMRAM] unsigned char 
  3192 ;;  l               1   39[COMRAM] unsigned char 
  3193 ;;  howManyBytes    1   38[COMRAM] unsigned char 
  3194 ;;  remainder       1   35[COMRAM] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;Total ram usage:       15 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    3
  3211 ;; This function calls:
  3212 ;;		_clearResponse
  3213 ;;		_generateCRC
  3214 ;; This function is called by:
  3215 ;;		_decodeIt
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text8
  3220  000276                     __ptext8:
  3221                           	opt stack 0
  3222  000276                     _readInputCoil:
  3223                           	opt stack 25
  3224                           
  3225                           ;modbus.c: 414: unsigned int rc_Address = 0;
  3226                           
  3227                           ;incstack = 0
  3228                           ;incstack = 0
  3229  000276  0E00               	movlw	0
  3230  000278  6E21               	movwf	readInputCoil@rc_Address+1,c
  3231  00027A  0E00               	movlw	0
  3232  00027C  6E20               	movwf	readInputCoil@rc_Address,c
  3233                           
  3234                           ;modbus.c: 415: unsigned int rc_numCoils = 0;
  3235  00027E  0E00               	movlw	0
  3236  000280  6E26               	movwf	readInputCoil@rc_numCoils+1,c
  3237  000282  0E00               	movlw	0
  3238  000284  6E25               	movwf	readInputCoil@rc_numCoils,c
  3239                           
  3240                           ;modbus.c: 416: unsigned int crc = 0;
  3241  000286  0E00               	movlw	0
  3242  000288  6E23               	movwf	readInputCoil@crc+1,c
  3243  00028A  0E00               	movlw	0
  3244  00028C  6E22               	movwf	readInputCoil@crc,c
  3245                           
  3246                           ;modbus.c: 418: unsigned char howManyBytes = 0;
  3247  00028E  6E1E               	movwf	??_readInputCoil& (0+255),c
  3248  000290  0E00               	movlw	0
  3249  000292  6E27               	movwf	readInputCoil@howManyBytes,c
  3250  000294  501E               	movf	??_readInputCoil& (0+255),w,c
  3251                           
  3252                           ;modbus.c: 419: unsigned char remainder = 0;
  3253  000296  6E1E               	movwf	??_readInputCoil& (0+255),c
  3254  000298  0E00               	movlw	0
  3255  00029A  6E24               	movwf	readInputCoil@remainder,c
  3256  00029C  501E               	movf	??_readInputCoil& (0+255),w,c
  3257                           
  3258                           ;modbus.c: 420: unsigned char lsb = 0;
  3259  00029E  6E1E               	movwf	??_readInputCoil& (0+255),c
  3260  0002A0  0E00               	movlw	0
  3261  0002A2  6E29               	movwf	readInputCoil@lsb,c
  3262  0002A4  501E               	movf	??_readInputCoil& (0+255),w,c
  3263                           
  3264                           ;modbus.c: 421: unsigned char i,j,k,l = 0;
  3265  0002A6  6E1E               	movwf	??_readInputCoil& (0+255),c
  3266  0002A8  0E00               	movlw	0
  3267  0002AA  6E28               	movwf	readInputCoil@l,c
  3268  0002AC  501E               	movf	??_readInputCoil& (0+255),w,c
  3269                           
  3270                           ;modbus.c: 424: rc_Address = received[2];
  3271  0002AE  0100               	movlb	0	; () banked
  3272  0002B0  C062  F020         	movff	_received+2,readInputCoil@rc_Address	;volatile
  3273  0002B4  6A21               	clrf	readInputCoil@rc_Address+1,c
  3274                           
  3275                           ;modbus.c: 425: rc_Address <<=8;
  3276  0002B6  5020               	movf	readInputCoil@rc_Address,w,c
  3277  0002B8  6E21               	movwf	readInputCoil@rc_Address+1,c
  3278  0002BA  6A20               	clrf	readInputCoil@rc_Address,c
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;modbus.c: 426: rc_Address |= received[3];
  3282  0002BC  0100               	movlb	0	; () banked
  3283  0002BE  0100               	movlb	0	; () banked
  3284  0002C0  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  3285  0002C2  1220               	iorwf	readInputCoil@rc_Address,f,c
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;modbus.c: 429: rc_numCoils = received[4];
  3289  0002C4  0100               	movlb	0	; () banked
  3290  0002C6  C064  F025         	movff	_received+4,readInputCoil@rc_numCoils	;volatile
  3291  0002CA  6A26               	clrf	readInputCoil@rc_numCoils+1,c
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;modbus.c: 430: rc_numCoils <<= 8;
  3295  0002CC  5025               	movf	readInputCoil@rc_numCoils,w,c
  3296  0002CE  6E26               	movwf	readInputCoil@rc_numCoils+1,c
  3297  0002D0  6A25               	clrf	readInputCoil@rc_numCoils,c
  3298                           
  3299                           ;modbus.c: 431: rc_numCoils |= received[5];
  3300  0002D2  0100               	movlb	0	; () banked
  3301  0002D4  0100               	movlb	0	; () banked
  3302  0002D6  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  3303  0002D8  1225               	iorwf	readInputCoil@rc_numCoils,f,c
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;modbus.c: 433: response[0] = 2;
  3307  0002DA  0E02               	movlw	2
  3308  0002DC  0101               	movlb	1	; () banked
  3309  0002DE  0101               	movlb	1	; () banked
  3310  0002E0  6F00               	movwf	_response& (0+255),b	;volatile
  3311                           
  3312                           ; BSR set to: 1
  3313                           ;modbus.c: 434: response[1] = 0x02;
  3314  0002E2  0E02               	movlw	2
  3315  0002E4  0101               	movlb	1	; () banked
  3316  0002E6  0101               	movlb	1	; () banked
  3317  0002E8  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  3318                           
  3319                           ;modbus.c: 436: howManyBytes = rc_numCoils/8;
  3320  0002EA  C025  F01E         	movff	readInputCoil@rc_numCoils,??_readInputCoil
  3321  0002EE  C026  F01F         	movff	readInputCoil@rc_numCoils+1,??_readInputCoil+1
  3322  0002F2  90D8               	bcf	status,0,c
  3323  0002F4  321F               	rrcf	??_readInputCoil+1,f,c
  3324  0002F6  321E               	rrcf	??_readInputCoil,f,c
  3325  0002F8  90D8               	bcf	status,0,c
  3326  0002FA  321F               	rrcf	??_readInputCoil+1,f,c
  3327  0002FC  321E               	rrcf	??_readInputCoil,f,c
  3328  0002FE  90D8               	bcf	status,0,c
  3329  000300  321F               	rrcf	??_readInputCoil+1,f,c
  3330  000302  321E               	rrcf	??_readInputCoil,f,c
  3331  000304  501E               	movf	??_readInputCoil,w,c
  3332  000306  6E27               	movwf	readInputCoil@howManyBytes,c
  3333                           
  3334                           ;modbus.c: 437: remainder = rc_numCoils % 8;
  3335  000308  5025               	movf	readInputCoil@rc_numCoils,w,c
  3336  00030A  0B07               	andlw	7
  3337  00030C  6E24               	movwf	readInputCoil@remainder,c
  3338                           
  3339                           ; BSR set to: 1
  3340                           ;modbus.c: 439: if(remainder){
  3341  00030E  5024               	movf	readInputCoil@remainder,w,c
  3342  000310  A4D8               	btfss	status,2,c
  3343                           
  3344                           ; BSR set to: 1
  3345                           ;modbus.c: 440: howManyBytes += 1;
  3346  000312  2A27               	incf	readInputCoil@howManyBytes,f,c
  3347                           
  3348                           ; BSR set to: 1
  3349                           ;modbus.c: 441: }
  3350                           ;modbus.c: 442: response[2] = howManyBytes;
  3351                           
  3352                           ; BSR set to: 1
  3353  000314  C027  F102         	movff	readInputCoil@howManyBytes,_response+2	;volatile
  3354                           
  3355                           ; BSR set to: 1
  3356                           ;modbus.c: 444: l = rc_Address;
  3357  000318  C020  F028         	movff	readInputCoil@rc_Address,readInputCoil@l
  3358                           
  3359                           ; BSR set to: 1
  3360                           ;modbus.c: 445: k = 3;
  3361  00031C  6E1E               	movwf	??_readInputCoil& (0+255),c
  3362  00031E  0E03               	movlw	3
  3363  000320  6E2C               	movwf	readInputCoil@k,c
  3364  000322  501E               	movf	??_readInputCoil& (0+255),w,c
  3365                           
  3366                           ; BSR set to: 1
  3367                           ;modbus.c: 447: for(i=howManyBytes; i!=0; i--){
  3368  000324  C027  F02A         	movff	readInputCoil@howManyBytes,readInputCoil@i
  3369  000328  D06E               	goto	L15
  3370  00032A                     l2105:
  3371                           
  3372                           ;modbus.c: 448: if(i>1){
  3373  00032A  0E01               	movlw	1
  3374  00032C  642A               	cpfsgt	readInputCoil@i,c
  3375  00032E  D035               	goto	l2129
  3376                           
  3377                           ;modbus.c: 449: for(j=0;j!=8;j++){
  3378  000330  6E1E               	movwf	??_readInputCoil& (0+255),c
  3379  000332  0E00               	movlw	0
  3380  000334  6E2B               	movwf	readInputCoil@j,c
  3381  000336  501E               	movf	??_readInputCoil& (0+255),w,c
  3382  000338  502B               	movf	readInputCoil@j,w,c
  3383  00033A  0A08               	xorlw	8
  3384  00033C  B4D8               	btfsc	status,2,c
  3385  00033E  D061               	goto	l2145
  3386                           
  3387                           ;modbus.c: 450: if(coils[l]){
  3388  000340  5028               	movf	readInputCoil@l,w,c
  3389  000342  0D01               	mullw	1
  3390  000344  0101               	movlb	1	; () banked
  3391  000346  0E7D               	movlw	low _coils	;volatile
  3392  000348  24F3               	addwf	prodl,w,c
  3393  00034A  6ED9               	movwf	fsr2l,c
  3394  00034C  0101               	movlb	1	; () banked
  3395  00034E  0E01               	movlw	high _coils	;volatile
  3396  000350  20F4               	addwfc	prodh,w,c
  3397  000352  6EDA               	movwf	fsr2h,c
  3398  000354  50DF               	movf	indf2,w,c
  3399  000356  B4D8               	btfsc	status,2,c
  3400  000358  D003               	goto	l2117
  3401                           
  3402                           ; BSR set to: 1
  3403                           ;modbus.c: 451: lsb = 1;
  3404  00035A  6E1E               	movwf	??_readInputCoil& (0+255),c
  3405  00035C  0E01               	movlw	1
  3406  00035E  D002               	goto	L12
  3407  000360                     l2117:
  3408                           
  3409                           ; BSR set to: 1
  3410                           ;modbus.c: 453: else{
  3411                           ;modbus.c: 454: lsb = 0;
  3412  000360  6E1E               	movwf	??_readInputCoil& (0+255),c
  3413  000362  0E00               	movlw	0
  3414  000364                     L12:
  3415  000364  6E29               	movwf	readInputCoil@lsb,c
  3416  000366  501E               	movf	??_readInputCoil& (0+255),w,c
  3417                           
  3418                           ; BSR set to: 1
  3419                           ;modbus.c: 455: }
  3420                           ;modbus.c: 456: response[k] ^= (lsb << j);
  3421                           
  3422                           ; BSR set to: 1
  3423  000368  C02B  F01E         	movff	readInputCoil@j,??_readInputCoil
  3424  00036C  C029  F01F         	movff	readInputCoil@lsb,??_readInputCoil+1
  3425  000370  2A1E               	incf	??_readInputCoil,f,c
  3426  000372  D002               	goto	u1314
  3427  000374                     u1315:
  3428  000374  90D8               	bcf	status,0,c
  3429  000376  361F               	rlcf	??_readInputCoil+1,f,c
  3430  000378                     u1314:
  3431  000378  2E1E               	decfsz	??_readInputCoil,f,c
  3432  00037A  D7FC               	goto	u1315
  3433  00037C  502C               	movf	readInputCoil@k,w,c
  3434  00037E  0D01               	mullw	1
  3435  000380  0101               	movlb	1	; () banked
  3436  000382  0E00               	movlw	low _response	;volatile
  3437  000384  24F3               	addwf	prodl,w,c
  3438  000386  6ED9               	movwf	fsr2l,c
  3439  000388  0101               	movlb	1	; () banked
  3440  00038A  0E01               	movlw	high _response	;volatile
  3441  00038C  20F4               	addwfc	prodh,w,c
  3442  00038E  6EDA               	movwf	fsr2h,c
  3443  000390  501F               	movf	??_readInputCoil+1,w,c
  3444  000392  1ADF               	xorwf	indf2,f,c
  3445                           
  3446                           ; BSR set to: 1
  3447                           ;modbus.c: 457: l++;
  3448  000394  2A28               	incf	readInputCoil@l,f,c
  3449                           
  3450                           ; BSR set to: 1
  3451  000396  2A2B               	incf	readInputCoil@j,f,c
  3452  000398  D7CF               	goto	L13
  3453  00039A                     l2129:
  3454                           
  3455                           ;modbus.c: 461: else{
  3456                           ;modbus.c: 462: for(j=0;j!=remainder;j++){
  3457  00039A  6E1E               	movwf	??_readInputCoil& (0+255),c
  3458  00039C  0E00               	movlw	0
  3459  00039E  6E2B               	movwf	readInputCoil@j,c
  3460  0003A0  501E               	movf	??_readInputCoil& (0+255),w,c
  3461  0003A2  D02C               	goto	l2143
  3462  0003A4                     l2131:
  3463                           
  3464                           ;modbus.c: 463: if(coils[l]){
  3465  0003A4  5028               	movf	readInputCoil@l,w,c
  3466  0003A6  0D01               	mullw	1
  3467  0003A8  0101               	movlb	1	; () banked
  3468  0003AA  0E7D               	movlw	low _coils	;volatile
  3469  0003AC  24F3               	addwf	prodl,w,c
  3470  0003AE  6ED9               	movwf	fsr2l,c
  3471  0003B0  0101               	movlb	1	; () banked
  3472  0003B2  0E01               	movlw	high _coils	;volatile
  3473  0003B4  20F4               	addwfc	prodh,w,c
  3474  0003B6  6EDA               	movwf	fsr2h,c
  3475  0003B8  50DF               	movf	indf2,w,c
  3476  0003BA  B4D8               	btfsc	status,2,c
  3477  0003BC  D003               	goto	l2135
  3478                           
  3479                           ; BSR set to: 1
  3480                           ;modbus.c: 464: lsb = 1;
  3481  0003BE  6E1E               	movwf	??_readInputCoil& (0+255),c
  3482  0003C0  0E01               	movlw	1
  3483  0003C2  D002               	goto	L14
  3484  0003C4                     l2135:
  3485                           
  3486                           ; BSR set to: 1
  3487                           ;modbus.c: 466: else{
  3488                           ;modbus.c: 467: lsb = 0;
  3489  0003C4  6E1E               	movwf	??_readInputCoil& (0+255),c
  3490  0003C6  0E00               	movlw	0
  3491  0003C8                     L14:
  3492  0003C8  6E29               	movwf	readInputCoil@lsb,c
  3493  0003CA  501E               	movf	??_readInputCoil& (0+255),w,c
  3494                           
  3495                           ; BSR set to: 1
  3496                           ;modbus.c: 468: }
  3497                           ;modbus.c: 469: response[k] ^= (lsb << j);
  3498                           
  3499                           ; BSR set to: 1
  3500  0003CC  C02B  F01E         	movff	readInputCoil@j,??_readInputCoil
  3501  0003D0  C029  F01F         	movff	readInputCoil@lsb,??_readInputCoil+1
  3502  0003D4  2A1E               	incf	??_readInputCoil,f,c
  3503  0003D6  D002               	goto	u1344
  3504  0003D8                     u1345:
  3505  0003D8  90D8               	bcf	status,0,c
  3506  0003DA  361F               	rlcf	??_readInputCoil+1,f,c
  3507  0003DC                     u1344:
  3508  0003DC  2E1E               	decfsz	??_readInputCoil,f,c
  3509  0003DE  D7FC               	goto	u1345
  3510  0003E0  502C               	movf	readInputCoil@k,w,c
  3511  0003E2  0D01               	mullw	1
  3512  0003E4  0101               	movlb	1	; () banked
  3513  0003E6  0E00               	movlw	low _response	;volatile
  3514  0003E8  24F3               	addwf	prodl,w,c
  3515  0003EA  6ED9               	movwf	fsr2l,c
  3516  0003EC  0101               	movlb	1	; () banked
  3517  0003EE  0E01               	movlw	high _response	;volatile
  3518  0003F0  20F4               	addwfc	prodh,w,c
  3519  0003F2  6EDA               	movwf	fsr2h,c
  3520  0003F4  501F               	movf	??_readInputCoil+1,w,c
  3521  0003F6  1ADF               	xorwf	indf2,f,c
  3522                           
  3523                           ; BSR set to: 1
  3524                           ;modbus.c: 470: l++;
  3525  0003F8  2A28               	incf	readInputCoil@l,f,c
  3526                           
  3527                           ; BSR set to: 1
  3528  0003FA  2A2B               	incf	readInputCoil@j,f,c
  3529  0003FC                     l2143:
  3530  0003FC  5024               	movf	readInputCoil@remainder,w,c
  3531  0003FE  622B               	cpfseq	readInputCoil@j,c
  3532  000400  D7D1               	goto	l2131
  3533  000402                     l2145:
  3534                           
  3535                           ;modbus.c: 471: }
  3536                           ;modbus.c: 472: k++;
  3537  000402  2A2C               	incf	readInputCoil@k,f,c
  3538  000404  062A               	decf	readInputCoil@i,f,c
  3539  000406                     L15:
  3540  000406  662A               	tstfsz	readInputCoil@i,c
  3541  000408  D790               	goto	l2105
  3542                           
  3543                           ;modbus.c: 473: }
  3544                           ;modbus.c: 474: }
  3545                           ;modbus.c: 475: crc = generateCRC(k+2);
  3546  00040A  502C               	movf	readInputCoil@k,w,c
  3547  00040C  0F02               	addlw	2
  3548  00040E  6E0F               	movwf	?_generateCRC,c
  3549  000410  EC9C  F008         	call	_generateCRC	;wreg free
  3550  000414  C00F  F022         	movff	?_generateCRC,readInputCoil@crc
  3551  000418  C010  F023         	movff	?_generateCRC+1,readInputCoil@crc+1
  3552                           
  3553                           ;modbus.c: 477: response[k] = crc >> 8;
  3554  00041C  502C               	movf	readInputCoil@k,w,c
  3555  00041E  0D01               	mullw	1
  3556  000420  0101               	movlb	1	; () banked
  3557  000422  0E00               	movlw	low _response	;volatile
  3558  000424  24F3               	addwf	prodl,w,c
  3559  000426  6ED9               	movwf	fsr2l,c
  3560  000428  0101               	movlb	1	; () banked
  3561  00042A  0E01               	movlw	high _response	;volatile
  3562  00042C  20F4               	addwfc	prodh,w,c
  3563  00042E  6EDA               	movwf	fsr2h,c
  3564  000430  5023               	movf	readInputCoil@crc+1,w,c
  3565  000432  6EDF               	movwf	indf2,c
  3566                           
  3567                           ; BSR set to: 1
  3568                           ;modbus.c: 478: response[k+1] = crc;
  3569  000434  502C               	movf	readInputCoil@k,w,c
  3570  000436  6E1E               	movwf	??_readInputCoil& (0+255),c
  3571  000438  6A1F               	clrf	(??_readInputCoil+1)& (0+255),c
  3572  00043A  0E01               	movlw	1
  3573  00043C  261E               	addwf	??_readInputCoil,f,c
  3574  00043E  0E00               	movlw	0
  3575  000440  221F               	addwfc	??_readInputCoil+1,f,c
  3576  000442  0101               	movlb	1	; () banked
  3577  000444  0E00               	movlw	low _response	;volatile
  3578  000446  241E               	addwf	??_readInputCoil,w,c
  3579  000448  6ED9               	movwf	fsr2l,c
  3580  00044A  0101               	movlb	1	; () banked
  3581  00044C  0E01               	movlw	high _response	;volatile
  3582  00044E  201F               	addwfc	??_readInputCoil+1,w,c
  3583  000450  6EDA               	movwf	fsr2h,c
  3584  000452  C022  FFDF         	movff	readInputCoil@crc,indf2
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;modbus.c: 480: LATCbits.LATC1 = 1;
  3588  000456  828B               	bsf	3979,1,c	;volatile
  3589                           
  3590                           ; BSR set to: 1
  3591                           ;modbus.c: 481: for(i=0;i!=(k+3);i++){
  3592  000458  6E1E               	movwf	??_readInputCoil& (0+255),c
  3593  00045A  0E00               	movlw	0
  3594  00045C  6E2A               	movwf	readInputCoil@i,c
  3595  00045E  501E               	movf	??_readInputCoil& (0+255),w,c
  3596  000460  D00F               	goto	l2163
  3597  000462                     l269:
  3598  000462  A2AC               	btfss	4012,1,c	;volatile
  3599  000464  D7FE               	goto	l269
  3600                           
  3601                           ;modbus.c: 483: TXREG1 = response[i];
  3602  000466  502A               	movf	readInputCoil@i,w,c
  3603  000468  0D01               	mullw	1
  3604  00046A  0101               	movlb	1	; () banked
  3605  00046C  0E00               	movlw	low _response	;volatile
  3606  00046E  24F3               	addwf	prodl,w,c
  3607  000470  6ED9               	movwf	fsr2l,c
  3608  000472  0101               	movlb	1	; () banked
  3609  000474  0E01               	movlw	high _response	;volatile
  3610  000476  20F4               	addwfc	prodh,w,c
  3611  000478  6EDA               	movwf	fsr2h,c
  3612  00047A  50DF               	movf	indf2,w,c
  3613  00047C  6EAD               	movwf	4013,c	;volatile
  3614                           
  3615                           ; BSR set to: 1
  3616  00047E  2A2A               	incf	readInputCoil@i,f,c
  3617  000480                     l2163:
  3618                           
  3619                           ; BSR set to: 1
  3620  000480  502C               	movf	readInputCoil@k,w,c
  3621  000482  6E1E               	movwf	??_readInputCoil& (0+255),c
  3622  000484  6A1F               	clrf	(??_readInputCoil+1)& (0+255),c
  3623  000486  0E03               	movlw	3
  3624  000488  261E               	addwf	??_readInputCoil,f,c
  3625  00048A  0E00               	movlw	0
  3626  00048C  221F               	addwfc	??_readInputCoil+1,f,c
  3627  00048E  502A               	movf	readInputCoil@i,w,c
  3628  000490  181E               	xorwf	??_readInputCoil,w,c
  3629  000492  101F               	iorwf	??_readInputCoil+1,w,c
  3630  000494  A4D8               	btfss	status,2,c
  3631  000496  D7E5               	goto	l269
  3632                           
  3633                           ; BSR set to: 1
  3634                           ;modbus.c: 484: }
  3635                           ;modbus.c: 485: LATCbits.LATC1 = 0;
  3636  000498  928B               	bcf	3979,1,c	;volatile
  3637                           
  3638                           ; BSR set to: 1
  3639                           ;modbus.c: 486: clearResponse();
  3640  00049A  ECB4  F009         	call	_clearResponse	;wreg free
  3641  00049E  0012               	return	
  3642  0004A0                     __end_of_readInputCoil:
  3643                           	opt stack 0
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           prodh	equ	0xFF4
  3649                           prodl	equ	0xFF3
  3650                           postinc0	equ	0xFEE
  3651                           wreg	equ	0xFE8
  3652                           indf1	equ	0xFE7
  3653                           postinc1	equ	0xFE6
  3654                           postdec1	equ	0xFE5
  3655                           fsr1h	equ	0xFE2
  3656                           fsr1l	equ	0xFE1
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _readCoil *****************
  3665 ;; Defined at:
  3666 ;;		line 330 in file "modbus.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  rc_numCoils     2   36[COMRAM] unsigned int 
  3671 ;;  crc             2   33[COMRAM] unsigned int 
  3672 ;;  rc_Address      2   31[COMRAM] unsigned int 
  3673 ;;  k               1   43[COMRAM] unsigned char 
  3674 ;;  j               1   42[COMRAM] unsigned char 
  3675 ;;  i               1   41[COMRAM] unsigned char 
  3676 ;;  lsb             1   40[COMRAM] unsigned char 
  3677 ;;  l               1   39[COMRAM] unsigned char 
  3678 ;;  howManyBytes    1   38[COMRAM] unsigned char 
  3679 ;;  remainder       1   35[COMRAM] unsigned char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;		None               void
  3682 ;; Registers used:
  3683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:       15 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    3
  3696 ;; This function calls:
  3697 ;;		_clearResponse
  3698 ;;		_generateCRC
  3699 ;; This function is called by:
  3700 ;;		_decodeIt
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text9
  3705  0004A0                     __ptext9:
  3706                           	opt stack 0
  3707  0004A0                     _readCoil:
  3708                           	opt stack 25
  3709                           
  3710                           ;modbus.c: 334: unsigned int rc_Address = 0;
  3711                           
  3712                           ;incstack = 0
  3713                           ;incstack = 0
  3714  0004A0  0E00               	movlw	0
  3715  0004A2  6E21               	movwf	readCoil@rc_Address+1,c
  3716  0004A4  0E00               	movlw	0
  3717  0004A6  6E20               	movwf	readCoil@rc_Address,c
  3718                           
  3719                           ;modbus.c: 335: unsigned int rc_numCoils = 0;
  3720  0004A8  0E00               	movlw	0
  3721  0004AA  6E26               	movwf	readCoil@rc_numCoils+1,c
  3722  0004AC  0E00               	movlw	0
  3723  0004AE  6E25               	movwf	readCoil@rc_numCoils,c
  3724                           
  3725                           ;modbus.c: 336: unsigned int crc = 0;
  3726  0004B0  0E00               	movlw	0
  3727  0004B2  6E23               	movwf	readCoil@crc+1,c
  3728  0004B4  0E00               	movlw	0
  3729  0004B6  6E22               	movwf	readCoil@crc,c
  3730                           
  3731                           ;modbus.c: 338: unsigned char howManyBytes = 0;
  3732  0004B8  6E1E               	movwf	??_readCoil& (0+255),c
  3733  0004BA  0E00               	movlw	0
  3734  0004BC  6E27               	movwf	readCoil@howManyBytes,c
  3735  0004BE  501E               	movf	??_readCoil& (0+255),w,c
  3736                           
  3737                           ;modbus.c: 339: unsigned char remainder = 0;
  3738  0004C0  6E1E               	movwf	??_readCoil& (0+255),c
  3739  0004C2  0E00               	movlw	0
  3740  0004C4  6E24               	movwf	readCoil@remainder,c
  3741  0004C6  501E               	movf	??_readCoil& (0+255),w,c
  3742                           
  3743                           ;modbus.c: 340: unsigned char lsb = 0;
  3744  0004C8  6E1E               	movwf	??_readCoil& (0+255),c
  3745  0004CA  0E00               	movlw	0
  3746  0004CC  6E29               	movwf	readCoil@lsb,c
  3747  0004CE  501E               	movf	??_readCoil& (0+255),w,c
  3748                           
  3749                           ;modbus.c: 341: unsigned char i,j,k,l = 0;
  3750  0004D0  6E1E               	movwf	??_readCoil& (0+255),c
  3751  0004D2  0E00               	movlw	0
  3752  0004D4  6E28               	movwf	readCoil@l,c
  3753  0004D6  501E               	movf	??_readCoil& (0+255),w,c
  3754                           
  3755                           ;modbus.c: 344: rc_Address = received[2];
  3756  0004D8  0100               	movlb	0	; () banked
  3757  0004DA  C062  F020         	movff	_received+2,readCoil@rc_Address	;volatile
  3758  0004DE  6A21               	clrf	readCoil@rc_Address+1,c
  3759                           
  3760                           ;modbus.c: 345: rc_Address <<=8;
  3761  0004E0  5020               	movf	readCoil@rc_Address,w,c
  3762  0004E2  6E21               	movwf	readCoil@rc_Address+1,c
  3763  0004E4  6A20               	clrf	readCoil@rc_Address,c
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;modbus.c: 346: rc_Address |= received[3];
  3767  0004E6  0100               	movlb	0	; () banked
  3768  0004E8  0100               	movlb	0	; () banked
  3769  0004EA  5163               	movf	(_received+3)& (0+255),w,b	;volatile
  3770  0004EC  1220               	iorwf	readCoil@rc_Address,f,c
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;modbus.c: 349: rc_numCoils = received[4];
  3774  0004EE  0100               	movlb	0	; () banked
  3775  0004F0  C064  F025         	movff	_received+4,readCoil@rc_numCoils	;volatile
  3776  0004F4  6A26               	clrf	readCoil@rc_numCoils+1,c
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;modbus.c: 350: rc_numCoils <<= 8;
  3780  0004F6  5025               	movf	readCoil@rc_numCoils,w,c
  3781  0004F8  6E26               	movwf	readCoil@rc_numCoils+1,c
  3782  0004FA  6A25               	clrf	readCoil@rc_numCoils,c
  3783                           
  3784                           ;modbus.c: 351: rc_numCoils |= received[5];
  3785  0004FC  0100               	movlb	0	; () banked
  3786  0004FE  0100               	movlb	0	; () banked
  3787  000500  5165               	movf	(_received+5)& (0+255),w,b	;volatile
  3788  000502  1225               	iorwf	readCoil@rc_numCoils,f,c
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;modbus.c: 353: response[0] = 2;
  3792  000504  0E02               	movlw	2
  3793  000506  0101               	movlb	1	; () banked
  3794  000508  0101               	movlb	1	; () banked
  3795  00050A  6F00               	movwf	_response& (0+255),b	;volatile
  3796                           
  3797                           ; BSR set to: 1
  3798                           ;modbus.c: 354: response[1] = 0x01;
  3799  00050C  0E01               	movlw	1
  3800  00050E  0101               	movlb	1	; () banked
  3801  000510  0101               	movlb	1	; () banked
  3802  000512  6F01               	movwf	(_response+1)& (0+255),b	;volatile
  3803                           
  3804                           ;modbus.c: 356: howManyBytes = rc_numCoils/8;
  3805  000514  C025  F01E         	movff	readCoil@rc_numCoils,??_readCoil
  3806  000518  C026  F01F         	movff	readCoil@rc_numCoils+1,??_readCoil+1
  3807  00051C  90D8               	bcf	status,0,c
  3808  00051E  321F               	rrcf	??_readCoil+1,f,c
  3809  000520  321E               	rrcf	??_readCoil,f,c
  3810  000522  90D8               	bcf	status,0,c
  3811  000524  321F               	rrcf	??_readCoil+1,f,c
  3812  000526  321E               	rrcf	??_readCoil,f,c
  3813  000528  90D8               	bcf	status,0,c
  3814  00052A  321F               	rrcf	??_readCoil+1,f,c
  3815  00052C  321E               	rrcf	??_readCoil,f,c
  3816  00052E  501E               	movf	??_readCoil,w,c
  3817  000530  6E27               	movwf	readCoil@howManyBytes,c
  3818                           
  3819                           ;modbus.c: 357: remainder = rc_numCoils % 8;
  3820  000532  5025               	movf	readCoil@rc_numCoils,w,c
  3821  000534  0B07               	andlw	7
  3822  000536  6E24               	movwf	readCoil@remainder,c
  3823                           
  3824                           ; BSR set to: 1
  3825                           ;modbus.c: 359: if(remainder){
  3826  000538  5024               	movf	readCoil@remainder,w,c
  3827  00053A  A4D8               	btfss	status,2,c
  3828                           
  3829                           ; BSR set to: 1
  3830                           ;modbus.c: 360: howManyBytes += 1;
  3831  00053C  2A27               	incf	readCoil@howManyBytes,f,c
  3832                           
  3833                           ; BSR set to: 1
  3834                           ;modbus.c: 361: }
  3835                           ;modbus.c: 362: response[2] = howManyBytes;
  3836                           
  3837                           ; BSR set to: 1
  3838  00053E  C027  F102         	movff	readCoil@howManyBytes,_response+2	;volatile
  3839                           
  3840                           ; BSR set to: 1
  3841                           ;modbus.c: 364: l = rc_Address;
  3842  000542  C020  F028         	movff	readCoil@rc_Address,readCoil@l
  3843                           
  3844                           ; BSR set to: 1
  3845                           ;modbus.c: 365: k = 3;
  3846  000546  6E1E               	movwf	??_readCoil& (0+255),c
  3847  000548  0E03               	movlw	3
  3848  00054A  6E2C               	movwf	readCoil@k,c
  3849  00054C  501E               	movf	??_readCoil& (0+255),w,c
  3850                           
  3851                           ; BSR set to: 1
  3852                           ;modbus.c: 367: for(i=howManyBytes; i!=0; i--){
  3853  00054E  C027  F02A         	movff	readCoil@howManyBytes,readCoil@i
  3854  000552  D06E               	goto	L19
  3855  000554                     l2005:
  3856                           
  3857                           ;modbus.c: 368: if(i>1){
  3858  000554  0E01               	movlw	1
  3859  000556  642A               	cpfsgt	readCoil@i,c
  3860  000558  D035               	goto	l2029
  3861                           
  3862                           ;modbus.c: 369: for(j=0;j!=8;j++){
  3863  00055A  6E1E               	movwf	??_readCoil& (0+255),c
  3864  00055C  0E00               	movlw	0
  3865  00055E  6E2B               	movwf	readCoil@j,c
  3866  000560  501E               	movf	??_readCoil& (0+255),w,c
  3867  000562  502B               	movf	readCoil@j,w,c
  3868  000564  0A08               	xorlw	8
  3869  000566  B4D8               	btfsc	status,2,c
  3870  000568  D061               	goto	l2045
  3871                           
  3872                           ;modbus.c: 370: if(coils[l]){
  3873  00056A  5028               	movf	readCoil@l,w,c
  3874  00056C  0D01               	mullw	1
  3875  00056E  0101               	movlb	1	; () banked
  3876  000570  0E7D               	movlw	low _coils	;volatile
  3877  000572  24F3               	addwf	prodl,w,c
  3878  000574  6ED9               	movwf	fsr2l,c
  3879  000576  0101               	movlb	1	; () banked
  3880  000578  0E01               	movlw	high _coils	;volatile
  3881  00057A  20F4               	addwfc	prodh,w,c
  3882  00057C  6EDA               	movwf	fsr2h,c
  3883  00057E  50DF               	movf	indf2,w,c
  3884  000580  B4D8               	btfsc	status,2,c
  3885  000582  D003               	goto	l2017
  3886                           
  3887                           ; BSR set to: 1
  3888                           ;modbus.c: 371: lsb = 1;
  3889  000584  6E1E               	movwf	??_readCoil& (0+255),c
  3890  000586  0E01               	movlw	1
  3891  000588  D002               	goto	L16
  3892  00058A                     l2017:
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;modbus.c: 373: else{
  3896                           ;modbus.c: 374: lsb = 0;
  3897  00058A  6E1E               	movwf	??_readCoil& (0+255),c
  3898  00058C  0E00               	movlw	0
  3899  00058E                     L16:
  3900  00058E  6E29               	movwf	readCoil@lsb,c
  3901  000590  501E               	movf	??_readCoil& (0+255),w,c
  3902                           
  3903                           ; BSR set to: 1
  3904                           ;modbus.c: 375: }
  3905                           ;modbus.c: 376: response[k] ^= (lsb << j);
  3906                           
  3907                           ; BSR set to: 1
  3908  000592  C02B  F01E         	movff	readCoil@j,??_readCoil
  3909  000596  C029  F01F         	movff	readCoil@lsb,??_readCoil+1
  3910  00059A  2A1E               	incf	??_readCoil,f,c
  3911  00059C  D002               	goto	u1184
  3912  00059E                     u1185:
  3913  00059E  90D8               	bcf	status,0,c
  3914  0005A0  361F               	rlcf	??_readCoil+1,f,c
  3915  0005A2                     u1184:
  3916  0005A2  2E1E               	decfsz	??_readCoil,f,c
  3917  0005A4  D7FC               	goto	u1185
  3918  0005A6  502C               	movf	readCoil@k,w,c
  3919  0005A8  0D01               	mullw	1
  3920  0005AA  0101               	movlb	1	; () banked
  3921  0005AC  0E00               	movlw	low _response	;volatile
  3922  0005AE  24F3               	addwf	prodl,w,c
  3923  0005B0  6ED9               	movwf	fsr2l,c
  3924  0005B2  0101               	movlb	1	; () banked
  3925  0005B4  0E01               	movlw	high _response	;volatile
  3926  0005B6  20F4               	addwfc	prodh,w,c
  3927  0005B8  6EDA               	movwf	fsr2h,c
  3928  0005BA  501F               	movf	??_readCoil+1,w,c
  3929  0005BC  1ADF               	xorwf	indf2,f,c
  3930                           
  3931                           ; BSR set to: 1
  3932                           ;modbus.c: 377: l++;
  3933  0005BE  2A28               	incf	readCoil@l,f,c
  3934                           
  3935                           ; BSR set to: 1
  3936  0005C0  2A2B               	incf	readCoil@j,f,c
  3937  0005C2  D7CF               	goto	L17
  3938  0005C4                     l2029:
  3939                           
  3940                           ;modbus.c: 381: else{
  3941                           ;modbus.c: 382: for(j=0;j!=remainder;j++){
  3942  0005C4  6E1E               	movwf	??_readCoil& (0+255),c
  3943  0005C6  0E00               	movlw	0
  3944  0005C8  6E2B               	movwf	readCoil@j,c
  3945  0005CA  501E               	movf	??_readCoil& (0+255),w,c
  3946  0005CC  D02C               	goto	l2043
  3947  0005CE                     l2031:
  3948                           
  3949                           ;modbus.c: 383: if(coils[l]){
  3950  0005CE  5028               	movf	readCoil@l,w,c
  3951  0005D0  0D01               	mullw	1
  3952  0005D2  0101               	movlb	1	; () banked
  3953  0005D4  0E7D               	movlw	low _coils	;volatile
  3954  0005D6  24F3               	addwf	prodl,w,c
  3955  0005D8  6ED9               	movwf	fsr2l,c
  3956  0005DA  0101               	movlb	1	; () banked
  3957  0005DC  0E01               	movlw	high _coils	;volatile
  3958  0005DE  20F4               	addwfc	prodh,w,c
  3959  0005E0  6EDA               	movwf	fsr2h,c
  3960  0005E2  50DF               	movf	indf2,w,c
  3961  0005E4  B4D8               	btfsc	status,2,c
  3962  0005E6  D003               	goto	l2035
  3963                           
  3964                           ; BSR set to: 1
  3965                           ;modbus.c: 384: lsb = 1;
  3966  0005E8  6E1E               	movwf	??_readCoil& (0+255),c
  3967  0005EA  0E01               	movlw	1
  3968  0005EC  D002               	goto	L18
  3969  0005EE                     l2035:
  3970                           
  3971                           ; BSR set to: 1
  3972                           ;modbus.c: 386: else{
  3973                           ;modbus.c: 387: lsb = 0;
  3974  0005EE  6E1E               	movwf	??_readCoil& (0+255),c
  3975  0005F0  0E00               	movlw	0
  3976  0005F2                     L18:
  3977  0005F2  6E29               	movwf	readCoil@lsb,c
  3978  0005F4  501E               	movf	??_readCoil& (0+255),w,c
  3979                           
  3980                           ; BSR set to: 1
  3981                           ;modbus.c: 388: }
  3982                           ;modbus.c: 389: response[k] ^= (lsb << j);
  3983                           
  3984                           ; BSR set to: 1
  3985  0005F6  C02B  F01E         	movff	readCoil@j,??_readCoil
  3986  0005FA  C029  F01F         	movff	readCoil@lsb,??_readCoil+1
  3987  0005FE  2A1E               	incf	??_readCoil,f,c
  3988  000600  D002               	goto	u1214
  3989  000602                     u1215:
  3990  000602  90D8               	bcf	status,0,c
  3991  000604  361F               	rlcf	??_readCoil+1,f,c
  3992  000606                     u1214:
  3993  000606  2E1E               	decfsz	??_readCoil,f,c
  3994  000608  D7FC               	goto	u1215
  3995  00060A  502C               	movf	readCoil@k,w,c
  3996  00060C  0D01               	mullw	1
  3997  00060E  0101               	movlb	1	; () banked
  3998  000610  0E00               	movlw	low _response	;volatile
  3999  000612  24F3               	addwf	prodl,w,c
  4000  000614  6ED9               	movwf	fsr2l,c
  4001  000616  0101               	movlb	1	; () banked
  4002  000618  0E01               	movlw	high _response	;volatile
  4003  00061A  20F4               	addwfc	prodh,w,c
  4004  00061C  6EDA               	movwf	fsr2h,c
  4005  00061E  501F               	movf	??_readCoil+1,w,c
  4006  000620  1ADF               	xorwf	indf2,f,c
  4007                           
  4008                           ; BSR set to: 1
  4009                           ;modbus.c: 390: l++;
  4010  000622  2A28               	incf	readCoil@l,f,c
  4011                           
  4012                           ; BSR set to: 1
  4013  000624  2A2B               	incf	readCoil@j,f,c
  4014  000626                     l2043:
  4015  000626  5024               	movf	readCoil@remainder,w,c
  4016  000628  622B               	cpfseq	readCoil@j,c
  4017  00062A  D7D1               	goto	l2031
  4018  00062C                     l2045:
  4019                           
  4020                           ;modbus.c: 391: }
  4021                           ;modbus.c: 392: k++;
  4022  00062C  2A2C               	incf	readCoil@k,f,c
  4023  00062E  062A               	decf	readCoil@i,f,c
  4024  000630                     L19:
  4025  000630  662A               	tstfsz	readCoil@i,c
  4026  000632  D790               	goto	l2005
  4027                           
  4028                           ;modbus.c: 393: }
  4029                           ;modbus.c: 394: }
  4030                           ;modbus.c: 395: crc = generateCRC(k+2);
  4031  000634  502C               	movf	readCoil@k,w,c
  4032  000636  0F02               	addlw	2
  4033  000638  6E0F               	movwf	?_generateCRC,c
  4034  00063A  EC9C  F008         	call	_generateCRC	;wreg free
  4035  00063E  C00F  F022         	movff	?_generateCRC,readCoil@crc
  4036  000642  C010  F023         	movff	?_generateCRC+1,readCoil@crc+1
  4037                           
  4038                           ;modbus.c: 397: response[k] = crc >> 8;
  4039  000646  502C               	movf	readCoil@k,w,c
  4040  000648  0D01               	mullw	1
  4041  00064A  0101               	movlb	1	; () banked
  4042  00064C  0E00               	movlw	low _response	;volatile
  4043  00064E  24F3               	addwf	prodl,w,c
  4044  000650  6ED9               	movwf	fsr2l,c
  4045  000652  0101               	movlb	1	; () banked
  4046  000654  0E01               	movlw	high _response	;volatile
  4047  000656  20F4               	addwfc	prodh,w,c
  4048  000658  6EDA               	movwf	fsr2h,c
  4049  00065A  5023               	movf	readCoil@crc+1,w,c
  4050  00065C  6EDF               	movwf	indf2,c
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;modbus.c: 398: response[k+1] = crc;
  4054  00065E  502C               	movf	readCoil@k,w,c
  4055  000660  6E1E               	movwf	??_readCoil& (0+255),c
  4056  000662  6A1F               	clrf	(??_readCoil+1)& (0+255),c
  4057  000664  0E01               	movlw	1
  4058  000666  261E               	addwf	??_readCoil,f,c
  4059  000668  0E00               	movlw	0
  4060  00066A  221F               	addwfc	??_readCoil+1,f,c
  4061  00066C  0101               	movlb	1	; () banked
  4062  00066E  0E00               	movlw	low _response	;volatile
  4063  000670  241E               	addwf	??_readCoil,w,c
  4064  000672  6ED9               	movwf	fsr2l,c
  4065  000674  0101               	movlb	1	; () banked
  4066  000676  0E01               	movlw	high _response	;volatile
  4067  000678  201F               	addwfc	??_readCoil+1,w,c
  4068  00067A  6EDA               	movwf	fsr2h,c
  4069  00067C  C022  FFDF         	movff	readCoil@crc,indf2
  4070                           
  4071                           ; BSR set to: 1
  4072                           ;modbus.c: 400: LATCbits.LATC1 = 1;
  4073  000680  828B               	bsf	3979,1,c	;volatile
  4074                           
  4075                           ; BSR set to: 1
  4076                           ;modbus.c: 401: for(i=0;i!=(k+3);i++){
  4077  000682  6E1E               	movwf	??_readCoil& (0+255),c
  4078  000684  0E00               	movlw	0
  4079  000686  6E2A               	movwf	readCoil@i,c
  4080  000688  501E               	movf	??_readCoil& (0+255),w,c
  4081  00068A  D00F               	goto	l2063
  4082  00068C                     l246:
  4083  00068C  A2AC               	btfss	4012,1,c	;volatile
  4084  00068E  D7FE               	goto	l246
  4085                           
  4086                           ;modbus.c: 403: TXREG1 = response[i];
  4087  000690  502A               	movf	readCoil@i,w,c
  4088  000692  0D01               	mullw	1
  4089  000694  0101               	movlb	1	; () banked
  4090  000696  0E00               	movlw	low _response	;volatile
  4091  000698  24F3               	addwf	prodl,w,c
  4092  00069A  6ED9               	movwf	fsr2l,c
  4093  00069C  0101               	movlb	1	; () banked
  4094  00069E  0E01               	movlw	high _response	;volatile
  4095  0006A0  20F4               	addwfc	prodh,w,c
  4096  0006A2  6EDA               	movwf	fsr2h,c
  4097  0006A4  50DF               	movf	indf2,w,c
  4098  0006A6  6EAD               	movwf	4013,c	;volatile
  4099                           
  4100                           ; BSR set to: 1
  4101  0006A8  2A2A               	incf	readCoil@i,f,c
  4102  0006AA                     l2063:
  4103                           
  4104                           ; BSR set to: 1
  4105  0006AA  502C               	movf	readCoil@k,w,c
  4106  0006AC  6E1E               	movwf	??_readCoil& (0+255),c
  4107  0006AE  6A1F               	clrf	(??_readCoil+1)& (0+255),c
  4108  0006B0  0E03               	movlw	3
  4109  0006B2  261E               	addwf	??_readCoil,f,c
  4110  0006B4  0E00               	movlw	0
  4111  0006B6  221F               	addwfc	??_readCoil+1,f,c
  4112  0006B8  502A               	movf	readCoil@i,w,c
  4113  0006BA  181E               	xorwf	??_readCoil,w,c
  4114  0006BC  101F               	iorwf	??_readCoil+1,w,c
  4115  0006BE  A4D8               	btfss	status,2,c
  4116  0006C0  D7E5               	goto	l246
  4117                           
  4118                           ; BSR set to: 1
  4119                           ;modbus.c: 404: }
  4120                           ;modbus.c: 405: LATCbits.LATC1 = 0;
  4121  0006C2  928B               	bcf	3979,1,c	;volatile
  4122                           
  4123                           ; BSR set to: 1
  4124                           ;modbus.c: 406: clearResponse();
  4125  0006C4  ECB4  F009         	call	_clearResponse	;wreg free
  4126  0006C8  0012               	return	
  4127  0006CA                     __end_of_readCoil:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           indf1	equ	0xFE7
  4138                           postinc1	equ	0xFE6
  4139                           postdec1	equ	0xFE5
  4140                           fsr1h	equ	0xFE2
  4141                           fsr1l	equ	0xFE1
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           postdec2	equ	0xFDD
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _generateCRC *****************
  4150 ;; Defined at:
  4151 ;;		line 651 in file "modbus.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  messageLengt    1   14[COMRAM] unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  crc             2   27[COMRAM] unsigned int 
  4156 ;;  j               2   25[COMRAM] int 
  4157 ;;  i               2   23[COMRAM] int 
  4158 ;;  crcHigh         2   21[COMRAM] unsigned int 
  4159 ;;  crcLow          2   19[COMRAM] unsigned int 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  2   14[COMRAM] unsigned int 
  4162 ;; Registers used:
  4163 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;Total ram usage:       15 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    2
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_readReg
  4180 ;;		_readInputReg
  4181 ;;		_writeReg
  4182 ;;		_writeMultipleRegs
  4183 ;;		_readCoil
  4184 ;;		_readInputCoil
  4185 ;;		_writeCoil
  4186 ;;		_writeMultipleCoils
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text10
  4191  001138                     __ptext10:
  4192                           	opt stack 0
  4193  001138                     _generateCRC:
  4194                           	opt stack 25
  4195                           
  4196                           ;modbus.c: 652: unsigned int crc = 0xFFFF;
  4197                           
  4198                           ;incstack = 0
  4199                           ;incstack = 0
  4200  001138  681C               	setf	generateCRC@crc,c
  4201  00113A  681D               	setf	generateCRC@crc+1,c
  4202                           
  4203                           ;modbus.c: 653: unsigned int crcHigh = 0;
  4204  00113C  0E00               	movlw	0
  4205  00113E  6E17               	movwf	generateCRC@crcHigh+1,c
  4206  001140  0E00               	movlw	0
  4207  001142  6E16               	movwf	generateCRC@crcHigh,c
  4208                           
  4209                           ;modbus.c: 654: unsigned int crcLow = 0;
  4210  001144  0E00               	movlw	0
  4211  001146  6E15               	movwf	generateCRC@crcLow+1,c
  4212  001148  0E00               	movlw	0
  4213  00114A  6E14               	movwf	generateCRC@crcLow,c
  4214                           
  4215                           ;modbus.c: 655: int i,j = 0;
  4216  00114C  0E00               	movlw	0
  4217  00114E  6E1B               	movwf	generateCRC@j+1,c
  4218  001150  0E00               	movlw	0
  4219  001152  6E1A               	movwf	generateCRC@j,c
  4220                           
  4221                           ;modbus.c: 657: for(i=0;i<messageLength-2;i++){
  4222  001154  0E00               	movlw	0
  4223  001156  6E19               	movwf	generateCRC@i+1,c
  4224  001158  0E00               	movlw	0
  4225  00115A  6E18               	movwf	generateCRC@i,c
  4226  00115C  D027               	goto	l2645
  4227  00115E                     l2627:
  4228                           
  4229                           ;modbus.c: 658: crc ^= response[i];
  4230  00115E  0101               	movlb	1	; () banked
  4231  001160  0E00               	movlw	low _response	;volatile
  4232  001162  2418               	addwf	generateCRC@i,w,c
  4233  001164  6ED9               	movwf	fsr2l,c
  4234  001166  0101               	movlb	1	; () banked
  4235  001168  0E01               	movlw	high _response	;volatile
  4236  00116A  2019               	addwfc	generateCRC@i+1,w,c
  4237  00116C  6EDA               	movwf	fsr2h,c
  4238  00116E  50DF               	movf	indf2,w,c
  4239  001170  6E11               	movwf	??_generateCRC& (0+255),c
  4240  001172  5011               	movf	??_generateCRC,w,c
  4241  001174  1A1C               	xorwf	generateCRC@crc,f,c
  4242                           
  4243                           ; BSR set to: 1
  4244                           ;modbus.c: 659: for(j=8; j!=0; j--){
  4245  001176  0E00               	movlw	0
  4246  001178  6E1B               	movwf	generateCRC@j+1,c
  4247  00117A  0E08               	movlw	8
  4248  00117C  6E1A               	movwf	generateCRC@j,c
  4249  00117E                     
  4250                           ; BSR set to: 1
  4251  00117E  501B               	movf	generateCRC@j+1,w,c
  4252  001180  101A               	iorwf	generateCRC@j,w,c
  4253  001182  B4D8               	btfsc	status,2,c
  4254  001184  D011               	goto	l2643
  4255                           
  4256                           ;modbus.c: 660: if((crc & 0x0001) != 0){
  4257                           
  4258                           ; BSR set to: 1
  4259  001186  A01C               	btfss	generateCRC@crc,0,c
  4260  001188  D008               	goto	l2639
  4261                           
  4262                           ;modbus.c: 661: crc >>= 1;
  4263  00118A  90D8               	bcf	status,0,c
  4264  00118C  321D               	rrcf	generateCRC@crc+1,f,c
  4265  00118E  321C               	rrcf	generateCRC@crc,f,c
  4266                           
  4267                           ;modbus.c: 662: crc ^= 0xA001;
  4268  001190  0E01               	movlw	1
  4269  001192  1A1C               	xorwf	generateCRC@crc,f,c
  4270  001194  0EA0               	movlw	160
  4271  001196  1A1D               	xorwf	generateCRC@crc+1,f,c
  4272                           
  4273                           ;modbus.c: 663: }
  4274  001198  D003               	goto	l313
  4275  00119A                     l2639:
  4276                           
  4277                           ;modbus.c: 664: else{
  4278                           ;modbus.c: 665: crc >>= 1;
  4279  00119A  90D8               	bcf	status,0,c
  4280  00119C  321D               	rrcf	generateCRC@crc+1,f,c
  4281  00119E  321C               	rrcf	generateCRC@crc,f,c
  4282  0011A0                     l313:
  4283  0011A0  061A               	decf	generateCRC@j,f,c
  4284  0011A2  A0D8               	btfss	status,0,c
  4285  0011A4  061B               	decf	generateCRC@j+1,f,c
  4286  0011A6  D7EB               	goto	L20
  4287  0011A8                     l2643:
  4288  0011A8  4A18               	infsnz	generateCRC@i,f,c
  4289  0011AA  2A19               	incf	generateCRC@i+1,f,c
  4290  0011AC                     l2645:
  4291  0011AC  0EFE               	movlw	254
  4292  0011AE  240F               	addwf	generateCRC@messageLength,w,c
  4293  0011B0  6E11               	movwf	??_generateCRC& (0+255),c
  4294  0011B2  6A12               	clrf	(??_generateCRC+1)& (0+255),c
  4295  0011B4  0EFF               	movlw	255
  4296  0011B6  2212               	addwfc	(??_generateCRC+1)& (0+255),f,c
  4297  0011B8  5019               	movf	generateCRC@i+1,w,c
  4298  0011BA  0A80               	xorlw	128
  4299  0011BC  6E13               	movwf	(??_generateCRC+2)& (0+255),c
  4300  0011BE  5011               	movf	??_generateCRC,w,c
  4301  0011C0  5C18               	subwf	generateCRC@i,w,c
  4302  0011C2  5012               	movf	??_generateCRC+1,w,c
  4303  0011C4  0A80               	xorlw	128
  4304  0011C6  5813               	subwfb	(??_generateCRC+2)& (0+255),w,c
  4305  0011C8  A0D8               	btfss	status,0,c
  4306  0011CA  D7C9               	goto	l2627
  4307                           
  4308                           ;modbus.c: 666: }
  4309                           ;modbus.c: 667: }
  4310                           ;modbus.c: 668: }
  4311                           ;modbus.c: 670: crcHigh = (crc & 0x00FF) <<8;
  4312  0011CC  501C               	movf	generateCRC@crc,w,c
  4313  0011CE  6E12               	movwf	(??_generateCRC+1)& (0+255),c
  4314  0011D0  6A11               	clrf	??_generateCRC& (0+255),c
  4315  0011D2  C011  F016         	movff	??_generateCRC,generateCRC@crcHigh
  4316  0011D6  C012  F017         	movff	??_generateCRC+1,generateCRC@crcHigh+1
  4317                           
  4318                           ;modbus.c: 671: crcLow = (crc & 0xFF00) >>8;
  4319  0011DA  C01D  F011         	movff	generateCRC@crc+1,??_generateCRC
  4320  0011DE  C011  F012         	movff	??_generateCRC,??_generateCRC+1
  4321  0011E2  6A13               	clrf	(??_generateCRC+2)& (0+255),c
  4322  0011E4  5012               	movf	??_generateCRC+1,w,c
  4323  0011E6  6E14               	movwf	generateCRC@crcLow,c
  4324  0011E8  6A15               	clrf	generateCRC@crcLow+1,c
  4325                           
  4326                           ;modbus.c: 672: crcHigh |= crcLow;
  4327  0011EA  5014               	movf	generateCRC@crcLow,w,c
  4328  0011EC  1216               	iorwf	generateCRC@crcHigh,f,c
  4329  0011EE  5015               	movf	generateCRC@crcLow+1,w,c
  4330  0011F0  1217               	iorwf	generateCRC@crcHigh+1,f,c
  4331                           
  4332                           ;modbus.c: 673: crc = crcHigh;
  4333  0011F2  C016  F01C         	movff	generateCRC@crcHigh,generateCRC@crc
  4334  0011F6  C017  F01D         	movff	generateCRC@crcHigh+1,generateCRC@crc+1
  4335                           
  4336                           ;modbus.c: 674: return crc;
  4337  0011FA  C01C  F00F         	movff	generateCRC@crc,?_generateCRC
  4338  0011FE  C01D  F010         	movff	generateCRC@crc+1,?_generateCRC+1
  4339  001202  0012               	return	
  4340  001204                     __end_of_generateCRC:
  4341                           	opt stack 0
  4342                           tblptru	equ	0xFF8
  4343                           tblptrh	equ	0xFF7
  4344                           tblptrl	equ	0xFF6
  4345                           tablat	equ	0xFF5
  4346                           prodh	equ	0xFF4
  4347                           prodl	equ	0xFF3
  4348                           postinc0	equ	0xFEE
  4349                           wreg	equ	0xFE8
  4350                           indf1	equ	0xFE7
  4351                           postinc1	equ	0xFE6
  4352                           postdec1	equ	0xFE5
  4353                           fsr1h	equ	0xFE2
  4354                           fsr1l	equ	0xFE1
  4355                           indf2	equ	0xFDF
  4356                           postinc2	equ	0xFDE
  4357                           postdec2	equ	0xFDD
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function _clearResponse *****************
  4363 ;; Defined at:
  4364 ;;		line 44 in file "modbus.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;		None
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  i               1   15[COMRAM] unsigned char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;		None               void
  4371 ;; Registers used:
  4372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;Total ram usage:        2 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    2
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_readReg
  4389 ;;		_readInputReg
  4390 ;;		_writeReg
  4391 ;;		_writeMultipleRegs
  4392 ;;		_readCoil
  4393 ;;		_readInputCoil
  4394 ;;		_writeCoil
  4395 ;;		_writeMultipleCoils
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text11
  4400  001368                     __ptext11:
  4401                           	opt stack 0
  4402  001368                     _clearResponse:
  4403                           	opt stack 25
  4404                           
  4405                           ;modbus.c: 45: unsigned char i;
  4406                           ;modbus.c: 46: for(i=0;i<125;i++){
  4407                           
  4408                           ;incstack = 0
  4409                           ;incstack = 0
  4410  001368  6E0F               	movwf	??_clearResponse& (0+255),c
  4411  00136A  0E00               	movlw	0
  4412  00136C  6E10               	movwf	clearResponse@i,c
  4413  00136E  500F               	movf	??_clearResponse& (0+255),w,c
  4414  001370  D00D               	goto	L21
  4415  001372                     l1921:
  4416                           
  4417                           ;modbus.c: 47: response[i] = 0;
  4418  001372  5010               	movf	clearResponse@i,w,c
  4419  001374  0D01               	mullw	1
  4420  001376  0101               	movlb	1	; () banked
  4421  001378  0E00               	movlw	low _response	;volatile
  4422  00137A  24F3               	addwf	prodl,w,c
  4423  00137C  6ED9               	movwf	fsr2l,c
  4424  00137E  0101               	movlb	1	; () banked
  4425  001380  0E01               	movlw	high _response	;volatile
  4426  001382  20F4               	addwfc	prodh,w,c
  4427  001384  6EDA               	movwf	fsr2h,c
  4428  001386  0E00               	movlw	0
  4429  001388  6EDF               	movwf	indf2,c
  4430                           
  4431                           ; BSR set to: 1
  4432  00138A  2A10               	incf	clearResponse@i,f,c
  4433  00138C                     L21:
  4434                           
  4435                           ; BSR set to: 1
  4436  00138C  0E7C               	movlw	124
  4437  00138E  6410               	cpfsgt	clearResponse@i,c
  4438  001390  D7F0               	goto	l1921
  4439                           
  4440                           ; BSR set to: 1
  4441  001392  0012               	return	
  4442  001394                     __end_of_clearResponse:
  4443                           	opt stack 0
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           postinc0	equ	0xFEE
  4451                           wreg	equ	0xFE8
  4452                           indf1	equ	0xFE7
  4453                           postinc1	equ	0xFE6
  4454                           postdec1	equ	0xFE5
  4455                           fsr1h	equ	0xFE2
  4456                           fsr1l	equ	0xFE1
  4457                           indf2	equ	0xFDF
  4458                           postinc2	equ	0xFDE
  4459                           postdec2	equ	0xFDD
  4460                           fsr2h	equ	0xFDA
  4461                           fsr2l	equ	0xFD9
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _checkCRC *****************
  4465 ;; Defined at:
  4466 ;;		line 678 in file "modbus.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  i               2   26[COMRAM] int 
  4471 ;;  crc             2   24[COMRAM] unsigned int 
  4472 ;;  j               2   22[COMRAM] int 
  4473 ;;  crcLow          2   20[COMRAM] unsigned int 
  4474 ;;  crcHigh         2   18[COMRAM] unsigned int 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      unsigned char 
  4477 ;; Registers used:
  4478 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;Total ram usage:       14 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    2
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_decodeIt
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text12
  4499  001032                     __ptext12:
  4500                           	opt stack 0
  4501  001032                     _checkCRC:
  4502                           	opt stack 26
  4503                           
  4504                           ;modbus.c: 679: unsigned int crc = 0xFFFF;
  4505                           
  4506                           ;incstack = 0
  4507                           ;incstack = 0
  4508  001032  6819               	setf	checkCRC@crc,c
  4509  001034  681A               	setf	checkCRC@crc+1,c
  4510                           
  4511                           ;modbus.c: 680: unsigned int crcHigh = 0;
  4512  001036  0E00               	movlw	0
  4513  001038  6E14               	movwf	checkCRC@crcHigh+1,c
  4514  00103A  0E00               	movlw	0
  4515  00103C  6E13               	movwf	checkCRC@crcHigh,c
  4516                           
  4517                           ;modbus.c: 681: unsigned int crcLow = 0;
  4518  00103E  0E00               	movlw	0
  4519  001040  6E16               	movwf	checkCRC@crcLow+1,c
  4520  001042  0E00               	movlw	0
  4521  001044  6E15               	movwf	checkCRC@crcLow,c
  4522                           
  4523                           ;modbus.c: 682: int i,j = 0;
  4524  001046  0E00               	movlw	0
  4525  001048  6E18               	movwf	checkCRC@j+1,c
  4526  00104A  0E00               	movlw	0
  4527  00104C  6E17               	movwf	checkCRC@j,c
  4528                           
  4529                           ;modbus.c: 684: for(i=0;i<messageLength-2;i++){
  4530  00104E  0E00               	movlw	0
  4531  001050  6E1C               	movwf	checkCRC@i+1,c
  4532  001052  0E00               	movlw	0
  4533  001054  6E1B               	movwf	checkCRC@i,c
  4534  001056  D027               	goto	l1949
  4535  001058                     l1931:
  4536                           
  4537                           ;modbus.c: 685: crc ^= received[i];
  4538  001058  0100               	movlb	0	; () banked
  4539  00105A  0E60               	movlw	low _received	;volatile
  4540  00105C  241B               	addwf	checkCRC@i,w,c
  4541  00105E  6ED9               	movwf	fsr2l,c
  4542  001060  0100               	movlb	0	; () banked
  4543  001062  0E00               	movlw	high _received	;volatile
  4544  001064  201C               	addwfc	checkCRC@i+1,w,c
  4545  001066  6EDA               	movwf	fsr2h,c
  4546  001068  50DF               	movf	indf2,w,c
  4547  00106A  6E0F               	movwf	??_checkCRC& (0+255),c
  4548  00106C  500F               	movf	??_checkCRC,w,c
  4549  00106E  1A19               	xorwf	checkCRC@crc,f,c
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;modbus.c: 686: for(j=8; j!=0; j--){
  4553  001070  0E00               	movlw	0
  4554  001072  6E18               	movwf	checkCRC@j+1,c
  4555  001074  0E08               	movlw	8
  4556  001076  6E17               	movwf	checkCRC@j,c
  4557  001078                     
  4558                           ; BSR set to: 0
  4559  001078  5018               	movf	checkCRC@j+1,w,c
  4560  00107A  1017               	iorwf	checkCRC@j,w,c
  4561  00107C  B4D8               	btfsc	status,2,c
  4562  00107E  D011               	goto	l1947
  4563                           
  4564                           ;modbus.c: 687: if((crc & 0x0001) != 0){
  4565                           
  4566                           ; BSR set to: 0
  4567  001080  A019               	btfss	checkCRC@crc,0,c
  4568  001082  D008               	goto	l1943
  4569                           
  4570                           ;modbus.c: 688: crc >>= 1;
  4571  001084  90D8               	bcf	status,0,c
  4572  001086  321A               	rrcf	checkCRC@crc+1,f,c
  4573  001088  3219               	rrcf	checkCRC@crc,f,c
  4574                           
  4575                           ;modbus.c: 689: crc ^= 0xA001;
  4576  00108A  0E01               	movlw	1
  4577  00108C  1A19               	xorwf	checkCRC@crc,f,c
  4578  00108E  0EA0               	movlw	160
  4579  001090  1A1A               	xorwf	checkCRC@crc+1,f,c
  4580                           
  4581                           ;modbus.c: 690: }
  4582  001092  D003               	goto	l323
  4583  001094                     l1943:
  4584                           
  4585                           ;modbus.c: 691: else{
  4586                           ;modbus.c: 692: crc >>= 1;
  4587  001094  90D8               	bcf	status,0,c
  4588  001096  321A               	rrcf	checkCRC@crc+1,f,c
  4589  001098  3219               	rrcf	checkCRC@crc,f,c
  4590  00109A                     l323:
  4591  00109A  0617               	decf	checkCRC@j,f,c
  4592  00109C  A0D8               	btfss	status,0,c
  4593  00109E  0618               	decf	checkCRC@j+1,f,c
  4594  0010A0  D7EB               	goto	L22
  4595  0010A2                     l1947:
  4596  0010A2  4A1B               	infsnz	checkCRC@i,f,c
  4597  0010A4  2A1C               	incf	checkCRC@i+1,f,c
  4598  0010A6                     l1949:
  4599  0010A6  0EFE               	movlw	254
  4600  0010A8  243C               	addwf	_messageLength,w,c	;volatile
  4601  0010AA  6E0F               	movwf	??_checkCRC& (0+255),c
  4602  0010AC  6A10               	clrf	(??_checkCRC+1)& (0+255),c
  4603  0010AE  0EFF               	movlw	255
  4604  0010B0  2210               	addwfc	(??_checkCRC+1)& (0+255),f,c
  4605  0010B2  501C               	movf	checkCRC@i+1,w,c
  4606  0010B4  0A80               	xorlw	128
  4607  0010B6  6E11               	movwf	(??_checkCRC+2)& (0+255),c
  4608  0010B8  500F               	movf	??_checkCRC,w,c
  4609  0010BA  5C1B               	subwf	checkCRC@i,w,c
  4610  0010BC  5010               	movf	??_checkCRC+1,w,c
  4611  0010BE  0A80               	xorlw	128
  4612  0010C0  5811               	subwfb	(??_checkCRC+2)& (0+255),w,c
  4613  0010C2  A0D8               	btfss	status,0,c
  4614  0010C4  D7C9               	goto	l1931
  4615                           
  4616                           ;modbus.c: 693: }
  4617                           ;modbus.c: 694: }
  4618                           ;modbus.c: 695: }
  4619                           ;modbus.c: 697: crcHigh = (crc & 0x00FF);
  4620  0010C6  5019               	movf	checkCRC@crc,w,c
  4621  0010C8  6E13               	movwf	checkCRC@crcHigh,c
  4622  0010CA  6A14               	clrf	checkCRC@crcHigh+1,c
  4623                           
  4624                           ;modbus.c: 698: crcLow = (crc & 0xFF00) >>8;
  4625  0010CC  C01A  F00F         	movff	checkCRC@crc+1,??_checkCRC
  4626  0010D0  C00F  F010         	movff	??_checkCRC,??_checkCRC+1
  4627  0010D4  6A11               	clrf	(??_checkCRC+2)& (0+255),c
  4628  0010D6  5010               	movf	??_checkCRC+1,w,c
  4629  0010D8  6E15               	movwf	checkCRC@crcLow,c
  4630  0010DA  6A16               	clrf	checkCRC@crcLow+1,c
  4631                           
  4632                           ;modbus.c: 699: if((crcHigh == received[i])&&(crcLow == received[i+1]))
  4633  0010DC  0100               	movlb	0	; () banked
  4634  0010DE  0E60               	movlw	low _received	;volatile
  4635  0010E0  241B               	addwf	checkCRC@i,w,c
  4636  0010E2  6ED9               	movwf	fsr2l,c
  4637  0010E4  0100               	movlb	0	; () banked
  4638  0010E6  0E00               	movlw	high _received	;volatile
  4639  0010E8  201C               	addwfc	checkCRC@i+1,w,c
  4640  0010EA  6EDA               	movwf	fsr2h,c
  4641  0010EC  50DF               	movf	indf2,w,c
  4642  0010EE  6E0F               	movwf	??_checkCRC& (0+255),c
  4643  0010F0  6A10               	clrf	(??_checkCRC+1)& (0+255),c
  4644  0010F2  5014               	movf	checkCRC@crcHigh+1,w,c
  4645  0010F4  1810               	xorwf	??_checkCRC+1,w,c
  4646  0010F6  E102               	bnz	u1115
  4647  0010F8  5013               	movf	checkCRC@crcHigh,w,c
  4648  0010FA  180F               	xorwf	??_checkCRC,w,c
  4649  0010FC                     u1115:
  4650  0010FC  A4D8               	btfss	status,2,c
  4651  0010FE  D01A               	goto	l1963
  4652                           
  4653                           ; BSR set to: 0
  4654  001100  0E01               	movlw	1
  4655  001102  241B               	addwf	checkCRC@i,w,c
  4656  001104  6E0F               	movwf	??_checkCRC& (0+255),c
  4657  001106  0E00               	movlw	0
  4658  001108  201C               	addwfc	checkCRC@i+1,w,c
  4659  00110A  6E10               	movwf	(??_checkCRC+1)& (0+255),c
  4660  00110C  0100               	movlb	0	; () banked
  4661  00110E  0E60               	movlw	low _received	;volatile
  4662  001110  240F               	addwf	??_checkCRC,w,c
  4663  001112  6ED9               	movwf	fsr2l,c
  4664  001114  0100               	movlb	0	; () banked
  4665  001116  0E00               	movlw	high _received	;volatile
  4666  001118  2010               	addwfc	??_checkCRC+1,w,c
  4667  00111A  6EDA               	movwf	fsr2h,c
  4668  00111C  50DF               	movf	indf2,w,c
  4669  00111E  6E11               	movwf	(??_checkCRC+2)& (0+255),c
  4670  001120  6A12               	clrf	(??_checkCRC+3)& (0+255),c
  4671  001122  5016               	movf	checkCRC@crcLow+1,w,c
  4672  001124  1812               	xorwf	??_checkCRC+3,w,c
  4673  001126  E102               	bnz	u1125
  4674  001128  5015               	movf	checkCRC@crcLow,w,c
  4675  00112A  1811               	xorwf	??_checkCRC+2,w,c
  4676  00112C                     u1125:
  4677  00112C  A4D8               	btfss	status,2,c
  4678  00112E  D002               	goto	l1963
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;modbus.c: 700: {
  4682                           ;modbus.c: 701: return 1;
  4683  001130  0E01               	movlw	1
  4684  001132  D001               	goto	l326
  4685  001134                     l1963:
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;modbus.c: 703: else{
  4689                           ;modbus.c: 704: return 0;
  4690  001134  0E00               	movlw	0
  4691  001136                     l326:
  4692                           
  4693                           ; BSR set to: 0
  4694  001136  0012               	return	
  4695  001138                     __end_of_checkCRC:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           indf1	equ	0xFE7
  4706                           postinc1	equ	0xFE6
  4707                           postdec1	equ	0xFE5
  4708                           fsr1h	equ	0xFE2
  4709                           fsr1l	equ	0xFE1
  4710                           indf2	equ	0xFDF
  4711                           postinc2	equ	0xFDE
  4712                           postdec2	equ	0xFDD
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function _ConfigInterrupts *****************
  4718 ;; Defined at:
  4719 ;;		line 121 in file "system.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;		None               void
  4726 ;; Registers used:
  4727 ;;		None
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;Total ram usage:        0 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    2
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_main
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text13
  4748  0013DC                     __ptext13:
  4749                           	opt stack 0
  4750  0013DC                     _ConfigInterrupts:
  4751                           	opt stack 27
  4752                           
  4753                           ;system.c: 122: RCONbits.IPEN = 0;
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;incstack = 0
  4757                           ;incstack = 0
  4758  0013DC  9ED0               	bcf	4048,7,c	;volatile
  4759                           
  4760                           ;system.c: 123: INTCONbits.GIE = 1;
  4761  0013DE  8EF2               	bsf	intcon,7,c	;volatile
  4762                           
  4763                           ;system.c: 124: INTCONbits.PEIE = 1;
  4764  0013E0  8CF2               	bsf	intcon,6,c	;volatile
  4765  0013E2  0012               	return	
  4766  0013E4                     __end_of_ConfigInterrupts:
  4767                           	opt stack 0
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           postinc0	equ	0xFEE
  4776                           wreg	equ	0xFE8
  4777                           indf1	equ	0xFE7
  4778                           postinc1	equ	0xFE6
  4779                           postdec1	equ	0xFE5
  4780                           fsr1h	equ	0xFE2
  4781                           fsr1l	equ	0xFE1
  4782                           indf2	equ	0xFDF
  4783                           postinc2	equ	0xFDE
  4784                           postdec2	equ	0xFDD
  4785                           fsr2h	equ	0xFDA
  4786                           fsr2l	equ	0xFD9
  4787                           status	equ	0xFD8
  4788                           
  4789 ;; *************** function _OpnUSART *****************
  4790 ;; Defined at:
  4791 ;;		line 24 in file "system.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;		None
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  spbrg           4   15[COMRAM] unsigned long 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;		None               void
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;Total ram usage:        5 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    3
  4812 ;; This function calls:
  4813 ;;		_ClsUSART
  4814 ;; This function is called by:
  4815 ;;		_main
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text14
  4820  0012B6                     __ptext14:
  4821                           	opt stack 0
  4822  0012B6                     _OpnUSART:
  4823                           	opt stack 26
  4824                           
  4825                           ;system.c: 29: unsigned long spbrg = 0;
  4826                           
  4827                           ;incstack = 0
  4828                           ;incstack = 0
  4829  0012B6  0E00               	movlw	0
  4830  0012B8  6E10               	movwf	OpnUSART@spbrg,c
  4831  0012BA  0E00               	movlw	0
  4832  0012BC  6E11               	movwf	OpnUSART@spbrg+1,c
  4833  0012BE  0E00               	movlw	0
  4834  0012C0  6E12               	movwf	OpnUSART@spbrg+2,c
  4835  0012C2  0E00               	movlw	0
  4836  0012C4  6E13               	movwf	OpnUSART@spbrg+3,c
  4837                           
  4838                           ;system.c: 31: spbrg = 10000000L/9600;
  4839  0012C6  0E11               	movlw	17
  4840  0012C8  6E10               	movwf	OpnUSART@spbrg,c
  4841  0012CA  0E04               	movlw	4
  4842  0012CC  6E11               	movwf	OpnUSART@spbrg+1,c
  4843  0012CE  0E00               	movlw	0
  4844  0012D0  6E12               	movwf	OpnUSART@spbrg+2,c
  4845  0012D2  0E00               	movlw	0
  4846  0012D4  6E13               	movwf	OpnUSART@spbrg+3,c
  4847                           
  4848                           ;system.c: 32: spbrg /= 64;
  4849  0012D6  0E06               	movlw	6
  4850  0012D8  6E0F               	movwf	??_OpnUSART& (0+255),c
  4851  0012DA                     u945:
  4852  0012DA  90D8               	bcf	status,0,c
  4853  0012DC  3213               	rrcf	OpnUSART@spbrg+3,f,c
  4854  0012DE  3212               	rrcf	OpnUSART@spbrg+2,f,c
  4855  0012E0  3211               	rrcf	OpnUSART@spbrg+1,f,c
  4856  0012E2  3210               	rrcf	OpnUSART@spbrg,f,c
  4857  0012E4  2E0F               	decfsz	??_OpnUSART& (0+255),f,c
  4858  0012E6  D7F9               	goto	u945
  4859                           
  4860                           ;system.c: 33: spbrg -= 1;
  4861  0012E8  0610               	decf	OpnUSART@spbrg,f,c
  4862  0012EA  0E00               	movlw	0
  4863  0012EC  5A11               	subwfb	OpnUSART@spbrg+1,f,c
  4864  0012EE  5A12               	subwfb	OpnUSART@spbrg+2,f,c
  4865  0012F0  5A13               	subwfb	OpnUSART@spbrg+3,f,c
  4866                           
  4867                           ;system.c: 34: ClsUSART();
  4868  0012F2  ECE3  F009         	call	_ClsUSART	;wreg free
  4869                           
  4870                           ;system.c: 35: TRISCbits.TRISC1 = 0;
  4871  0012F6  9294               	bcf	3988,1,c	;volatile
  4872                           
  4873                           ;system.c: 36: LATCbits.LATC1 = 0;
  4874  0012F8  928B               	bcf	3979,1,c	;volatile
  4875                           
  4876                           ;system.c: 62: TXSTA1 = 0;
  4877  0012FA  0E00               	movlw	0
  4878  0012FC  6EAC               	movwf	4012,c	;volatile
  4879                           
  4880                           ;system.c: 63: RCSTA1 = 0;
  4881  0012FE  0E00               	movlw	0
  4882  001300  6EAB               	movwf	4011,c	;volatile
  4883                           
  4884                           ;system.c: 65: TRISCbits.TRISC6 = 0;
  4885  001302  9C94               	bcf	3988,6,c	;volatile
  4886                           
  4887                           ;system.c: 66: TRISCbits.TRISC7 = 1;
  4888  001304  8E94               	bsf	3988,7,c	;volatile
  4889                           
  4890                           ;system.c: 68: TXSTA1bits.SYNC = 0;
  4891  001306  98AC               	bcf	4012,4,c	;volatile
  4892                           
  4893                           ;system.c: 69: TXSTA1bits.TX9 = 0;
  4894  001308  9CAC               	bcf	4012,6,c	;volatile
  4895                           
  4896                           ;system.c: 70: TXSTA1bits.SENDB = 0;
  4897  00130A  96AC               	bcf	4012,3,c	;volatile
  4898                           
  4899                           ;system.c: 71: TXSTA1bits.BRGH = 0;
  4900  00130C  94AC               	bcf	4012,2,c	;volatile
  4901                           
  4902                           ;system.c: 73: RCSTA1bits.CREN = 1;
  4903  00130E  88AB               	bsf	4011,4,c	;volatile
  4904                           
  4905                           ;system.c: 74: RCSTA1bits.RX9 = 0;
  4906  001310  9CAB               	bcf	4011,6,c	;volatile
  4907                           
  4908                           ;system.c: 76: PIE1bits.RCIE = 1;
  4909  001312  8A9D               	bsf	3997,5,c	;volatile
  4910                           
  4911                           ;system.c: 77: PIE1bits.TXIE = 0;
  4912  001314  989D               	bcf	3997,4,c	;volatile
  4913                           
  4914                           ;system.c: 79: BAUDCON1bits.BRG16 = 0;
  4915  001316  967E               	bcf	3966,3,c	;volatile
  4916                           
  4917                           ;system.c: 80: SPBRG = spbrg;
  4918  001318  C010  FFAF         	movff	OpnUSART@spbrg,4015	;volatile
  4919                           
  4920                           ;system.c: 82: TXSTA1bits.TXEN = 1;
  4921  00131C  8AAC               	bsf	4012,5,c	;volatile
  4922                           
  4923                           ;system.c: 83: RCSTA1bits.SPEN = 1;
  4924  00131E  8EAB               	bsf	4011,7,c	;volatile
  4925  001320  0012               	return	
  4926  001322                     __end_of_OpnUSART:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           indf1	equ	0xFE7
  4938                           postinc1	equ	0xFE6
  4939                           postdec1	equ	0xFE5
  4940                           fsr1h	equ	0xFE2
  4941                           fsr1l	equ	0xFE1
  4942                           indf2	equ	0xFDF
  4943                           postinc2	equ	0xFDE
  4944                           postdec2	equ	0xFDD
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _ClsUSART *****************
  4950 ;; Defined at:
  4951 ;;		line 88 in file "system.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;		None
  4956 ;; Return value:  Size  Location     Type
  4957 ;;		None               void
  4958 ;; Registers used:
  4959 ;;		wreg, status,2, status,0
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;Total ram usage:        0 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    2
  4972 ;; This function calls:
  4973 ;;		Nothing
  4974 ;; This function is called by:
  4975 ;;		_OpnUSART
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979                           	psect	text15
  4980  0013C6                     __ptext15:
  4981                           	opt stack 0
  4982  0013C6                     _ClsUSART:
  4983                           	opt stack 26
  4984                           
  4985                           ;system.c: 95: RCSTA1 &= 0b01001111;
  4986                           
  4987                           ;incstack = 0
  4988                           ;incstack = 0
  4989  0013C6  0E4F               	movlw	79
  4990  0013C8  16AB               	andwf	4011,f,c	;volatile
  4991                           
  4992                           ;system.c: 96: TXSTA1bits.TXEN = 0;
  4993  0013CA  9AAC               	bcf	4012,5,c	;volatile
  4994                           
  4995                           ;system.c: 97: PIE1 &= 0b11001111;
  4996  0013CC  0ECF               	movlw	207
  4997  0013CE  169D               	andwf	3997,f,c	;volatile
  4998  0013D0  0012               	return	
  4999  0013D2                     __end_of_ClsUSART:
  5000                           	opt stack 0
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           postinc0	equ	0xFEE
  5009                           wreg	equ	0xFE8
  5010                           indf1	equ	0xFE7
  5011                           postinc1	equ	0xFE6
  5012                           postdec1	equ	0xFE5
  5013                           fsr1h	equ	0xFE2
  5014                           fsr1l	equ	0xFE1
  5015                           indf2	equ	0xFDF
  5016                           postinc2	equ	0xFDE
  5017                           postdec2	equ	0xFDD
  5018                           fsr2h	equ	0xFDA
  5019                           fsr2l	equ	0xFD9
  5020                           status	equ	0xFD8
  5021                           
  5022 ;; *************** function _isr *****************
  5023 ;; Defined at:
  5024 ;;		line 28 in file "interrupts.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;		None
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;		None
  5029 ;; Return value:  Size  Location     Type
  5030 ;;		None               void
  5031 ;; Registers used:
  5032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;Total ram usage:       14 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    1
  5045 ;; This function calls:
  5046 ;;		_OpenTmr0
  5047 ;;		_modbusDelay
  5048 ;; This function is called by:
  5049 ;;		Interrupt level 2
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	intcode
  5054  000008                     __pintcode:
  5055                           	opt stack 0
  5056  000008                     _isr:
  5057                           	opt stack 25
  5058                           
  5059                           ;incstack = 0
  5060  000008  CFFA F001          	movff	pclath,??_isr
  5061  00000C  CFFB F002          	movff	pclatu,??_isr+1
  5062  000010  ED38  F006         	call	int_func,f	;refresh shadow registers
  5063                           pclatu	equ	0xFFB
  5064                           pclath	equ	0xFFA
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           indf1	equ	0xFE7
  5075                           postinc1	equ	0xFE6
  5076                           postdec1	equ	0xFE5
  5077                           fsr1h	equ	0xFE2
  5078                           fsr1l	equ	0xFE1
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086                           	psect	intcode_body
  5087  000C70                     __pintcode_body:
  5088                           	opt stack 25
  5089  000C70                     int_func:
  5090                           	opt stack 25
  5091  000C70  0006               	pop		; remove dummy address from shadow register refresh
  5092  000C72  CFE9 F003          	movff	fsr0l,??_isr+2
  5093  000C76  CFEA F004          	movff	fsr0h,??_isr+3
  5094  000C7A  CFE1 F005          	movff	fsr1l,??_isr+4
  5095  000C7E  CFE2 F006          	movff	fsr1h,??_isr+5
  5096  000C82  CFD9 F007          	movff	fsr2l,??_isr+6
  5097  000C86  CFDA F008          	movff	fsr2h,??_isr+7
  5098  000C8A  CFF3 F009          	movff	prodl,??_isr+8
  5099  000C8E  CFF4 F00A          	movff	prodh,??_isr+9
  5100  000C92  CFF6 F00B          	movff	tblptrl,??_isr+10
  5101  000C96  CFF7 F00C          	movff	tblptrh,??_isr+11
  5102  000C9A  CFF8 F00D          	movff	tblptru,??_isr+12
  5103  000C9E  CFF5 F00E          	movff	tablat,??_isr+13
  5104  000CA2                     
  5105                           ;interrupts.c: 29: if(PIR1bits.RCIF){
  5106  000CA2  AA9E               	btfss	3998,5,c	;volatile
  5107  000CA4  D001               	goto	i2u84_41
  5108  000CA6  D001               	goto	i2u84_40
  5109  000CA8                     i2u84_41:
  5110  000CA8  D043               	goto	i2l31
  5111  000CAA                     i2u84_40:
  5112  000CAA                     
  5113                           ;interrupts.c: 30: if((!endOfMessage)&&(!newMessage)){
  5114  000CAA  663B               	tstfsz	_endOfMessage,c	;volatile
  5115  000CAC  D001               	goto	i2u85_41
  5116  000CAE  D001               	goto	i2u85_40
  5117  000CB0                     i2u85_41:
  5118  000CB0  D019               	goto	i2l1769
  5119  000CB2                     i2u85_40:
  5120  000CB2  6640               	tstfsz	_newMessage,c	;volatile
  5121  000CB4  D001               	goto	i2u86_41
  5122  000CB6  D001               	goto	i2u86_40
  5123  000CB8                     i2u86_41:
  5124  000CB8  D015               	goto	i2l1769
  5125  000CBA                     i2u86_40:
  5126  000CBA                     
  5127                           ;interrupts.c: 31: if(PIR1bits.TXIF){
  5128  000CBA  A89E               	btfss	3998,4,c	;volatile
  5129  000CBC  D001               	goto	i2u87_41
  5130  000CBE  D001               	goto	i2u87_40
  5131  000CC0                     i2u87_41:
  5132  000CC0  D011               	goto	i2l1769
  5133  000CC2                     i2u87_40:
  5134  000CC2                     
  5135                           ;interrupts.c: 32: received[z] = RCREG1;
  5136  000CC2  503F               	movf	_z,w,c	;volatile
  5137  000CC4  0D01               	mullw	1
  5138  000CC6  0100               	movlb	0	; () banked
  5139  000CC8  0E60               	movlw	low _received	;volatile
  5140  000CCA  24F3               	addwf	prodl,w,c
  5141  000CCC  6ED9               	movwf	fsr2l,c
  5142  000CCE  0100               	movlb	0	; () banked
  5143  000CD0  0E00               	movlw	high _received	;volatile
  5144  000CD2  20F4               	addwfc	prodh,w,c
  5145  000CD4  6EDA               	movwf	fsr2h,c
  5146  000CD6  CFAE FFDF          	movff	4014,indf2	;volatile
  5147  000CDA                     
  5148                           ; BSR set to: 0
  5149                           ;interrupts.c: 33: z++;
  5150  000CDA  2A3F               	incf	_z,f,c	;volatile
  5151  000CDC                     
  5152                           ; BSR set to: 0
  5153                           ;interrupts.c: 34: timerCount = 0;
  5154  000CDC  0E00               	movlw	0
  5155  000CDE  6E3E               	movwf	_timerCount,c	;volatile
  5156  000CE0  D001               	goto	i2l1769
  5157  000CE2                     
  5158                           ; BSR set to: 0
  5159  000CE2  D000               	goto	i2l1769
  5160  000CE4                     i2l1769:
  5161                           
  5162                           ;interrupts.c: 35: }
  5163                           ;interrupts.c: 36: }
  5164                           ;interrupts.c: 37: if(newMessage){
  5165  000CE4  5040               	movf	_newMessage,w,c	;volatile
  5166  000CE6  B4D8               	btfsc	status,2,c
  5167  000CE8  D001               	goto	i2u88_41
  5168  000CEA  D001               	goto	i2u88_40
  5169  000CEC                     i2u88_41:
  5170  000CEC  D056               	goto	i2l36
  5171  000CEE                     i2u88_40:
  5172  000CEE                     
  5173                           ;interrupts.c: 38: OpenTmr0();
  5174  000CEE  ECD7  F009         	call	_OpenTmr0	;wreg free
  5175  000CF2                     
  5176                           ;interrupts.c: 39: if(PIR1bits.TXIF){
  5177  000CF2  A89E               	btfss	3998,4,c	;volatile
  5178  000CF4  D001               	goto	i2u89_41
  5179  000CF6  D001               	goto	i2u89_40
  5180  000CF8                     i2u89_41:
  5181  000CF8  D050               	goto	i2l36
  5182  000CFA                     i2u89_40:
  5183  000CFA                     
  5184                           ;interrupts.c: 40: received[z] = RCREG1;
  5185  000CFA  503F               	movf	_z,w,c	;volatile
  5186  000CFC  0D01               	mullw	1
  5187  000CFE  0100               	movlb	0	; () banked
  5188  000D00  0E60               	movlw	low _received	;volatile
  5189  000D02  24F3               	addwf	prodl,w,c
  5190  000D04  6ED9               	movwf	fsr2l,c
  5191  000D06  0100               	movlb	0	; () banked
  5192  000D08  0E00               	movlw	high _received	;volatile
  5193  000D0A  20F4               	addwfc	prodh,w,c
  5194  000D0C  6EDA               	movwf	fsr2h,c
  5195  000D0E  CFAE FFDF          	movff	4014,indf2	;volatile
  5196  000D12                     
  5197                           ; BSR set to: 0
  5198                           ;interrupts.c: 41: z++;
  5199  000D12  2A3F               	incf	_z,f,c	;volatile
  5200  000D14                     
  5201                           ; BSR set to: 0
  5202                           ;interrupts.c: 42: newMessage = 0;
  5203  000D14  0E00               	movlw	0
  5204  000D16  6E40               	movwf	_newMessage,c	;volatile
  5205  000D18                     
  5206                           ; BSR set to: 0
  5207                           ;interrupts.c: 43: endOfMessage = 0;
  5208  000D18  0E00               	movlw	0
  5209  000D1A  6E3B               	movwf	_endOfMessage,c	;volatile
  5210  000D1C                     
  5211                           ; BSR set to: 0
  5212                           ;interrupts.c: 44: messageLength = 0;
  5213  000D1C  0E00               	movlw	0
  5214  000D1E  6E3C               	movwf	_messageLength,c	;volatile
  5215  000D20                     
  5216                           ; BSR set to: 0
  5217                           ;interrupts.c: 45: modbusMessage = 0;
  5218  000D20  0E00               	movlw	0
  5219  000D22  6E3D               	movwf	_modbusMessage,c	;volatile
  5220  000D24                     
  5221                           ; BSR set to: 0
  5222                           ;interrupts.c: 46: timerCount = 0;
  5223  000D24  0E00               	movlw	0
  5224  000D26  6E3E               	movwf	_timerCount,c	;volatile
  5225  000D28  D038               	goto	i2l36
  5226  000D2A                     
  5227                           ; BSR set to: 0
  5228                           ;interrupts.c: 47: return;
  5229  000D2A  D037               	goto	i2l36
  5230  000D2C                     
  5231                           ; BSR set to: 0
  5232  000D2C  D036               	goto	i2l36
  5233  000D2E                     
  5234                           ; BSR set to: 0
  5235                           ;interrupts.c: 48: }
  5236                           ;interrupts.c: 49: }
  5237                           ;interrupts.c: 50: }
  5238  000D2E  D035               	goto	i2l36
  5239  000D30                     i2l31:
  5240                           
  5241                           ;interrupts.c: 51: else if(INTCONbits.TMR0IF){
  5242  000D30  A4F2               	btfss	intcon,2,c	;volatile
  5243  000D32  D001               	goto	i2u90_41
  5244  000D34  D001               	goto	i2u90_40
  5245  000D36                     i2u90_41:
  5246  000D36  D031               	goto	i2l36
  5247  000D38                     i2u90_40:
  5248  000D38                     
  5249                           ;interrupts.c: 52: modbusDelay();
  5250  000D38  ECE9  F009         	call	_modbusDelay	;wreg free
  5251  000D3C                     
  5252                           ;interrupts.c: 53: timerCount++;
  5253  000D3C  2A3E               	incf	_timerCount,f,c	;volatile
  5254  000D3E                     
  5255                           ;interrupts.c: 54: if(timerCount > 4){
  5256  000D3E  0E04               	movlw	4
  5257  000D40  643E               	cpfsgt	_timerCount,c	;volatile
  5258  000D42  D001               	goto	i2u91_41
  5259  000D44  D001               	goto	i2u91_40
  5260  000D46                     i2u91_41:
  5261  000D46  D026               	goto	i2l1813
  5262  000D48                     i2u91_40:
  5263  000D48                     
  5264                           ;interrupts.c: 55: endOfMessage = 1;
  5265  000D48  0E01               	movlw	1
  5266  000D4A  6E3B               	movwf	_endOfMessage,c	;volatile
  5267                           
  5268                           ;interrupts.c: 56: newMessage = 1;
  5269  000D4C  0E01               	movlw	1
  5270  000D4E  6E40               	movwf	_newMessage,c	;volatile
  5271  000D50                     
  5272                           ;interrupts.c: 57: messageLength = z;
  5273  000D50  C03F  F03C         	movff	_z,_messageLength	;volatile
  5274                           
  5275                           ;interrupts.c: 58: modbusMessage = 1;
  5276  000D54  0E01               	movlw	1
  5277  000D56  6E3D               	movwf	_modbusMessage,c	;volatile
  5278  000D58                     
  5279                           ;interrupts.c: 59: for(z=(messageLength);z!=125;z++){
  5280  000D58  C03C  F03F         	movff	_messageLength,_z	;volatile
  5281  000D5C  D00E               	goto	i2l1807
  5282  000D5E                     i2l1803:
  5283                           
  5284                           ;interrupts.c: 60: received[z] = 0;
  5285  000D5E  503F               	movf	_z,w,c	;volatile
  5286  000D60  0D01               	mullw	1
  5287  000D62  0100               	movlb	0	; () banked
  5288  000D64  0E60               	movlw	low _received	;volatile
  5289  000D66  24F3               	addwf	prodl,w,c
  5290  000D68  6ED9               	movwf	fsr2l,c
  5291  000D6A  0100               	movlb	0	; () banked
  5292  000D6C  0E00               	movlw	high _received	;volatile
  5293  000D6E  20F4               	addwfc	prodh,w,c
  5294  000D70  6EDA               	movwf	fsr2h,c
  5295  000D72  0E00               	movlw	0
  5296  000D74  6EDF               	movwf	indf2,c
  5297  000D76                     
  5298                           ; BSR set to: 0
  5299  000D76  2A3F               	incf	_z,f,c	;volatile
  5300  000D78  D000               	goto	i2l1807
  5301  000D7A                     i2l1807:
  5302  000D7A  503F               	movf	_z,w,c	;volatile
  5303  000D7C  0A7D               	xorlw	125
  5304  000D7E  A4D8               	btfss	status,2,c
  5305  000D80  D001               	goto	i2u92_41
  5306  000D82  D001               	goto	i2u92_40
  5307  000D84                     i2u92_41:
  5308  000D84  D7EC               	goto	i2l1803
  5309  000D86                     i2u92_40:
  5310  000D86  D000               	goto	i2l1809
  5311  000D88                     i2l1809:
  5312                           
  5313                           ;interrupts.c: 61: }
  5314                           ;interrupts.c: 62: z=0;
  5315  000D88  0E00               	movlw	0
  5316  000D8A  6E3F               	movwf	_z,c	;volatile
  5317  000D8C                     
  5318                           ;interrupts.c: 63: T0CONbits.TMR0ON = 0;
  5319  000D8C  9ED5               	bcf	4053,7,c	;volatile
  5320                           
  5321                           ;interrupts.c: 64: timerCount = 0;
  5322  000D8E  0E00               	movlw	0
  5323  000D90  6E3E               	movwf	_timerCount,c	;volatile
  5324  000D92  D000               	goto	i2l1813
  5325  000D94                     i2l1813:
  5326                           
  5327                           ;interrupts.c: 65: }
  5328                           ;interrupts.c: 66: INTCONbits.TMR0IF = 0;
  5329  000D94  94F2               	bcf	intcon,2,c	;volatile
  5330  000D96  D001               	goto	i2l36
  5331  000D98  D000               	goto	i2l36
  5332  000D9A                     i2l36:
  5333  000D9A  C00E  FFF5         	movff	??_isr+13,tablat
  5334  000D9E  C00D  FFF8         	movff	??_isr+12,tblptru
  5335  000DA2  C00C  FFF7         	movff	??_isr+11,tblptrh
  5336  000DA6  C00B  FFF6         	movff	??_isr+10,tblptrl
  5337  000DAA  C00A  FFF4         	movff	??_isr+9,prodh
  5338  000DAE  C009  FFF3         	movff	??_isr+8,prodl
  5339  000DB2  C008  FFDA         	movff	??_isr+7,fsr2h
  5340  000DB6  C007  FFD9         	movff	??_isr+6,fsr2l
  5341  000DBA  C006  FFE2         	movff	??_isr+5,fsr1h
  5342  000DBE  C005  FFE1         	movff	??_isr+4,fsr1l
  5343  000DC2  C004  FFEA         	movff	??_isr+3,fsr0h
  5344  000DC6  C003  FFE9         	movff	??_isr+2,fsr0l
  5345  000DCA  C002  FFFB         	movff	??_isr+1,pclatu
  5346  000DCE  C001  FFFA         	movff	??_isr,pclath
  5347  000DD2  0011               	retfie		f
  5348  000DD4                     __end_of_isr:
  5349                           	opt stack 0
  5350                           pclatu	equ	0xFFB
  5351                           pclath	equ	0xFFA
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           postinc0	equ	0xFEE
  5360                           fsr0h	equ	0xFEA
  5361                           fsr0l	equ	0xFE9
  5362                           wreg	equ	0xFE8
  5363                           indf1	equ	0xFE7
  5364                           postinc1	equ	0xFE6
  5365                           postdec1	equ	0xFE5
  5366                           fsr1h	equ	0xFE2
  5367                           fsr1l	equ	0xFE1
  5368                           indf2	equ	0xFDF
  5369                           postinc2	equ	0xFDE
  5370                           postdec2	equ	0xFDD
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           
  5375 ;; *************** function _modbusDelay *****************
  5376 ;; Defined at:
  5377 ;;		line 37 in file "modbus.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;		None               void
  5384 ;; Registers used:
  5385 ;;		wreg, status,2
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;Total ram usage:        0 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_isr
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text17
  5405  0013D2                     __ptext17:
  5406                           	opt stack 0
  5407  0013D2                     _modbusDelay:
  5408                           	opt stack 25
  5409                           
  5410                           ;modbus.c: 39: TMR0H = 0xF5;
  5411                           
  5412                           ;incstack = 0
  5413                           ;incstack = 0
  5414  0013D2  0EF5               	movlw	245
  5415  0013D4  6ED7               	movwf	4055,c	;volatile
  5416                           
  5417                           ;modbus.c: 40: TMR0L = 0xD7;
  5418  0013D6  0ED7               	movlw	215
  5419  0013D8  6ED6               	movwf	4054,c	;volatile
  5420  0013DA  0012               	return	
  5421  0013DC                     __end_of_modbusDelay:
  5422                           	opt stack 0
  5423                           pclatu	equ	0xFFB
  5424                           pclath	equ	0xFFA
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           postinc0	equ	0xFEE
  5433                           fsr0h	equ	0xFEA
  5434                           fsr0l	equ	0xFE9
  5435                           wreg	equ	0xFE8
  5436                           indf1	equ	0xFE7
  5437                           postinc1	equ	0xFE6
  5438                           postdec1	equ	0xFE5
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _OpenTmr0 *****************
  5449 ;; Defined at:
  5450 ;;		line 102 in file "system.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		wreg, status,2
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;Total ram usage:        0 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		_isr
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text18
  5478  0013AE                     __ptext18:
  5479                           	opt stack 0
  5480  0013AE                     _OpenTmr0:
  5481                           	opt stack 25
  5482                           
  5483                           ;system.c: 103: T0CONbits.TMR0ON = 0;
  5484                           
  5485                           ;incstack = 0
  5486                           ;incstack = 0
  5487  0013AE  9ED5               	bcf	4053,7,c	;volatile
  5488                           
  5489                           ;system.c: 104: T0CONbits.T08BIT = 0;
  5490  0013B0  9CD5               	bcf	4053,6,c	;volatile
  5491                           
  5492                           ;system.c: 105: T0CONbits.T0CS = 0;
  5493  0013B2  9AD5               	bcf	4053,5,c	;volatile
  5494                           
  5495                           ;system.c: 106: T0CONbits.PSA = 1;
  5496  0013B4  86D5               	bsf	4053,3,c	;volatile
  5497                           
  5498                           ;system.c: 108: TMR0H = 0xF5;
  5499  0013B6  0EF5               	movlw	245
  5500  0013B8  6ED7               	movwf	4055,c	;volatile
  5501                           
  5502                           ;system.c: 109: TMR0L = 0xD7;
  5503  0013BA  0ED7               	movlw	215
  5504  0013BC  6ED6               	movwf	4054,c	;volatile
  5505                           
  5506                           ;system.c: 111: T0CONbits.TMR0ON = 1;
  5507  0013BE  8ED5               	bsf	4053,7,c	;volatile
  5508                           
  5509                           ;system.c: 113: INTCONbits.TMR0IF = 0;
  5510  0013C0  94F2               	bcf	intcon,2,c	;volatile
  5511                           
  5512                           ;system.c: 114: INTCONbits.TMR0IE = 1;
  5513  0013C2  8AF2               	bsf	intcon,5,c	;volatile
  5514  0013C4  0012               	return	
  5515  0013C6                     __end_of_OpenTmr0:
  5516                           	opt stack 0
  5517  0000                     pclatu	equ	0xFFB
  5518                           pclath	equ	0xFFA
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           prodh	equ	0xFF4
  5524                           prodl	equ	0xFF3
  5525                           intcon	equ	0xFF2
  5526                           postinc0	equ	0xFEE
  5527                           fsr0h	equ	0xFEA
  5528                           fsr0l	equ	0xFE9
  5529                           wreg	equ	0xFE8
  5530                           indf1	equ	0xFE7
  5531                           postinc1	equ	0xFE6
  5532                           postdec1	equ	0xFE5
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           pclatu	equ	0xFFB
  5542                           pclath	equ	0xFFA
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodh	equ	0xFF4
  5548                           prodl	equ	0xFF3
  5549                           intcon	equ	0xFF2
  5550                           postinc0	equ	0xFEE
  5551                           fsr0h	equ	0xFEA
  5552                           fsr0l	equ	0xFE9
  5553                           wreg	equ	0xFE8
  5554                           indf1	equ	0xFE7
  5555                           postinc1	equ	0xFE6
  5556                           postdec1	equ	0xFE5
  5557                           fsr1h	equ	0xFE2
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566                           	psect	rparam
  5567  0000                     pclatu	equ	0xFFB
  5568                           pclath	equ	0xFFA
  5569                           tblptru	equ	0xFF8
  5570                           tblptrh	equ	0xFF7
  5571                           tblptrl	equ	0xFF6
  5572                           tablat	equ	0xFF5
  5573                           prodh	equ	0xFF4
  5574                           prodl	equ	0xFF3
  5575                           intcon	equ	0xFF2
  5576                           postinc0	equ	0xFEE
  5577                           fsr0h	equ	0xFEA
  5578                           fsr0l	equ	0xFE9
  5579                           wreg	equ	0xFE8
  5580                           indf1	equ	0xFE7
  5581                           postinc1	equ	0xFE6
  5582                           postdec1	equ	0xFE5
  5583                           fsr1h	equ	0xFE2
  5584                           fsr1l	equ	0xFE1
  5585                           indf2	equ	0xFDF
  5586                           postinc2	equ	0xFDE
  5587                           postdec2	equ	0xFDD
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         405
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      64
    BANK0           160      0     125
    BANK1           256      0     175
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15           96      0       0

Pointer List with Targets:

    ?_generateCRC	unsigned int  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _decodeIt->_writeMultipleRegs
    _writeMultipleCoils->_generateCRC
    _writeMultipleRegs->_generateCRC
    _writeReg->_generateCRC
    _writeCoil->_generateCRC
    _readInputReg->_generateCRC
    _readReg->_generateCRC
    _readInputCoil->_generateCRC
    _readCoil->_generateCRC

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6844
                           _OpnUSART
                   _ConfigInterrupts
                           _decodeIt
 ---------------------------------------------------------------------------------
 (1) _decodeIt                                             0     0      0    6818
                           _checkCRC
                           _readCoil
                      _readInputCoil
                            _readReg
                       _readInputReg
                          _writeCoil
                           _writeReg
                  _writeMultipleRegs
                 _writeMultipleCoils
 ---------------------------------------------------------------------------------
 (2) _writeMultipleCoils                                  28    28      0    1028
                                             29 COMRAM    27    27      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeMultipleRegs                                   29    29      0     714
                                             29 COMRAM    29    29      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeReg                                            18    18      0     589
                                             29 COMRAM    18    18      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _writeCoil                                           17    17      0     611
                                             29 COMRAM    17    17      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputReg                                        13    13      0     811
                                             29 COMRAM    13    13      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readReg                                             13    13      0     811
                                             29 COMRAM    13    13      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readInputCoil                                       15    15      0     999
                                             29 COMRAM    15    15      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _readCoil                                            15    15      0     999
                                             29 COMRAM    15    15      0
                      _clearResponse
                        _generateCRC
 ---------------------------------------------------------------------------------
 (3) _generateCRC                                         15    13      2     258
                                             14 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (3) _clearResponse                                        2     2      0      68
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _checkCRC                                            14    14      0     256
                                             14 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpnUSART                                             5     5      0      26
                                             14 COMRAM     5     5      0
                           _ClsUSART
 ---------------------------------------------------------------------------------
 (2) _ClsUSART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
                           _OpenTmr0
                        _modbusDelay
 ---------------------------------------------------------------------------------
 (5) _modbusDelay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _OpenTmr0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpnUSART
     _ClsUSART
   _ConfigInterrupts
   _decodeIt
     _checkCRC
     _readCoil
       _clearResponse
       _generateCRC
     _readInputCoil
       _clearResponse
       _generateCRC
     _readReg
       _clearResponse
       _generateCRC
     _readInputReg
       _clearResponse
       _generateCRC
     _writeCoil
       _clearResponse
       _generateCRC
     _writeReg
       _clearResponse
       _generateCRC
     _writeMultipleRegs
       _clearResponse
       _generateCRC
     _writeMultipleCoils
       _clearResponse
       _generateCRC

 _isr (ROOT)
   _OpenTmr0
   _modbusDelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      64      10       39.1%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      AF       8       68.4%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      7D       5       78.1%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      40       1       67.4%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       7       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D0       6        0.0%
DATA                 0      0     1D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Dec 16 13:38:32 2013

                                 _z 003F    writeMultipleCoils@wmc_AddressLow 0026  
                      generateCRC@i 0018                        generateCRC@j 001A  
                writeReg@wr_Address 0028                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                       __CFG_OSC$HS 000000                        __CFG_CP4$OFF 000000  
                      __CFG_CP5$OFF 000000                        __CFG_CP6$OFF 000000  
                      __CFG_CP7$OFF 000000   writeMultipleCoils@wmc_AddressHigh 0024  
                               l204 0872                                 l212 102A  
                               l213 100C                                 l301 026E  
                               l302 024E                                 l223 0C60  
                               l224 0C42                                 l313 11A0  
                               l162 12B0                                 l323 109A  
                               l326 1136                                 l246 068C  
                               l190 0A5A                                 l280 0EE4  
                               l269 0462                                 l279 0F02  
                      __CFG_CPB$OFF 000000                        __CFG_CPD$OFF 000000  
                               u945 12DA                                 _isr 0008  
                               prod 000FF3                                 wreg 000FE8  
                        _TXSTA1bits 000FAC                        __CFG_MODE$MC 000000  
                      __CFG_LVP$OFF 000000                        __CFG_WDT$OFF 000000  
                              l2005 0554                                l2031 05CE  
                              l2017 058A                                l2105 032A  
                              l2035 05EE                                l2043 0626  
                              l2131 03A4                                l2203 0998  
                              l2045 062C                                l2029 05C4  
                              l2117 0360                                l2213 09EA  
                              l2063 06AA                                l2135 03C4  
                              l2143 03FC                                l2145 0402  
                              l2129 039A                                l2233 0A76  
                              l2305 088E                                l2163 0480  
                              l2331 0E7C                                l2195 092A  
                              l2275 07B0                                l2267 0742  
                              l2285 0802                                l2453 0B68  
                              l1901 1284                                l1821 13A0  
                              l1921 1372                                l1905 1296  
                              l1931 1058                                l2643 11A8  
                              l2627 115E                                l2467 0BE2  
                              l2645 11AC                                l1909 12A8  
                              l1943 1094                                l2639 119A  
                              l2575 0196                                l2583 01B4  
                              l2559 0130                                l2585 01BE  
                              l1881 122A                                l1963 1134  
                              l1947 10A2                                l2595 0210  
                              l1949 10A6                                l2589 01F4  
                              l2597 0216                                l1893 1260  
                              l1885 123C                                l1897 1272  
                              l1889 124E                                ?_isr 0001  
                              u1115 10FC                                u1125 112C  
                              u1214 0606                                u1215 0602  
                              u1314 0378                                u1315 0374  
                              u1184 05A2                                u1344 03DC  
                              u1185 059E                                u1345 03D8  
                              u1425 0A86                                _LATF 000F8E  
                              u1624 0170                                u1465 089E  
                              u1625 016C                                u1654 01CE  
                              u1655 01CA                                _PIE1 000F9D  
                              i2l31 0D30                                i2l40 0D7A  
                              i2l32 0CE4                                i2l41 0D5E  
                              i2l33 0CE2                                i2l42 0D88  
                              i2l34 0D2E                                i2l35 0D2C  
                              i2l36 0D9A                                i2l37 0D9A  
                              i2l38 0D98                                i2l39 0D94  
       writeMultipleCoils@remainder 0033                      generateCRC@crc 001C  
                              _main 1394                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr0l 000FE9  
                              fsr2h 000FDA                                indf1 000FE7  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                pclat 000FFA  
                              prodh 000FF4                                prodl 000FF3  
                              start 0014                       __CFG_IESO$OFF 000000  
                     __CFG_MCLRE$ON 000000                               ??_isr 0001  
                      _BAUDCON1bits 000F7E                       __CFG_WAIT$OFF 000000  
                             ?_main 0001                      clearResponse@i 0010  
         writeReg@wr_valToWriteHigh 0026                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISF 000F97                       __CFG_PWRT$OFF 000000  
               writeCoil@wc_Address 002B                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                       __CFG_WRT4$OFF 000000  
                     __CFG_WRT5$OFF 000000                       __CFG_WRT6$OFF 000000  
                     __CFG_WRT7$OFF 000000                      __CFG_EBTR0$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBTR1$OFF 000000  
      writeMultipleCoils@valToWrite 0032                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                      __CFG_EBTR4$OFF 000000  
                    __CFG_EBTR5$OFF 000000                      __CFG_EBTR6$OFF 000000  
                    __CFG_EBTR7$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
                    __CFG_EBTRB$OFF 000000                               _coils 017D  
                   __end_of_readReg 0A9A               writeReg@wr_AddressLow 0020  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8                    __end_of_ClsUSART 13D2  
                      ?_modbusDelay 0001                      checkCRC@crcLow 0015  
        __size_of_writeMultipleRegs 01D6           writeCoil@wc_valToWriteLow 0023  
                   __initialization 1322     writeMultipleRegs@wmr_AddressLow 002A  
                      __end_of_main 13AE               writeMultipleCoils@crc 0030  
             writeMultipleCoils@lsb 0022                    __end_of_OpnUSART 1322  
   writeMultipleRegs@valToWriteHigh 0022                              ??_main 003B  
                  __end_of_OpenTmr0 13C6                       __activetblptr 000000  
                     ?_readInputReg 0001               __end_of_clearResponse 1394  
          __end_of_ConfigInterrupts 13E4              __size_of_readInputCoil 022A  
                       readCoil@crc 0022                         readCoil@lsb 0029  
                   __CFG_BBSIZ$BB2K 000000                              i2l1801 0D58  
                            i2l1811 0D8C                              i2l1803 0D5E  
                            i2l1805 0D76                              i2l1813 0D94  
                            i2l1807 0D7A                              i2l1809 0D88  
                            i2l1761 0CBA                              i2l1771 0CEE  
                            i2l1763 0CC2                              i2l1755 0CA2  
                            i2l1781 0D18                              i2l1773 0CF2  
                            i2l1765 0CDA                              i2l1757 0CAA  
                            i2l1791 0D38                              i2l1783 0D1C  
                            i2l1775 0CFA                              i2l1767 0CDC  
                            i2l1759 0CB2                              i2l1793 0D3C  
                            i2l1785 0D20                              i2l1777 0D12  
                            i2l1769 0CE4                              i2l1795 0D3E  
                            i2l1787 0D24                              i2l1779 0D14  
                            i2l1797 0D48                              i2l1789 0D2A  
                            i2l1799 0D50                              _RCREG1 000FAE  
                            _RCSTA1 000FAB                    __end_of_checkCRC 1138  
                  __end_of_decodeIt 12B6                              _TXREG1 000FAD  
                            _TXSTA1 000FAC              writeCoil@wc_valToWrite 0027  
              __size_of_generateCRC 00CC                      __CFG_XINST$OFF 000000  
                    __CFG_STVREN$ON 000000                    __end_of_readCoil 06CA  
    writeMultipleCoils@wmc_numCoils 0034      writeMultipleCoils@wmc_numBytes 0020  
                            clear_0 1328                              clear_1 1334  
                            clear_2 1340              writeReg@wr_AddressHigh 0022  
                   readInputReg@crc 0022                           ??_readReg 001E  
                      __pdataCOMRAM 0040                      ??_readInputReg 001E  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                    __end_of_writeReg 1032  
                        __accesstop 0060             __end_of__initialization 1362  
          writeReg@wr_valToWriteLow 0024       writeMultipleCoils@wmc_Address 002D  
       __size_of_writeMultipleCoils 025E                     checkCRC@crcHigh 0013  
                     _readInputCoil 0276                      __pcstackCOMRAM 0001  
                         ?_ClsUSART 0001                        _endOfMessage 003B  
         readInputCoil@howManyBytes 0027                          __pbssBANK0 0060  
                        __pbssBANK1 0100                          __pbssBANK2 0200  
                         ?_OpnUSART 0001                           ?_OpenTmr0 0001  
                    ?_readInputCoil 0001                __size_of_modbusDelay 000A  
                         ?_checkCRC 0001                           ?_decodeIt 0001  
                        ??_ClsUSART 000F                             i2u90_40 0D38  
                           i2u90_41 0D36                             i2u91_40 0D48  
                           i2u91_41 0D46                             i2u92_40 0D86  
                           i2u84_40 0CAA                             i2u92_41 0D84  
                           i2u84_41 0CA8                             i2u85_40 0CB2  
                           i2u85_41 0CB0                             i2u86_40 0CBA  
                           i2u86_41 0CB8                             i2u87_40 0CC2  
                           i2u87_41 0CC0                             i2u88_40 0CEE  
                           i2u88_41 0CEC                             i2u89_40 0CFA  
                           i2u89_41 0CF8         writeMultipleRegs@valToWrite 0034  
                         ?_readCoil 0001                          ??_OpnUSART 000F  
                __size_of_writeCoil 0136                   readReg@rr_Address 0024  
                        ??_OpenTmr0 0001                             __Hparam 0000  
                writeMultipleRegs@i 0039                  writeMultipleRegs@j 0038  
                           __Lparam 0000                __end_of_readInputReg 08B2  
                        _holdingReg 0200                   generateCRC@crcLow 0014  
                        _newMessage 0040                             __pcinit 1322  
                     _messageLength 003C                             __ramtop 1000  
                           __ptext0 1394                             __ptext1 1204  
                           __ptext2 0018                             __ptext3 0A9A  
                           __ptext4 0F0A                             __ptext5 0DD4  
                           __ptext6 06CA                             __ptext7 08B2  
                           __ptext8 0276                             __ptext9 04A0  
                         ?_writeReg 0001                           _T0CONbits 000FD5  
                        ??_checkCRC 000F                             _readReg 08B2  
                      __size_of_isr 0DCC                          ??_decodeIt 003B  
                  readInputCoil@crc 0022                    readInputCoil@lsb 0029  
                 ?_ConfigInterrupts 0001                      __pintcode_body 0C70  
              end_of_initialization 1362                  ??_ConfigInterrupts 000F  
                 readReg@rr_numRegs 0026                          ??_readCoil 001E  
                           int_func 0C70                     ??_readInputCoil 001E  
                     _modbusMessage 003D                        writeCoil@crc 0029  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE                          _timerCount 003E  
                        ??_writeReg 001E                   readCoil@remainder 0024  
                 __end_of_writeCoil 0F0A                           _TRISCbits 000F94  
                     ??_generateCRC 0011               writeReg@wr_valToWrite 002A  
            __size_of_clearResponse 002C             writeCoil@wc_AddressHigh 0021  
                     __pidataCOMRAM 13E4                 start_initialization 1322  
   writeMultipleRegs@wmr_numRegsLow 002E                         __end_of_isr 0DD4  
                 __size_of_ClsUSART 000C      writeMultipleRegs@valToWriteLow 0024  
        __end_of_writeMultipleCoils 0276               __size_of_readInputReg 01E8  
              writeMultipleRegs@crc 0036                          readReg@crc 0022  
                 __size_of_OpnUSART 006C                 __end_of_generateCRC 1204  
                 __size_of_OpenTmr0 0018                      readInputCoil@i 002A  
                    readInputCoil@j 002B                      readInputCoil@k 002C  
                    readInputCoil@l 0028                    __CFG_LPT1OSC$OFF 000000  
                       __pbssCOMRAM 003B                        _readInputReg 06CA  
                 __size_of_checkCRC 0106                   __size_of_decodeIt 00B2  
                     _clearResponse 1368                       ??_modbusDelay 0001  
                 __size_of_readCoil 022A                   __CFG_CCP2MX$PORTC 000000  
                         __pintcode 0008                           checkCRC@i 001B  
                         checkCRC@j 0017                            ?_readReg 0001  
                 __size_of_writeReg 0128                      ?_clearResponse 0001  
              readCoil@howManyBytes 0027                         _generateCRC 1138  
                          _LATCbits 000F8B                            _PIE1bits 000F9D  
  writeMultipleRegs@wmr_numRegsHigh 002C                            _PIR1bits 000F9E  
             __CFG_DATABW$DATA16BIT 000000           __size_of_ConfigInterrupts 0008  
                          _RCONbits 000FD0                    __CFG_WDTPS$32768 000000  
                       writeReg@crc 002C  writeMultipleCoils@wmc_numCoilsHigh 0028  
               __end_of_modbusDelay 13DC                   __CFG_ECCPMX$PORTE 000000  
                          _ClsUSART 13C6                         checkCRC@crc 0019  
                         _writeCoil 0DD4              writeCoil@wc_AddressLow 001F  
                     OpnUSART@spbrg 0010                 writeMultipleCoils@i 0038  
               writeMultipleCoils@j 0037                 writeMultipleCoils@k 0023  
               writeMultipleCoils@l 0036                 writeMultipleCoils@q 002C  
                          _OpnUSART 12B6                           readCoil@i 002A  
                         readCoil@j 002B                           readCoil@k 002C  
                         readCoil@l 0028                            _OpenTmr0 13AE  
                          __Hrparam 0000               __end_of_readInputCoil 04A0  
                          __Lrparam 0000      writeMultipleCoils@howManyBytes 002F  
                     readInputReg@i 0028                       readInputReg@j 002A  
                generateCRC@crcHigh 0016                            _checkCRC 1032  
                   ??_clearResponse 000F                            _decodeIt 1204  
                  __size_of_readReg 01E8                            __ptext10 1138  
                          __ptext11 1368                            __ptext12 1032  
                          __ptext13 13DC                            __ptext14 12B6  
                          __ptext15 13C6                            __ptext17 13D2  
                          __ptext18 13AE                          ?_writeCoil 0001  
     writeMultipleRegs@wmr_numBytes 0030          writeCoil@wc_valToWriteHigh 0025  
                          _readCoil 04A0                       __size_of_main 001A  
  writeMultipleRegs@wmr_AddressHigh 0028                            _received 0060  
                       _modbusDelay 13D2                          writeCoil@i 002D  
      writeMultipleRegs@wmr_Address 0032                            _response 0100  
 writeMultipleCoils@wmc_numCoilsLow 002A            generateCRC@messageLength 000F  
                _writeMultipleCoils 0018                            _writeReg 0F0A  
             __CFG_ADDRBW$ADDR20BIT 000000                 ?_writeMultipleCoils 0001  
                        _INTCONbits 000FF2              readInputReg@rr_Address 0024  
                readCoil@rc_Address 0020                            readReg@i 0028  
                          readReg@j 002A             readInputCoil@rc_Address 0020  
               readCoil@rc_numCoils 0025            readInputCoil@rc_numCoils 0025  
                          intlevel2 0000                ??_writeMultipleCoils 001E  
      writeMultipleRegs@wmr_numRegs 0026                          _RCSTA1bits 000FAB  
                  _ConfigInterrupts 13DC                           writeReg@i 002E  
                 _writeMultipleRegs 0A9A                  ?_writeMultipleRegs 0001  
            readInputReg@rr_numRegs 0026                 ??_writeMultipleRegs 001E  
                       ??_writeCoil 001E                        ?_generateCRC 000F  
            readInputCoil@remainder 0024           __end_of_writeMultipleRegs 0C70  
